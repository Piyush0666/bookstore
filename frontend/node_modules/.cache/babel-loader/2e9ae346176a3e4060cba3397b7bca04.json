{"ast":null,"code":"/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport var isContiguous = function (days, isSingleWeek, firstDayOfWeek) {\n  var daySet = new Set(days);\n  var amountOfNoNeighbors = 0;\n\n  for (var _i = 0, days_1 = days; _i < days_1.length; _i++) {\n    var day = days_1[_i];\n    var nextDay = (day + 1) % 7;\n\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  } // In case the full week is provided, then each day has a neighbor\n  //, otherwise the last day does not have a neighbor.\n\n\n  return amountOfNoNeighbors < 2;\n};","map":{"version":3,"mappings":"AAEA;;;;;;AAMA,OAAO,IAAMA,YAAY,GAAG,UAACC,IAAD,EAAoBC,YAApB,EAA2CC,cAA3C,EAAoE;EAC9F,IAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQJ,IAAR,CAAf;EACA,IAAIK,mBAAmB,GAAG,CAA1B;;EACA,KAAkB,yBAAlB,EAAkBC,kBAAlB,EAAkBA,IAAlB,EAAwB;IAAnB,IAAMC,GAAG,aAAT;IACH,IAAMC,OAAO,GAAG,CAACD,GAAG,GAAG,CAAP,IAAY,CAA5B;;IACA,IAAI,EAAEJ,MAAM,CAACM,GAAP,CAAWD,OAAX,MAAwB,CAACP,YAAD,IAAiBC,cAAc,KAAKM,OAA5D,CAAF,CAAJ,EAA6E;MAC3EH,mBAAmB;IACpB;EACF,CAR6F,CAU9F;EACA;;;EACA,OAAOA,mBAAmB,GAAG,CAA7B;AACD,CAbM","names":["isContiguous","days","isSingleWeek","firstDayOfWeek","daySet","Set","amountOfNoNeighbors","_i","day","nextDay","has"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\dateGrid\\isContiguous.ts"],"sourcesContent":["import { DayOfWeek } from '../dateValues/dateValues';\n\n/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport const isContiguous = (days: DayOfWeek[], isSingleWeek: boolean, firstDayOfWeek: DayOfWeek): boolean => {\n  const daySet = new Set(days);\n  let amountOfNoNeighbors = 0;\n  for (const day of days) {\n    const nextDay = (day + 1) % 7;\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  }\n\n  // In case the full week is provided, then each day has a neighbor\n  //, otherwise the last day does not have a neighbor.\n  return amountOfNoNeighbors < 2;\n};\n"]},"metadata":{},"sourceType":"module"}