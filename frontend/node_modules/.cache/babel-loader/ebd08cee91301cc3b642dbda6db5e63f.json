{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n}; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b, _c;\n\n    var props = this.props;\n    var\n    /* eslint-disable deprecation/deprecation */\n    className = props.className,\n        containerClassName = props.containerClassName,\n        contentClassName = props.contentClassName,\n        elementToFocusOnDismiss = props.elementToFocusOnDismiss,\n        firstFocusableSelector = props.firstFocusableSelector,\n        forceFocusInsideTrap = props.forceFocusInsideTrap,\n        styles = props.styles,\n        hidden = props.hidden,\n        _d = props.disableRestoreFocus,\n        disableRestoreFocus = _d === void 0 ? props.ignoreExternalFocusing : _d,\n        isBlocking = props.isBlocking,\n        isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap,\n        isDarkOverlay = props.isDarkOverlay,\n        _e = props.isOpen,\n        isOpen = _e === void 0 ? !hidden : _e,\n        onDismiss = props.onDismiss,\n        onDismissed = props.onDismissed,\n        onLayerDidMount = props.onLayerDidMount,\n        responsiveMode = props.responsiveMode,\n        subText = props.subText,\n        theme = props.theme,\n        title = props.title,\n        topButtonsProps = props.topButtonsProps,\n        type = props.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = props.minWidth,\n        maxWidth = props.maxWidth,\n        modalProps = props.modalProps;\n\n    var mergedLayerProps = __assign({\n      onLayerDidMount: onLayerDidMount\n    }, modalProps === null || modalProps === void 0 ? void 0 : modalProps.layerProps);\n\n    var dialogDraggableClassName;\n    var dragOptions; // If dragOptions are provided, but no drag handle is specified, we supply a drag handle,\n    // and inform dialog contents to add class to draggable class to the header\n\n    if ((modalProps === null || modalProps === void 0 ? void 0 : modalProps.dragOptions) && !((_a = modalProps.dragOptions) === null || _a === void 0 ? void 0 : _a.dragHandleSelector)) {\n      // spread options to avoid mutating props\n      dragOptions = __assign({}, modalProps.dragOptions);\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = \".\" + dialogDraggableClassName;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      disableRestoreFocus: disableRestoreFocus,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      responsiveMode: responsiveMode,\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      dragOptions: dragOptions,\n      layerProps: mergedLayerProps,\n      isOpen: isOpen\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_b = props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleId) || this._defaultTitleTextId\n      }, (_c = props.dialogContentProps) === null || _c === void 0 ? void 0 : _c.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({}, mergedModalProps, {\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss || mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      showCloseButton: mergedModalProps.isBlocking,\n      onDismiss: onDismiss\n    }, dialogContentProps), props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":{"version":3,"mappings":"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","names":["React","warnDeprecations","classNamesFunction","getId","DialogType","Modal","withResponsiveMode","getClassNames","DialogContent","DefaultModalProps","isDarkOverlay","isBlocking","className","containerClassName","topOffsetFixed","enableAriaHiddenSiblings","DefaultDialogContentProps","type","normal","topButtonsProps","__extends","props","_super","_this","ariaDescribedById","modalProps","dialogContentProps","subText","id","subtitleAriaId","_defaultSubTextId","ariaLabelledById","title","titleAriaId","_defaultTitleTextId","_id","process","env","NODE_ENV","isOpen","contentClassName","onDismissed","onLayerDidMount","DialogBase","elementToFocusOnDismiss","firstFocusableSelector","forceFocusInsideTrap","styles","hidden","_d","disableRestoreFocus","ignoreExternalFocusing","isClickableOutsideFocusTrap","_e","onDismiss","responsiveMode","theme","minWidth","maxWidth","mergedLayerProps","layerProps","dialogDraggableClassName","dragOptions","_a","dragHandleSelector","mergedModalProps","draggableHeaderClassName","titleProps","_b","titleId","_c","classNames","dialogDefaultMinWidth","dialogDefaultMaxWidth","__assign","root","main","_getSubTextId","_getTitleTextId","subTextId","showCloseButton","children","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Dialog\\Dialog.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\nimport type { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport type { IDialogContentProps } from './DialogContent.types';\nimport type { IModalProps } from '../../Modal';\nimport type { ILayerProps } from '../../Layer';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      disableRestoreFocus = props.ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen = !hidden,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = props;\n\n    const mergedLayerProps: ILayerProps = {\n      onLayerDidMount,\n      ...modalProps?.layerProps,\n    };\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IModalProps['dragOptions'];\n\n    // If dragOptions are provided, but no drag handle is specified, we supply a drag handle,\n    // and inform dialog contents to add class to draggable class to the header\n    if (modalProps?.dragOptions && !modalProps.dragOptions?.dragHandleSelector) {\n      // spread options to avoid mutating props\n      dragOptions = { ...modalProps.dragOptions };\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = `.${dialogDraggableClassName}`;\n    }\n\n    const mergedModalProps: IModalProps = {\n      ...DefaultModalProps,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      disableRestoreFocus,\n      isClickableOutsideFocusTrap,\n      responsiveMode,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      dragOptions,\n      layerProps: mergedLayerProps,\n      isOpen,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        {...mergedModalProps}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss || mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          showCloseButton={mergedModalProps.isBlocking}\n          onDismiss={onDismiss}\n          {...dialogContentProps}\n        >\n          {props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}