{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\n\nvar DetailsListInner = function (props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n      className = props.className,\n      checkboxVisibility = props.checkboxVisibility,\n      compact = props.compact,\n      constrainMode = props.constrainMode,\n      dragDropEvents = props.dragDropEvents,\n      groups = props.groups,\n      groupProps = props.groupProps,\n      indentWidth = props.indentWidth,\n      items = props.items,\n      isPlaceholderData = props.isPlaceholderData,\n      isHeaderVisible = props.isHeaderVisible,\n      layoutMode = props.layoutMode,\n      onItemInvoked = props.onItemInvoked,\n      onItemContextMenu = props.onItemContextMenu,\n      onColumnHeaderClick = props.onColumnHeaderClick,\n      onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n      _a = props.selectionMode,\n      selectionMode = _a === void 0 ? selection.mode : _a,\n      selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n      selectionZoneProps = props.selectionZoneProps,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaLabel = props.ariaLabel,\n      ariaLabelForGrid = props.ariaLabelForGrid,\n      rowElementEventMap = props.rowElementEventMap,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.shouldApplyApplicationRole,\n      // eslint-disable-next-line deprecation/deprecation\n  shouldApplyApplicationRole = _b === void 0 ? false : _b,\n      getKey = props.getKey,\n      listProps = props.listProps,\n      usePageCache = props.usePageCache,\n      onShouldVirtualize = props.onShouldVirtualize,\n      viewport = props.viewport,\n      minimumPixelsForDrag = props.minimumPixelsForDrag,\n      getGroupHeight = props.getGroupHeight,\n      styles = props.styles,\n      theme = props.theme,\n      _c = props.cellStyleProps,\n      cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n      onRenderCheckbox = props.onRenderCheckbox,\n      useFastIcons = props.useFastIcons,\n      dragDropHelper = props.dragDropHelper,\n      adjustedColumns = props.adjustedColumns,\n      isCollapsed = props.isCollapsed,\n      isSizing = props.isSizing,\n      isSomeGroupExpanded = props.isSomeGroupExpanded,\n      version = props.version,\n      rootRef = props.rootRef,\n      listRef = props.listRef,\n      focusZoneRef = props.focusZoneRef,\n      columnReorderOptions = props.columnReorderOptions,\n      groupedListRef = props.groupedListRef,\n      headerRef = props.headerRef,\n      onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n      onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n      onRowDidMount = props.onRowDidMount,\n      onRowWillUnmount = props.onRowWillUnmount,\n      disableSelectionZone = props.disableSelectionZone,\n      _d = props.isSelectedOnFocus,\n      isSelectedOnFocus = _d === void 0 ? true : _d,\n      onColumnResized = props.onColumnResized,\n      onColumnAutoResized = props.onColumnAutoResized,\n      onToggleCollapse = props.onToggleCollapse,\n      onActiveRowChanged = props.onActiveRowChanged,\n      onBlur = props.onBlur,\n      eventsToRegister = props.rowElementEventMap,\n      onRenderMissingItem = props.onRenderMissingItem,\n      onRenderItemColumn = props.onRenderItemColumn,\n      onRenderField = props.onRenderField,\n      getCellValueKey = props.getCellValueKey,\n      getRowAriaLabel = props.getRowAriaLabel,\n      getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n      checkButtonAriaLabel = props.checkButtonAriaLabel,\n      checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel,\n      checkboxCellClassName = props.checkboxCellClassName,\n      useReducedRowRenderer = props.useReducedRowRenderer,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n      onRenderDefaultRow = props.onRenderDefaultRow,\n      selectionZoneRef = props.selectionZoneRef,\n      focusZoneProps = props.focusZoneProps;\n  var defaultRole = 'grid';\n  var role = props.role ? props.role : defaultRole;\n  var rowId = getId('row');\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps, groupedDetailsListIndexMap]);\n  var finalGroupProps = React.useMemo(function () {\n    var _a;\n\n    return __assign(__assign({}, groupProps), {\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: __assign(__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), {\n        selectAllButtonProps: __assign({\n          'aria-label': checkButtonGroupAriaLabel\n        }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps)\n      })\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index, group) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var groupKey = group ? group.key : undefined;\n    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;\n    var rowRole = role === defaultRole ? undefined : 'presentation';\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      id: rowId + \"-\" + index,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      onRenderField: onRenderField,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons,\n      role: rowRole\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, onRenderField, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, isHeaderVisible, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth, role, groupedDetailsListIndexMap]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n\n  var focusZoneInnerProps = __assign(__assign({}, focusZoneProps), {\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged ? focusZoneProps.onActiveElementChanged : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur\n  });\n\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneInnerProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneInnerProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef, isSelectedOnFocus]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return React.createElement(\"div\", __assign({\n    ref: rootRef,\n    className: classNames.root,\n    \"data-automationid\": \"DetailsList\",\n    \"data-is-scrollable\": \"false\"\n  }, shouldApplyApplicationRole ? {\n    role: 'application'\n  } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabelForGrid || ariaLabel,\n    \"aria-rowcount\": isPlaceholderData ? 0 : rowCount,\n    \"aria-colcount\": colCount,\n    \"aria-readonly\": \"true\",\n    \"aria-busy\": isPlaceholderData\n  }, React.createElement(\"div\", {\n    onKeyDown: onHeaderKeyDown,\n    role: \"presentation\",\n    className: classNames.headerWrapper\n  }, isHeaderVisible && onRenderDetailsHeader({\n    componentRef: headerRef,\n    selectionMode: selectionMode,\n    layoutMode: layoutMode,\n    selection: selection,\n    columns: adjustedColumns,\n    onColumnClick: onColumnHeaderClick,\n    onColumnContextMenu: onColumnHeaderContextMenu,\n    onColumnResized: onColumnResized,\n    onColumnIsSizingChanged: onColumnIsSizingChanged,\n    onColumnAutoResized: onColumnAutoResized,\n    groupNestingDepth: groupNestingDepth,\n    isAllCollapsed: isCollapsed,\n    onToggleCollapseAll: onToggleCollapse,\n    ariaLabel: ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n    selectAllVisibility: selectAllVisibility,\n    collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n    viewport: viewport,\n    columnReorderProps: columnReorderProps,\n    minimumPixelsForDrag: minimumPixelsForDrag,\n    cellStyleProps: cellStyleProps,\n    checkboxVisibility: checkboxVisibility,\n    indentWidth: indentWidth,\n    onRenderDetailsCheckbox: onRenderCheckbox,\n    rowWidth: sumColumnWidths(adjustedColumns),\n    useFastIcons: useFastIcons\n  }, onRenderDetailsHeader)), React.createElement(\"div\", {\n    onKeyDown: onContentKeyDown,\n    role: \"presentation\",\n    className: classNames.contentWrapper\n  }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n    ref: selectionZoneRef,\n    selection: selection,\n    selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n    selectionMode: selectionMode,\n    isSelectedOnFocus: isSelectedOnFocus,\n    selectionClearedOnEscapePress: isSelectedOnFocus,\n    toggleWithoutModifierPressed: !isSelectedOnFocus,\n    onItemInvoked: onItemInvoked,\n    onItemContextMenu: onItemContextMenu,\n    enterModalOnTouch: enterModalSelectionOnTouch\n  }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))));\n};\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n          checkboxVisibility = _a.checkboxVisibility,\n          items = _a.items,\n          setKey = _a.setKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          columns = _a.columns,\n          viewport = _a.viewport,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n          isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n\n      var nextState = previousState;\n\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n\n      return nextState;\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.updateColumn = function (column, options) {\n    var _a, _b;\n\n    var NO_COLUMNS = [];\n    var _c = this.props,\n        _d = _c.columns,\n        columns = _d === void 0 ? NO_COLUMNS : _d,\n        selectionMode = _c.selectionMode,\n        checkboxVisibility = _c.checkboxVisibility,\n        columnReorderOptions = _c.columnReorderOptions;\n    var width = options.width,\n        newColumnIndex = options.newColumnIndex;\n    var index = columns.findIndex(function (col) {\n      return col.key === column.key;\n    });\n\n    if (width) {\n      this._onColumnResized(column, width, index);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n      var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      var columnIndex = (showCheckbox ? 2 : 1) + index;\n      var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n      var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;\n      var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;\n      var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          var dragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        checkboxVisibility = _a.checkboxVisibility,\n        flexMargin = _a.flexMargin,\n        skipViewportMeasures = _a.skipViewportMeasures;\n    var remainingWidth = viewportWidth - (flexMargin || 0);\n    var sumProportionalWidth = 0;\n    newColumns.forEach(function (col) {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n    var widthFraction = remainingWidth / sumProportionalWidth; // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n\n    if (!skipViewportMeasures) {\n      newColumns.forEach(function (column) {\n        var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          var shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]); // Delay computation until viewport width is available.\n\n\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var minimumWidth = 0;\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var baseColumn = __assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      });\n\n      var newColumn = __assign(__assign({}, baseColumn), _this._columnOverrides[column.key]); // eslint-disable-next-line deprecation/deprecation\n\n\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // eslint-disable-next-line deprecation/deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, props, paddingOnly) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\n\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\nfunction useGroupedDetailsListIndexMap(groups) {\n  return React.useMemo(function () {\n    var indexMap = {};\n\n    if (groups) {\n      var rowCount = 1;\n      var numGroupHeaders = 1;\n\n      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n        var group = groups_1[_i];\n        var key = group.key;\n        indexMap[key] = {\n          numOfGroupHeadersBeforeItem: numGroupHeaders,\n          totalRowCount: rowCount\n        };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n\n    return indexMap;\n  }, [groups]);\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","FocusRects","Async","KeyCodes","elementContains","getRTLSafeKeyCode","classNamesFunction","memoizeFunction","CheckboxVisibility","ColumnActionsMode","ConstrainMode","DetailsListLayoutMode","ColumnDragEndLocation","DetailsHeader","SelectAllVisibility","DetailsRow","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","DragDropHelper","GroupedList","List","withViewport","GetGroupCount","DEFAULT_CELL_STYLE_PROPS","CHECK_CELL_WIDTH","CHECKBOX_WIDTH","SPACER_WIDTH","GROUP_EXPAND_WIDTH","composeRenderFunction","getId","useConst","getClassNames","MIN_COLUMN_WIDTH","DEFAULT_RENDERED_WINDOWS_AHEAD","DEFAULT_RENDERED_WINDOWS_BEHIND","DetailsListInner","props","ariaLabelForSelectAllCheckbox","ariaLabelForSelectionColumn","className","checkboxVisibility","compact","constrainMode","dragDropEvents","groups","groupProps","indentWidth","items","isPlaceholderData","isHeaderVisible","layoutMode","onItemInvoked","onItemContextMenu","onColumnHeaderClick","onColumnHeaderContextMenu","_a","selectionMode","selection","mode","selectionPreservedOnEmptyClick","selectionZoneProps","ariaLabel","ariaLabelForGrid","rowElementEventMap","_b","shouldApplyApplicationRole","getKey","listProps","usePageCache","onShouldVirtualize","viewport","minimumPixelsForDrag","getGroupHeight","styles","theme","_c","cellStyleProps","onRenderCheckbox","useFastIcons","dragDropHelper","adjustedColumns","isCollapsed","isSizing","isSomeGroupExpanded","version","rootRef","listRef","focusZoneRef","columnReorderOptions","groupedListRef","headerRef","onGroupExpandStateChanged","onColumnIsSizingChanged","onRowDidMount","onRowWillUnmount","disableSelectionZone","_d","isSelectedOnFocus","onColumnResized","onColumnAutoResized","onToggleCollapse","onActiveRowChanged","onBlur","eventsToRegister","onRenderMissingItem","onRenderItemColumn","onRenderField","getCellValueKey","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkButtonGroupAriaLabel","checkboxCellClassName","useReducedRowRenderer","enableUpdateAnimations","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","focusZoneProps","defaultRole","role","rowId","groupNestingDepth","getGroupNestingDepth","groupedDetailsListIndexMap","useGroupedDetailsListIndexMap","additionalListProps","useMemo","renderedWindowsAhead","renderedWindowsBehind","selectAllVisibility","none","single","hidden","multiple","isCollapsedGroupSelectVisible","headerProps","undefined","isSelectAllVisible","visible","defaultOnRenderDetailsHeader","useCallback","detailsHeaderProps","__assign","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columns","columnReorderOnDragEnd","onDragEnd","onColumnDragEnd","event","dropLocation","finalDropLocation","outside","header","current","clientRect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","surface","columnReorderProps","rowCount","length","colCount","classNames","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","onRenderFooter","finalOnRenderDetailsGroupFooter","groupFooterProps","defaultRender","onRenderDetailsGroupHeader","onRenderHeader","finalOnRenderDetailsGroupHeader","groupHeaderProps","groupKey","groupIndex","key","totalRowCount","ariaColSpan","ariaPosInSet","ariaSetSize","ariaRowCount","ariaRowIndex","finalGroupProps","selectAllButtonProps","sumColumnWidths","totalWidth","forEach","column","calculatedWidth","minWidth","collapseAllVisibility","rowWidth","onRenderCell","nestingDepth","item","index","group","finalOnRenderRow","onRenderRow","numOfGroupHeadersBeforeItem","rowRole","rowProps","itemIndex","flatIndexOffset","id","onDidMount","onWillUnmount","onRenderDetailsCheckbox","onRenderListCell","isRightArrow","which","focusZoneInnerProps","componentRef","focusZone","direction","vertical","shouldEnterInnerZone","onActiveElementChanged","shouldRaiseClicksOnEnter","list","ref","onHeaderKeyDown","ev","down","focus","getSelectedIndices","setIndexSelected","preventDefault","stopPropagation","onContentKeyDown","up","altKey","root","onKeyDown","headerWrapper","onColumnClick","onColumnContextMenu","isAllCollapsed","onToggleCollapseAll","ariaLabelForListHeader","contentWrapper","selectionClearedOnEscapePress","toggleWithoutModifierPressed","enterModalOnTouch","__extends","_super","_this","createRef","nextProps","previousState","setKey","_selection","isAllGroupsCollapsed","newViewportWidth","width","oldViewportWidth","shouldResetSelection","shouldForceUpdates","nextState","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","setItems","_adjustColumns","_dragDropHelper","dispose","setState","row","itemKey","_getItemKey","_activeRows","_setFocusToRowIfPending","collapsed","_groupedList","toggleCollapseAll","resizingColumn","newWidth","resizingColumnIndex","newCalculatedWidth","Math","max","onColumnResize","_rememberCalculatedWidth","state","columnIndex","count","totalCount","Object","keys","hasOwnProperty","currentRow","measureCell","_onColumnResized","el","onActiveItemChanged","getAttribute","Number","_async","_columnOverrides","lastWidth","_getAdjustedColumns","getDerivedStateFromProps","_getDerivedStateFromProps","onSelectionChanged","DetailsListBase","measureItem","scrollToMode","_list","scrollToIndex","forceIntoFirstElement","_setFocusToRow","getStartItemIndexInView","options","NO_COLUMNS","newColumnIndex","findIndex","isCheckboxColumnHidden","showCheckbox","draggedIndex","targetIndex","frozenColumnCountFromStart","frozenColumnCountFromEnd","isValidTargetIndex","onColumnDrop","dragDropDetails","handleColumnReorder","prevProps","prevState","_notifyColumnsResized","_root","document","activeElement","onDidUpdate","_focusZone","_header","_selectionZone","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","_onRowWillUnmount","_onColumnAutoResized","_onToggleCollapse","_onActiveRowChanged","_onBlur","_onRenderRow","forceUpdate","call","_forceListUpdates","level","groupsInLevel","children","ignoreNextFocus","setTimeout","currentWidth","newProps","viewportWidth","newItems","newColumns","lastSelectionMode","buildColumns","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","skipViewportMeasures","remainingWidth","sumProportionalWidth","col","flexGrow","maxWidth","getPaddedWidth","rowCheckWidth","groupExpandWidth","_getGroupNestingDepth","widthFraction","newColumn","fullWidth","shrinkWidth","map","min","MAX_VALUE","minimumWidth","availableWidth","i","baseColumn","isCollapsible","isCollapsable","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","increment","justified","onHover","Component","canResizeColumns","sortedColumnKey","isSortedDescending","groupedColumnKey","isMultiline","columnActionsMode","firstItem","propName","push","name","fieldName","isSorted","isRowHeader","clickable","isResizable","isGrouped","paddingOnly","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","indexMap","numGroupHeaders","_i"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\DetailsList\\DetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    isSelectedOnFocus = true,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef, isSelectedOnFocus],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? 0 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              isSelectedOnFocus={isSelectedOnFocus}\n              selectionClearedOnEscapePress={isSelectedOnFocus}\n              toggleWithoutModifierPressed={!isSelectedOnFocus}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n"]},"metadata":{},"sourceType":"module"}