{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2\n};\nvar STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\n\nvar REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\nvar _global = {}; // Grab window.\n\ntry {\n  _global = window || {};\n} catch (_a) {\n  /* leave as blank object */\n}\n\nvar _stylesheet;\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\n\n\nvar Stylesheet =\n/** @class */\nfunction () {\n  function Stylesheet(config, serializedStylesheet) {\n    var _a, _b, _c, _d, _e, _f;\n\n    this._rules = [];\n    this._preservedRules = [];\n    this._counter = 0;\n    this._keyToClassName = {};\n    this._onInsertRuleCallbacks = [];\n    this._onResetCallbacks = [];\n    this._classNameToArgs = {};\n    this._config = __assign({\n      // If there is no document we won't have an element to inject into.\n      injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined\n    }, config);\n    this._classNameToArgs = (_a = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a !== void 0 ? _a : this._classNameToArgs;\n    this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;\n    this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;\n    this._preservedRules = (_e = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e !== void 0 ? _e : this._preservedRules;\n    this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;\n  }\n  /**\n   * Gets the singleton instance.\n   */\n\n\n  Stylesheet.getInstance = function () {\n    _stylesheet = _global[STYLESHEET_SETTING];\n\n    if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {\n      var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};\n      var stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);\n      _stylesheet = stylesheet;\n      _global[STYLESHEET_SETTING] = stylesheet;\n    }\n\n    return _stylesheet;\n  };\n  /**\n   * Serializes the Stylesheet instance into a format which allows rehydration on creation.\n   * @returns string representation of `ISerializedStylesheet` interface.\n   */\n\n\n  Stylesheet.prototype.serialize = function () {\n    return JSON.stringify({\n      classNameToArgs: this._classNameToArgs,\n      counter: this._counter,\n      keyToClassName: this._keyToClassName,\n      preservedRules: this._preservedRules,\n      rules: this._rules\n    });\n  };\n  /**\n   * Configures the stylesheet.\n   */\n\n\n  Stylesheet.prototype.setConfig = function (config) {\n    this._config = __assign(__assign({}, this._config), config);\n  };\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   * @returns function which when called un-registers provided callback.\n   */\n\n\n  Stylesheet.prototype.onReset = function (callback) {\n    var _this = this;\n\n    this._onResetCallbacks.push(callback);\n\n    return function () {\n      _this._onResetCallbacks = _this._onResetCallbacks.filter(function (cb) {\n        return cb !== callback;\n      });\n    };\n  };\n  /**\n   * Configures an insert rule callback.\n   *\n   * @param callback - A callback which will be called when a rule is inserted.\n   * @returns function which when called un-registers provided callback.\n   */\n\n\n  Stylesheet.prototype.onInsertRule = function (callback) {\n    var _this = this;\n\n    this._onInsertRuleCallbacks.push(callback);\n\n    return function () {\n      _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function (cb) {\n        return cb !== callback;\n      });\n    };\n  };\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n\n\n  Stylesheet.prototype.getClassName = function (displayName) {\n    var namespace = this._config.namespace;\n    var prefix = displayName || this._config.defaultPrefix;\n    return \"\" + (namespace ? namespace + '-' : '') + prefix + \"-\" + this._counter++;\n  };\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n\n\n  Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args: args,\n      rules: rules\n    };\n  };\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.classNameFromKey = function (key) {\n    return this._keyToClassName[key];\n  };\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n\n\n  Stylesheet.prototype.getClassNameCache = function () {\n    return this._keyToClassName;\n  };\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.argsFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.args;\n  };\n  /**\n   * Gets the rules associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.insertedRulesFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.rules;\n  };\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n\n\n  Stylesheet.prototype.insertRule = function (rule, preserve) {\n    var injectionMode = this._config.injectionMode;\n    var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (injectionMode) {\n        case InjectionMode.insertNode:\n          var sheet = element.sheet;\n\n          try {\n            sheet.insertRule(rule, sheet.cssRules.length);\n          } catch (e) {// The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    } // eslint-disable-next-line deprecation/deprecation\n\n\n    if (this._config.onInsertRule) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._config.onInsertRule(rule);\n    }\n\n    this._onInsertRuleCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  };\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n\n\n  Stylesheet.prototype.getRules = function (includePreservedRules) {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');\n  };\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n\n\n  Stylesheet.prototype.reset = function () {\n    this._rules = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  }; // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n\n\n  Stylesheet.prototype.resetKeys = function () {\n    this._keyToClassName = {};\n  };\n\n  Stylesheet.prototype._getStyleElement = function () {\n    var _this = this;\n\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(function () {\n          _this._styleElement = undefined;\n        });\n      }\n    }\n\n    return this._styleElement;\n  };\n\n  Stylesheet.prototype._createStyleElement = function () {\n    var head = document.head;\n    var styleElement = document.createElement('style');\n    var nodeToInsertBefore = null;\n    styleElement.setAttribute('data-merge-styles', 'true');\n    var cspSettings = this._config.cspSettings;\n\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      nodeToInsertBefore = this._lastStyleElement.nextElementSibling;\n    } else {\n      var placeholderStyleTag = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        nodeToInsertBefore = placeholderStyleTag.nextElementSibling;\n      } else {\n        nodeToInsertBefore = head.childNodes[0];\n      }\n    }\n\n    head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);\n    this._lastStyleElement = styleElement;\n    return styleElement;\n  };\n\n  Stylesheet.prototype._findPlaceholderStyleTag = function () {\n    var head = document.head;\n\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n\n    return null;\n  };\n\n  return Stylesheet;\n}();\n\nexport { Stylesheet };","map":{"version":3,"mappings":"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","names":["InjectionMode","none","insertNode","appendChild","STYLESHEET_SETTING","REUSE_STYLE_NODE","navigator","test","userAgent","_global","window","_stylesheet","config","serializedStylesheet","_config","__assign","injectionMode","document","defaultPrefix","namespace","undefined","cspSettings","_classNameToArgs","classNameToArgs","_a","_counter","counter","_b","_keyToClassName","classNameCache","_c","keyToClassName","_d","_preservedRules","preservedRules","_e","_rules","rules","_f","Stylesheet","_lastStyleElement","ownerDocument","fabricConfig","FabricConfig","stylesheet","mergeStyles","JSON","stringify","callback","_onResetCallbacks","push","_this","filter","_onInsertRuleCallbacks","displayName","prefix","className","key","args","entry","rule","preserve","element","_getStyleElement","sheet","insertRule","cssRules","length","e","createTextNode","onInsertRule","forEach","includePreservedRules","join","_styleElement","_createStyleElement","requestAnimationFrame","head","styleElement","createElement","nodeToInsertBefore","setAttribute","nonce","nextElementSibling","placeholderStyleTag","_findPlaceholderStyleTag","childNodes","insertBefore","contains","querySelector"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\merge-styles\\src\\Stylesheet.ts"],"sourcesContent":["import { IStyle } from './IStyle';\n\nexport const InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0 as 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1 as 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2 as 2,\n};\n\nexport type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\n\n/**\n * CSP settings for the stylesheet\n */\nexport interface ICSPSettings {\n  /**\n   * Nonce to inject into script tag\n   */\n  nonce?: string;\n}\n\n/**\n * Stylesheet config.\n *\n * @public\n */\nexport interface IStyleSheetConfig {\n  /**\n   * Injection mode for how rules are inserted.\n   */\n  injectionMode?: InjectionMode;\n\n  /**\n   * Default 'displayName' to use for a className.\n   * @defaultvalue 'css'\n   */\n  defaultPrefix?: string;\n\n  /**\n   * Defines the default direction of rules for auto-rtlifying things.\n   * While typically this is represented as a DIR attribute in the markup,\n   * the DIR is not enough to control whether padding goes on the left or\n   * right. Use this to set the default direction when rules are registered.\n   */\n  rtl?: boolean;\n\n  /**\n   * Default 'namespace' to attach before the className.\n   */\n  namespace?: string;\n\n  /**\n   * CSP settings\n   */\n  cspSettings?: ICSPSettings;\n\n  /**\n   * Callback executed when a rule is inserted.\n   * @deprecated Use `Stylesheet.onInsertRule` instead.\n   */\n  onInsertRule?: (rule: string) => void;\n\n  /**\n   * Initial value for classnames cache. Key is serialized css rules associated with a classname.\n   */\n  classNameCache?: { [key: string]: string };\n}\n\n/**\n * Representation of Stylesheet used for rehydration.\n */\nexport interface ISerializedStylesheet {\n  classNameToArgs: Stylesheet['_classNameToArgs'];\n  counter: Stylesheet['_counter'];\n  keyToClassName: Stylesheet['_keyToClassName'];\n  preservedRules: Stylesheet['_preservedRules'];\n  rules: Stylesheet['_rules'];\n}\n\nconst STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nconst REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\n\nlet _global: (Window | {}) & {\n  [STYLESHEET_SETTING]?: Stylesheet;\n  FabricConfig?: {\n    mergeStyles?: IStyleSheetConfig;\n    serializedStylesheet?: ISerializedStylesheet;\n  };\n} = {};\n\n// Grab window.\ntry {\n  _global = window || {};\n} catch {\n  /* leave as blank object */\n}\n\nlet _stylesheet: Stylesheet | undefined;\n\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nexport class Stylesheet {\n  private _lastStyleElement?: HTMLStyleElement;\n  private _styleElement?: HTMLStyleElement;\n  private _rules: string[] = [];\n  private _preservedRules: string[] = [];\n  private _config: IStyleSheetConfig;\n  private _counter = 0;\n  private _keyToClassName: { [key: string]: string } = {};\n  private _onInsertRuleCallbacks: Function[] = [];\n  private _onResetCallbacks: Function[] = [];\n  private _classNameToArgs: { [key: string]: { args: any; rules: string[] } } = {};\n\n  /**\n   * Gets the singleton instance.\n   */\n  public static getInstance(): Stylesheet {\n    _stylesheet = _global[STYLESHEET_SETTING] as Stylesheet;\n\n    if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\n      const fabricConfig = _global?.FabricConfig || {};\n\n      const stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);\n      _stylesheet = stylesheet;\n      _global[STYLESHEET_SETTING] = stylesheet;\n    }\n\n    return _stylesheet;\n  }\n\n  constructor(config?: IStyleSheetConfig, serializedStylesheet?: ISerializedStylesheet) {\n    this._config = {\n      // If there is no document we won't have an element to inject into.\n      injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined,\n      ...config,\n    };\n\n    this._classNameToArgs = serializedStylesheet?.classNameToArgs ?? this._classNameToArgs;\n    this._counter = serializedStylesheet?.counter ?? this._counter;\n    this._keyToClassName = this._config.classNameCache ?? serializedStylesheet?.keyToClassName ?? this._keyToClassName;\n    this._preservedRules = serializedStylesheet?.preservedRules ?? this._preservedRules;\n    this._rules = serializedStylesheet?.rules ?? this._rules;\n  }\n\n  /**\n   * Serializes the Stylesheet instance into a format which allows rehydration on creation.\n   * @returns string representation of `ISerializedStylesheet` interface.\n   */\n  public serialize(): string {\n    return JSON.stringify({\n      classNameToArgs: this._classNameToArgs,\n      counter: this._counter,\n      keyToClassName: this._keyToClassName,\n      preservedRules: this._preservedRules,\n      rules: this._rules,\n    });\n  }\n\n  /**\n   * Configures the stylesheet.\n   */\n  public setConfig(config?: IStyleSheetConfig): void {\n    this._config = {\n      ...this._config,\n      ...config,\n    };\n  }\n\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onReset(callback: Function): Function {\n    this._onResetCallbacks.push(callback);\n\n    return () => {\n      this._onResetCallbacks = this._onResetCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Configures an insert rule callback.\n   *\n   * @param callback - A callback which will be called when a rule is inserted.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onInsertRule(callback: Function): Function {\n    this._onInsertRuleCallbacks.push(callback);\n\n    return () => {\n      this._onInsertRuleCallbacks = this._onInsertRuleCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n  public getClassName(displayName?: string): string {\n    const { namespace } = this._config;\n    const prefix = displayName || this._config.defaultPrefix;\n\n    return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\n  }\n\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n  public cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args,\n      rules,\n    };\n  }\n\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n  public classNameFromKey(key: string): string | undefined {\n    return this._keyToClassName[key];\n  }\n\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n  public getClassNameCache(): { [key: string]: string } {\n    return this._keyToClassName;\n  }\n\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public argsFromClassName(className: string): IStyle[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.args;\n  }\n\n  /**\n   * Gets the rules associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public insertedRulesFromClassName(className: string): string[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.rules;\n  }\n\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n  public insertRule(rule: string, preserve?: boolean): void {\n    const { injectionMode } = this._config;\n    const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (injectionMode) {\n        case InjectionMode.insertNode:\n          const { sheet } = element!;\n\n          try {\n            (sheet as CSSStyleSheet).insertRule(rule, (sheet as CSSStyleSheet).cssRules.length);\n          } catch (e) {\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._config.onInsertRule) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._config.onInsertRule(rule);\n    }\n\n    this._onInsertRuleCallbacks.forEach(callback => callback());\n  }\n\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n  public getRules(includePreservedRules?: boolean): string {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');\n  }\n\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n  public reset(): void {\n    this._rules = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(callback => callback());\n  }\n\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n  public resetKeys(): void {\n    this._keyToClassName = {};\n  }\n\n  private _getStyleElement(): HTMLStyleElement | undefined {\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(() => {\n          this._styleElement = undefined;\n        });\n      }\n    }\n    return this._styleElement;\n  }\n\n  private _createStyleElement(): HTMLStyleElement {\n    const head: HTMLHeadElement = document.head;\n    const styleElement = document.createElement('style');\n    let nodeToInsertBefore: Node | null = null;\n\n    styleElement.setAttribute('data-merge-styles', 'true');\n\n    const { cspSettings } = this._config;\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      nodeToInsertBefore = this._lastStyleElement.nextElementSibling;\n    } else {\n      const placeholderStyleTag: Element | null = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        nodeToInsertBefore = placeholderStyleTag.nextElementSibling;\n      } else {\n        nodeToInsertBefore = head.childNodes[0];\n      }\n    }\n\n    head!.insertBefore(styleElement, head!.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);\n    this._lastStyleElement = styleElement;\n\n    return styleElement;\n  }\n\n  private _findPlaceholderStyleTag(): Element | null {\n    const head: HTMLHeadElement = document.head;\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}