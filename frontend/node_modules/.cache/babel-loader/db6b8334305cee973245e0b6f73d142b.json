{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement, getDateFromTimeSelection } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nvar REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nvar REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nvar REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nvar REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\nvar TIME_LOWER_BOUND = 0;\nvar TIME_UPPER_BOUND = 23;\n\nvar getDefaultStrings = function (useHour12, showSeconds) {\n  var hourUnits = useHour12 ? '12-hour' : '24-hour';\n  var timeFormat = \"hh:mm\" + (showSeconds ? ':ss' : '') + (useHour12 ? ' AP' : '');\n  var errorMessageToDisplay = \"Enter a valid time in the \" + hourUnits + \" format: \" + timeFormat;\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay\n  };\n};\n\nexport var TimePicker = function (_a) {\n  var label = _a.label,\n      _b = _a.increments,\n      increments = _b === void 0 ? 30 : _b,\n      _c = _a.showSeconds,\n      showSeconds = _c === void 0 ? false : _c,\n      _d = _a.allowFreeform,\n      allowFreeform = _d === void 0 ? true : _d,\n      _e = _a.useHour12,\n      useHour12 = _e === void 0 ? false : _e,\n      timeRange = _a.timeRange,\n      _f = _a.strings,\n      strings = _f === void 0 ? getDefaultStrings(useHour12, showSeconds) : _f,\n      defaultValue = _a.defaultValue,\n      onChange = _a.onChange,\n      onFormatDate = _a.onFormatDate,\n      onValidateUserInput = _a.onValidateUserInput,\n      rest = __rest(_a, [\"label\", \"increments\", \"showSeconds\", \"allowFreeform\", \"useHour12\", \"timeRange\", \"strings\", \"defaultValue\", \"onChange\", \"onFormatDate\", \"onValidateUserInput\"]);\n\n  var _g = React.useState(''),\n      userText = _g[0],\n      setUserText = _g[1];\n\n  var _h = React.useState(''),\n      errorMessage = _h[0],\n      setErrorMessage = _h[1];\n\n  var optionsCount = getDropdownOptionsCount(increments, timeRange);\n  var initialValue = useConst(defaultValue || new Date());\n  var baseDate = React.useMemo(function () {\n    return generateBaseDate(increments, timeRange, initialValue);\n  }, [increments, timeRange, initialValue]);\n  var timePickerOptions = React.useMemo(function () {\n    var optionsList = Array(optionsCount);\n\n    for (var i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map(function (_, index) {\n      var option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      var optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  var _j = React.useState(timePickerOptions[0].key),\n      selectedKey = _j[0],\n      setSelectedKey = _j[1];\n\n  var onInputChange = React.useCallback(function (event, option, index, value) {\n    var validateUserInput = function (userInput) {\n      var errorMessageToDisplay = '';\n      var regex;\n\n      if (useHour12) {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n      } else {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n      }\n\n      if (!regex.test(userInput)) {\n        errorMessageToDisplay = strings.invalidInputErrorMessage;\n      }\n\n      return errorMessageToDisplay;\n    };\n\n    var key = option === null || option === void 0 ? void 0 : option.key;\n    var updatedUserText = '';\n    var errorMessageToDisplay = '';\n\n    if (value) {\n      if (allowFreeform && !option) {\n        if (!onFormatDate) {\n          // Validate only if user did not add onFormatDate\n          errorMessageToDisplay = validateUserInput(value);\n        } else {\n          // Use user provided validation if onFormatDate is provided\n          if (onValidateUserInput) {\n            errorMessageToDisplay = onValidateUserInput(value);\n          }\n        }\n      }\n\n      updatedUserText = value;\n    } else if (option) {\n      updatedUserText = option.text;\n    }\n\n    if (onChange && !errorMessageToDisplay) {\n      var selectedTime = value || (option === null || option === void 0 ? void 0 : option.text) || '';\n      var date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n      onChange(event, date);\n    }\n\n    setErrorMessage(errorMessageToDisplay);\n    setUserText(updatedUserText);\n    setSelectedKey(key);\n  }, [baseDate, allowFreeform, onChange, onFormatDate, onValidateUserInput, showSeconds, useHour12, strings.invalidInputErrorMessage]);\n\n  var evaluatePressedKey = function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    var charCode = event.charCode;\n\n    if (!onFormatDate && // Only permit input of digits, space, colon, A/P/M characters\n    !(charCode >= KeyCodes.zero && charCode <= KeyCodes.colon || charCode === KeyCodes.space || charCode === KeyCodes.a || charCode === KeyCodes.m || charCode === KeyCodes.p)) {\n      event.preventDefault();\n    }\n  };\n\n  return React.createElement(ComboBox, __assign({}, rest, {\n    allowFreeform: allowFreeform,\n    selectedKey: selectedKey,\n    label: label,\n    errorMessage: errorMessage,\n    options: timePickerOptions,\n    onChange: onInputChange,\n    text: userText,\n    //eslint-disable-next-line\n    onKeyPress: evaluatePressedKey\n  }));\n};\nTimePicker.displayName = 'TimePicker';\n\nvar clampTimeRange = function (timeRange) {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND)\n  };\n};\n\nvar generateBaseDate = function (increments, timeRange, baseDate) {\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(baseDate, increments);\n};\n\nvar getDropdownOptionsCount = function (increments, timeRange) {\n  var hoursInRange = TimeConstants.HoursInOneDay;\n\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n\n  return Math.floor(TimeConstants.MinutesInOneHour * hoursInRange / increments);\n};","map":{"version":3,"mappings":"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","names":["React","useConst","KeyCodes","TimeConstants","addMinutes","formatTimeString","ceilMinuteToIncrement","getDateFromTimeSelection","ComboBox","REGEX_SHOW_SECONDS_HOUR_12","REGEX_HIDE_SECONDS_HOUR_12","REGEX_SHOW_SECONDS_HOUR_24","REGEX_HIDE_SECONDS_HOUR_24","TIME_LOWER_BOUND","TIME_UPPER_BOUND","getDefaultStrings","useHour12","showSeconds","hourUnits","timeFormat","errorMessageToDisplay","invalidInputErrorMessage","TimePicker","_a","_b","increments","_c","_d","allowFreeform","_e","timeRange","_f","strings","defaultValue","onChange","onFormatDate","onValidateUserInput","rest","useState","userText","setUserText","errorMessage","setErrorMessage","optionsCount","getDropdownOptionsCount","initialValue","Date","baseDate","useMemo","timePickerOptions","optionsList","Array","i","map","_","index","option","setSeconds","optionText","key","text","selectedKey","setSelectedKey","onInputChange","useCallback","event","value","validateUserInput","userInput","regex","test","updatedUserText","selectedTime","date","evaluatePressedKey","charCode","zero","colon","space","a","m","p","preventDefault","__assign","label","options","onKeyPress","displayName","clampTimeRange","start","Math","min","max","end","generateBaseDate","clampedTimeRange","setHours","hoursInRange","HoursInOneDay","floor","MinutesInOneHour"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\TimePicker\\TimePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport {\n  TimeConstants,\n  addMinutes,\n  formatTimeString,\n  ceilMinuteToIncrement,\n  getDateFromTimeSelection,\n} from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  const timeFormat = `hh:mm${showSeconds ? ':ss' : ''}${useHour12 ? ' AP' : ''}`;\n  const errorMessageToDisplay = `Enter a valid time in the ${hourUnits} format: ${timeFormat}`;\n\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay,\n  };\n};\n\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  defaultValue,\n  onChange,\n  onFormatDate,\n  onValidateUserInput,\n  ...rest\n}: ITimePickerProps) => {\n  const [userText, setUserText] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const initialValue = useConst(defaultValue || new Date());\n  const baseDate: Date = React.useMemo(() => generateBaseDate(increments, timeRange, initialValue), [\n    increments,\n    timeRange,\n    initialValue,\n  ]);\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map((_, index) => {\n      const option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      const optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText,\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>(timePickerOptions[0].key);\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        }\n        return errorMessageToDisplay;\n      };\n\n      const key = option?.key;\n      let updatedUserText = '';\n      let errorMessageToDisplay = '';\n      if (value) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(value);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(value);\n            }\n          }\n        }\n        updatedUserText = value;\n      } else if (option) {\n        updatedUserText = option.text;\n      }\n\n      if (onChange && !errorMessageToDisplay) {\n        const selectedTime = value || option?.text || '';\n        const date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n        onChange(event, date);\n      }\n\n      setErrorMessage(errorMessageToDisplay);\n      setUserText(updatedUserText);\n      setSelectedKey(key);\n    },\n    [\n      baseDate,\n      allowFreeform,\n      onChange,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      strings.invalidInputErrorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const charCode = event.charCode;\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (charCode >= KeyCodes.zero && charCode <= KeyCodes.colon) ||\n        charCode === KeyCodes.space ||\n        charCode === KeyCodes.a ||\n        charCode === KeyCodes.m ||\n        charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={userText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst generateBaseDate = (increments: number, timeRange: ITimeRange | undefined, baseDate: Date) => {\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(baseDate, increments);\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"]},"metadata":{},"sourceType":"module"}