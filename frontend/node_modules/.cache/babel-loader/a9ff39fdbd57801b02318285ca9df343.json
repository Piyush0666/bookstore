{"ast":null,"code":"/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value) {\n  var parts = [];\n  var partStart = 0;\n  var parens = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n\n      case ')':\n        if (parens) {\n          parens--;\n        }\n\n        break;\n\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n\n          partStart = i + 1;\n        }\n\n        break;\n    }\n  } // Add the last part\n\n\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;AAaA,OAAM,SAAUA,uBAAV,CAAkCC,KAAlC,EAA+C;EACnD,IAAMC,KAAK,GAAG,EAAd;EACA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,MAAM,GAAG,CAAb;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,QAAQJ,KAAK,CAACI,CAAD,CAAb;MACE,KAAK,GAAL;QACED,MAAM;QACN;;MACF,KAAK,GAAL;QACE,IAAIA,MAAJ,EAAY;UACVA,MAAM;QACP;;QACD;;MACF,KAAK,IAAL;MACA,KAAK,GAAL;QACE,IAAI,CAACA,MAAL,EAAa;UACX;UACA,IAAIC,CAAC,GAAGF,SAAR,EAAmB;YACjBD,KAAK,CAACK,IAAN,CAAWN,KAAK,CAACO,SAAN,CAAgBL,SAAhB,EAA2BE,CAA3B,CAAX;UACD;;UACDF,SAAS,GAAGE,CAAC,GAAG,CAAhB;QACD;;QACD;IAlBJ;EAoBD,CA1BkD,CA4BnD;;;EACA,IAAIF,SAAS,GAAGF,KAAK,CAACK,MAAtB,EAA8B;IAC5BJ,KAAK,CAACK,IAAN,CAAWN,KAAK,CAACO,SAAN,CAAgBL,SAAhB,CAAX;EACD;;EAED,OAAOD,KAAP;AACD","names":["tokenizeWithParentheses","value","parts","partStart","parens","i","length","push","substring"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\merge-styles\\src\\tokenizeWithParentheses.ts"],"sourcesContent":["/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value: string): string[] {\n  const parts = [];\n  let partStart = 0;\n  let parens = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}\n"]},"metadata":{},"sourceType":"module"}