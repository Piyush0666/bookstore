{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nvar getClassNames = classNamesFunction({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100\n});\n\nvar IconBase =\n/** @class */\nfunction (_super) {\n  __extends(IconBase, _super);\n\n  function IconBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onImageLoadingStateChange = function (state) {\n      if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {\n        _this.props.imageProps.onLoadingStateChange(state);\n      }\n\n      if (state === ImageLoadState.error) {\n        _this.setState({\n          imageLoadError: true\n        });\n      }\n    };\n\n    _this.state = {\n      imageLoadError: false\n    };\n    return _this;\n  }\n\n  IconBase.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        styles = _a.styles,\n        iconName = _a.iconName,\n        imageErrorAs = _a.imageErrorAs,\n        theme = _a.theme;\n    var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    var isImage = // eslint-disable-next-line deprecation/deprecation\n    !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    var iconContent = getIconContent(iconName) || {};\n    var iconClassName = iconContent.iconClassName,\n        iconContentChildren = iconContent.children,\n        mergeImageProps = iconContent.mergeImageProps;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      iconClassName: iconClassName,\n      isImage: isImage,\n      isPlaceholder: isPlaceholder\n    });\n    var RootType = isImage ? 'span' : 'i';\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['aria-label']);\n    var imageLoadError = this.state.imageLoadError;\n\n    var imageProps = __assign(__assign({}, this.props.imageProps), {\n      onLoadingStateChange: this._onImageLoadingStateChange\n    });\n\n    var ImageType = imageLoadError && imageErrorAs || Image; // eslint-disable-next-line deprecation/deprecation\n\n    var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    var accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    var hasName = !!(accessibleName || this.props['aria-labelledby'] || imageProps['aria-label'] || imageProps['aria-labelledby']);\n    var containerProps = hasName ? {\n      role: isImage || mergeImageProps ? undefined : 'img',\n      'aria-label': isImage || mergeImageProps ? undefined : accessibleName\n    } : {\n      'aria-hidden': true\n    };\n    var finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName\n      });\n    }\n\n    return React.createElement(RootType, __assign({\n      \"data-icon-name\": iconName\n    }, containerProps, nativeProps, mergeImageProps ? {\n      title: undefined,\n      'aria-label': undefined\n    } : {}, {\n      className: classNames.root\n    }), isImage ? React.createElement(ImageType, __assign({}, imageProps)) : children || finalIconContentChildren);\n  };\n\n  return IconBase;\n}(React.Component);\n\nexport { IconBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,cAAT,EAAyBC,qBAAzB,EAAgDC,kBAAhD,QAA0E,iBAA1E;AACA,SAASC,cAAT,QAA+B,YAA/B;AAQA,IAAMC,aAAa,GAAGF,kBAAkB,CAA+B;EACrE;EACA;EACA;EACAG,SAAS,EAAE;AAJ0D,CAA/B,CAAxC;;AAOA;AAAA;AAAA;EAA8BC;;EAC5B,kBAAYC,KAAZ,EAA6B;IAA7B,YACEC,kBAAMD,KAAN,KAAY,IADd;;IA+EQE,mCAA6B,UAACC,KAAD,EAAsB;MACzD,IAAID,KAAI,CAACF,KAAL,CAAWI,UAAX,IAAyBF,KAAI,CAACF,KAAL,CAAWI,UAAX,CAAsBC,oBAAnD,EAAyE;QACvEH,KAAI,CAACF,KAAL,CAAWI,UAAX,CAAsBC,oBAAtB,CAA2CF,KAA3C;MACD;;MACD,IAAIA,KAAK,KAAKX,cAAc,CAACc,KAA7B,EAAoC;QAClCJ,KAAI,CAACK,QAAL,CAAc;UAAEC,cAAc,EAAE;QAAlB,CAAd;MACD;IACF,CAPO;;IA7ENN,KAAI,CAACC,KAAL,GAAa;MACXK,cAAc,EAAE;IADL,CAAb;;EAGD;;EAEMC,4BAAP;IACQ,SAAiE,KAAKT,KAAtE;IAAA,IAAEU,QAAQ,cAAV;IAAA,IAAYC,SAAS,eAArB;IAAA,IAAuBC,MAAM,YAA7B;IAAA,IAA+BC,QAAQ,cAAvC;IAAA,IAAyCC,YAAY,kBAArD;IAAA,IAAuDC,KAAK,WAA5D;IACN,IAAMC,aAAa,GAAG,OAAOH,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACI,MAAT,KAAoB,CAA1E;IACA,IAAMC,OAAO,GACX;IACA,CAAC,CAAC,KAAKlB,KAAL,CAAWI,UAAb,IAA2B,KAAKJ,KAAL,CAAWmB,QAAX,KAAwB7B,QAAQ,CAAC8B,KAA5D,IAAqE,KAAKpB,KAAL,CAAWmB,QAAX,KAAwB7B,QAAQ,CAACC,KAFxG;IAGA,IAAM8B,WAAW,GAAGzB,cAAc,CAACiB,QAAD,CAAd,IAA4B,EAAhD;IACQ,iBAAa,GAAqDQ,WAAW,cAA7E;IAAA,IAAyBC,mBAAmB,GAAsBD,WAAW,SAA7E;IAAA,IAA8CE,eAAe,GAAKF,WAAW,gBAA7E;IAER,IAAMG,UAAU,GAAG3B,aAAa,CAACe,MAAD,EAAS;MACvCG,KAAK,EAAEA,KADgC;MAEvCJ,SAAS,WAF8B;MAGvCc,aAAa,eAH0B;MAIvCP,OAAO,SAJgC;MAKvCF,aAAa;IAL0B,CAAT,CAAhC;IAQA,IAAMU,QAAQ,GAAGR,OAAO,GAAG,MAAH,GAAY,GAApC;IACA,IAAMS,WAAW,GAAGlC,cAAc,CAAuC,KAAKO,KAA5C,EAAmDN,qBAAnD,EAA0E,CAC1G,YAD0G,CAA1E,CAAlC;IAGQ,kBAAc,GAAK,KAAKS,KAAL,CAAUK,cAA7B;;IACR,IAAMJ,UAAU,yBACX,KAAKJ,KAAL,CAAWI,UADA,GACU;MACxBC,oBAAoB,EAAE,KAAKuB;IADH,CADV,CAAhB;;IAIA,IAAMC,SAAS,GAAIrB,cAAc,IAAIM,YAAnB,IAAoCvB,KAAtD,CA1BF,CA4BE;;IACA,IAAMuC,SAAS,GAAG,KAAK9B,KAAL,CAAW,YAAX,KAA4B,KAAKA,KAAL,CAAW8B,SAAzD;IACA,IAAMC,cAAc,GAAG3B,UAAU,CAAC4B,GAAX,IAAkBF,SAAlB,IAA+B,KAAK9B,KAAL,CAAWiC,KAAjE;IACA,IAAMC,OAAO,GAAG,CAAC,EACfH,cAAc,IACd,KAAK/B,KAAL,CAAW,iBAAX,CADA,IAEAI,UAAU,CAAC,YAAD,CAFV,IAGAA,UAAU,CAAC,iBAAD,CAJK,CAAjB;IAMA,IAAM+B,cAAc,GAAGD,OAAO,GAC1B;MACEE,IAAI,EAAElB,OAAO,IAAIK,eAAX,GAA6Bc,SAA7B,GAAyC,KADjD;MAEE,cAAcnB,OAAO,IAAIK,eAAX,GAA6Bc,SAA7B,GAAyCN;IAFzD,CAD0B,GAK1B;MACE,eAAe;IADjB,CALJ;IASA,IAAIO,wBAAwB,GAAGhB,mBAA/B;;IAEA,IAAIC,eAAe,IAAID,mBAAnB,IAA0C,OAAOA,mBAAP,KAA+B,QAAzE,IAAqFS,cAAzF,EAAyG;MACvGO,wBAAwB,GAAGjD,KAAK,CAACkD,YAAN,CAAmBjB,mBAAnB,EAAwC;QACjEU,GAAG,EAAED;MAD4D,CAAxC,CAA3B;IAGD;;IAED,OACE1C,oBAACqC,QAAD,EAASc;MAAA,kBACS3B;IADT,GAEHsB,cAFG,EAGHR,WAHG,EAIFJ,eAAe,GAChB;MACEU,KAAK,EAAEI,SADT;MAEE,cAAcA;IAFhB,CADgB,GAKhB,EATG,EASA;MACP1B,SAAS,EAAEa,UAAU,CAACiB;IADf,CATA,CAAT,EAYGvB,OAAO,GAAG7B,oBAACwC,SAAD,EAAUW,aAAKpC,UAAL,CAAV,CAAH,GAAmCM,QAAQ,IAAI4B,wBAZzD,CADF;EAgBD,CAtEM;;EAgFT;AAAC,CAxFD,CAA8BjD,KAAK,CAACqD,SAApC","names":["React","IconType","Image","ImageLoadState","getNativeProps","htmlElementProperties","classNamesFunction","getIconContent","getClassNames","cacheSize","__extends","props","_super","_this","state","imageProps","onLoadingStateChange","error","setState","imageLoadError","IconBase","children","className","styles","iconName","imageErrorAs","theme","isPlaceholder","length","isImage","iconType","image","iconContent","iconContentChildren","mergeImageProps","classNames","iconClassName","RootType","nativeProps","_onImageLoadingStateChange","ImageType","ariaLabel","accessibleName","alt","title","hasName","containerProps","role","undefined","finalIconContentChildren","cloneElement","__assign","root","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Icon\\Icon.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\nimport type { IImageProps } from '../Image/Image.types';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren, mergeImageProps } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    const hasName = !!(\n      accessibleName ||\n      this.props['aria-labelledby'] ||\n      imageProps['aria-label'] ||\n      imageProps['aria-labelledby']\n    );\n    const containerProps = hasName\n      ? {\n          role: isImage || mergeImageProps ? undefined : 'img',\n          'aria-label': isImage || mergeImageProps ? undefined : accessibleName,\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n    let finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName,\n      });\n    }\n\n    return (\n      <RootType\n        data-icon-name={iconName}\n        {...containerProps}\n        {...nativeProps}\n        {...(mergeImageProps\n          ? {\n              title: undefined,\n              'aria-label': undefined,\n            }\n          : {})}\n        className={classNames.root}\n      >\n        {isImage ? <ImageType {...imageProps} /> : children || finalIconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}