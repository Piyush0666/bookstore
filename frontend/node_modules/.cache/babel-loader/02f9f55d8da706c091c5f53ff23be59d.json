{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nexport { createTheme } from '@fluentui/theme';\n\nvar _theme = createTheme({});\n\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n  var _a;\n\n  var _b, _c; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  var win = getWindow();\n\n  if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    } // Set the default theme.\n\n\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function getTheme(depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n\n  return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\n\nexport function registerOnThemeChangeCallback(callback) {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\n\nexport function removeOnThemeChangeCallback(callback) {\n  var i = _onThemeChangeCallbacks.indexOf(callback);\n\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function loadTheme(theme, depComments) {\n  var _a;\n\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  _theme = createTheme(theme, depComments); // Invoke the legacy method of theming the page as well.\n\n  legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n  Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n\n  _onThemeChangeCallbacks.forEach(function (callback) {\n    try {\n      callback(_theme);\n    } catch (e) {// don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\n\nfunction _loadFonts(theme) {\n  var lines = {};\n\n  for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n    var fontName = _a[_i];\n    var font = theme.fonts[fontName];\n\n    for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n      var propName = _c[_b];\n      var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      var value = font[propName];\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n\n      lines[name_1] = value;\n    }\n  }\n\n  return lines;\n}","map":{"version":3,"mappings":";AAAA,SAASA,cAAT,EAAyBC,SAAzB,QAA0C,qBAA1C;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,+BAA7C;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAIA,SAASA,WAAT,QAA4B,iBAA5B;;AAEA,IAAIC,MAAM,GAAWD,WAAW,CAAC,EAAD,CAAhC;;AACA,IAAIE,uBAAuB,GAAmC,EAA9D;AAEA,OAAO,IAAMC,gBAAgB,GAAG,OAAzB;AAEP,OAAM,SAAUC,+BAAV,GAAyC;;;aAAA,CAC7C;;;EACA,IAAMC,GAAG,GAAQR,SAAS,EAA1B;;EAEA,IAAI,SAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAES,YAAL,MAAiB,IAAjB,IAAiBC,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEC,WAAvB,EAAoC;IAClC;IACAV,SAAS,CAACO,GAAG,CAACC,YAAJ,CAAiBE,WAAlB,CAAT;EACD,CAHD,MAGO,IAAI,CAACZ,cAAc,CAACa,WAAf,CAA2B,CAACN,gBAAD,CAA3B,EAA+CO,KAApD,EAA2D;IAChE,IAAI,SAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEJ,YAAL,MAAiB,IAAjB,IAAiBK,aAAjB,GAAiB,MAAjB,GAAiBA,GAAED,KAAvB,EAA8B;MAC5BT,MAAM,GAAGD,WAAW,CAACK,GAAG,CAACC,YAAJ,CAAiBI,KAAlB,CAApB;IACD,CAH+D,CAKhE;;;IACAd,cAAc,CAACgB,aAAf,EAA4BC,SAAGA,GAACV,gBAAD,IAAoBF,MAAvB,EAA6BY,EAAzD;EACD;AACF;AAEDT,+BAA+B;AAE/B;;;;;AAIA,OAAM,SAAUU,QAAV,CAAmBC,WAAnB,EAA+C;EAA5B;IAAAA;EAA4B;;EACnD,IAAIA,WAAW,KAAK,IAApB,EAA0B;IACxBd,MAAM,GAAGD,WAAW,CAAC,EAAD,EAAKe,WAAL,CAApB;EACD;;EACD,OAAOd,MAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUe,6BAAV,CAAwCC,QAAxC,EAAyE;EAC7E,IAAIf,uBAAuB,CAACgB,OAAxB,CAAgCD,QAAhC,MAA8C,CAAC,CAAnD,EAAsD;IACpDf,uBAAuB,CAACiB,IAAxB,CAA6BF,QAA7B;EACD;AACF;AAED;;;;;AAIA,OAAM,SAAUG,2BAAV,CAAsCH,QAAtC,EAAuE;EAC3E,IAAMI,CAAC,GAAGnB,uBAAuB,CAACgB,OAAxB,CAAgCD,QAAhC,CAAV;;EACA,IAAII,CAAC,KAAK,CAAC,CAAX,EAAc;IACZ;EACD;;EAEDnB,uBAAuB,CAACoB,MAAxB,CAA+BD,CAA/B,EAAkC,CAAlC;AACD;AAED;;;;;;AAKA,OAAM,SAAUvB,SAAV,CAAoBY,KAApB,EAA0CK,WAA1C,EAAsE;;;EAA5B;IAAAA;EAA4B;;EAC1Ed,MAAM,GAAGD,WAAW,CAACU,KAAD,EAAQK,WAAR,CAApB,CAD0E,CAG1E;;EACAhB,eAAe,yCAAME,MAAM,CAACsB,OAAb,GAAyBtB,MAAM,CAACuB,cAAhC,GAAmDvB,MAAM,CAACwB,OAA1D,GAAsEC,UAAU,CAACzB,MAAD,CAAhF,EAAf;EAEAL,cAAc,CAACgB,aAAf,EAA4BC,SAAGA,GAACV,gBAAD,IAAoBF,MAAvB,EAA6BY,EAAzD;;EAEAX,uBAAuB,CAACyB,OAAxB,CAAgC,UAACV,QAAD,EAAkC;IAChE,IAAI;MACFA,QAAQ,CAAChB,MAAD,CAAR;IACD,CAFD,CAEE,OAAO2B,CAAP,EAAU,CACV;IACD;EACF,CAND;;EAQA,OAAO3B,MAAP;AACD;AAED;;;;;AAIA,SAASyB,UAAT,CAAoBhB,KAApB,EAAiC;EAC/B,IAAMmB,KAAK,GAA8B,EAAzC;;EAEA,KAAuB,uBAAM,CAACC,IAAP,CAAYpB,KAAK,CAACqB,KAAlB,CAAvB,EAAuBC,cAAvB,EAAuBA,IAAvB,EAAiD;IAA5C,IAAMC,QAAQ,SAAd;IACH,IAAMC,IAAI,GAAcxB,KAAK,CAACqB,KAAN,CAAYE,QAAZ,CAAxB;;IAEA,KAAuB,uBAAM,CAACH,IAAP,CAAYI,IAAZ,CAAvB,EAAuB3B,cAAvB,EAAuBA,IAAvB,EAA0C;MAArC,IAAM4B,QAAQ,SAAd;MACH,IAAMC,MAAI,GAAWH,QAAQ,GAAGE,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAX,GAA8CH,QAAQ,CAACI,KAAT,CAAe,CAAf,CAAnE;MACA,IAAIC,KAAK,GAAGN,IAAI,CAACC,QAAD,CAAhB;;MAEA,IAAIA,QAAQ,KAAK,UAAb,IAA2B,OAAOK,KAAP,KAAiB,QAAhD,EAA0D;QACxD;QACAA,KAAK,GAAGA,KAAK,GAAG,IAAhB;MACD;;MACDX,KAAK,CAACO,MAAD,CAAL,GAAcI,KAAd;IACD;EACF;;EACD,OAAOX,KAAP;AACD","names":["Customizations","getWindow","loadTheme","legacyLoadTheme","createTheme","_theme","_onThemeChangeCallbacks","ThemeSettingName","initializeThemeInCustomizations","win","FabricConfig","_b","legacyTheme","getSettings","theme","_c","applySettings","_a","getTheme","depComments","registerOnThemeChangeCallback","callback","indexOf","push","removeOnThemeChangeCallback","i","splice","palette","semanticColors","effects","_loadFonts","forEach","e","lines","keys","fonts","_i","fontName","font","propName","name_1","charAt","toUpperCase","slice","value"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\style-utilities\\lib\\src\\styles\\theme.ts"],"sourcesContent":["import { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nimport type { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport type { IRawStyle } from '@fluentui/merge-styles';\n\nexport { createTheme } from '@fluentui/theme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const win: any = getWindow();\n\n  if (win?.FabricConfig?.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"]},"metadata":{},"sourceType":"module"}