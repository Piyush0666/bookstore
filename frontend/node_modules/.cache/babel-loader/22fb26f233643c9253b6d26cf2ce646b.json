{"ast":null,"code":"var _a;\n\nimport { __assign } from \"tslib\";\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL } from '../../Utilities';\nimport { RectangleEdge } from './positioning.types';\nimport { Rectangle } from '../../Utilities';\n\nfunction _createPositionData(targetEdge, alignmentEdge, isAuto) {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto\n  };\n} // Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\n\n\nvar DirectionalDictionary = (_a = {}, _a[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, undefined, true), _a[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, undefined, true), _a[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a);\n\nfunction _isRectangleWithinBounds(rect, boundingRect) {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\n\n\nfunction _getOutOfBoundsEdges(rect, boundingRect) {\n  var outOfBounds = [];\n\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n\n  return outOfBounds;\n}\n\nfunction _getEdgeValue(rect, edge) {\n  return rect[RectangleEdge[edge]];\n}\n\nfunction _setEdgeValue(rect, edge, value) {\n  rect[RectangleEdge[edge]] = value;\n  return rect;\n}\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n */\n\n\nfunction _getCenterValue(rect, edge) {\n  var edges = _getFlankingEdges(edge);\n\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reserved in certain cases for the\n * \"negative\" edges.\n *\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n */\n\n\nfunction _getRelativeEdgeValue(edge, value) {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\n\nfunction _getRelativeRectEdgeValue(edge, rect) {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\n\nfunction _getRelativeEdgeDifference(rect, hostRect, edge) {\n  var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n * if maintainSize is set to false, it will only adjust the specified edge value\n */\n\n\nfunction _moveEdge(rect, edge, newValue, maintainSize) {\n  if (maintainSize === void 0) {\n    maintainSize = true;\n  }\n\n  var difference = _getEdgeValue(rect, edge) - newValue;\n\n  var returnRect = _setEdgeValue(rect, edge, newValue);\n\n  if (maintainSize) {\n    returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  }\n\n  return returnRect;\n}\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n */\n\n\nfunction _alignEdges(rect, target, edge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n */\n\n\nfunction _alignOppositeEdges(rect, target, targetEdge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var oppositeEdge = targetEdge * -1;\n\n  var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n */\n\n\nfunction _isEdgeInBounds(rect, bounds, edge) {\n  var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n/**\n * Returns a measure of how much a rectangle is out of bounds for a given alignment;\n * this can be used to compare which rectangle is more or less out of bounds.\n * A value of 0 means the rectangle is entirely in bounds\n */\n\n\nfunction _getOutOfBoundsDegree(rect, bounds) {\n  var breakingEdges = _getOutOfBoundsEdges(rect, bounds);\n\n  var total = 0;\n\n  for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {\n    var edge = breakingEdges_1[_i];\n    total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);\n  }\n\n  return total;\n}\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the least bad option should be returned.\n */\n\n\nfunction _flipToFit(rect, target, bounding, positionData, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var directions = [RectangleEdge.left, RectangleEdge.right, RectangleEdge.bottom, RectangleEdge.top]; // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.\n\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n\n  var currentEstimate = rect;\n  var currentEdge = positionData.targetEdge;\n  var currentAlignment = positionData.alignmentEdge; // keep track of least bad option, in case no sides fit\n\n  var oobDegree;\n  var bestEdge = currentEdge;\n  var bestAlignment = currentAlignment; // Keep switching sides until one is found with enough space.\n  // If all sides don't fit then return the unmodified element.\n\n  for (var i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      // update least-bad edges\n      var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);\n\n      if (!oobDegree || currentOOBDegree < oobDegree) {\n        oobDegree = currentOOBDegree;\n        bestEdge = currentEdge;\n        bestAlignment = currentAlignment;\n      }\n\n      directions.splice(directions.indexOf(currentEdge), 1);\n\n      if (directions.length > 0) {\n        if (directions.indexOf(currentEdge * -1) > -1) {\n          currentEdge = currentEdge * -1;\n        } else {\n          currentAlignment = currentEdge;\n          currentEdge = directions.slice(-1)[0];\n        }\n\n        currentEstimate = _estimatePosition(rect, target, {\n          targetEdge: currentEdge,\n          alignmentEdge: currentAlignment\n        }, gap);\n      }\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment\n      };\n    }\n  } // nothing fits, use least-bad option\n\n\n  currentEstimate = _estimatePosition(rect, target, {\n    targetEdge: bestEdge,\n    alignmentEdge: bestAlignment\n  }, gap);\n  return {\n    elementRectangle: currentEstimate,\n    targetEdge: bestEdge,\n    alignmentEdge: bestAlignment\n  };\n}\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges\n * into position, when `alignTargetEdge` is specified.\n */\n\n\nfunction _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {\n  var alignmentEdge = elementEstimate.alignmentEdge,\n      targetEdge = elementEstimate.targetEdge,\n      elementRectangle = elementEstimate.elementRectangle;\n  var oppositeEdge = alignmentEdge * -1;\n\n  var newEstimate = _estimatePosition(elementRectangle, target, {\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  }, gap, coverTarget);\n\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  };\n}\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n */\n\n\nfunction _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var alignmentEdge = positionData.alignmentEdge,\n      alignTargetEdge = positionData.alignTargetEdge;\n  var elementEstimate = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge\n  };\n\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n\n  var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding); // if directionalHintFixed is specified, we need to force the target edge to not change\n  // we need *-1 because targetEdge refers to the target's edge; the callout edge is the opposite\n\n\n  var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : undefined;\n\n  if (outOfBounds.length > 0) {\n    if (alignTargetEdge) {\n      // The edge opposite to the alignment edge might be out of bounds.\n      // Flip alignment to see if we can get it within bounds.\n      if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n        var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n\n        if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n          return flippedElementEstimate;\n        } else {\n          // If the flipped elements edges are still out of bounds, try nudging it.\n          elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);\n        }\n      } else {\n        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);\n      }\n    } else {\n      elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);\n    }\n  }\n\n  return elementEstimate;\n}\n/**\n * Iterates through a list of out of bounds edges and tries to nudge and align them.\n * @param outOfBoundsEdges - Array of edges that are out of bounds\n * @param elementEstimate - The current element positioning estimate\n * @param bounding - The current bounds\n * @param preserveEdge - Specify an edge that should not be modified\n */\n\n\nfunction _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {\n  for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {\n    var direction = outOfBoundsEdges_1[_i];\n    var edgeAttempt = void 0; // if preserveEdge is specified, do not call _alignEdges, skip directly to _moveEdge\n    // this is because _alignEdges will move the opposite edge\n\n    if (preserveEdge && preserveEdge === direction * -1) {\n      edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);\n      elementEstimate.forcedInBounds = true;\n    } else {\n      edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n\n      var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1); // only update estimate if the attempt didn't break out of the opposite bounding edge\n\n\n      if (!inBounds) {\n        edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);\n        elementEstimate.forcedInBounds = true;\n      }\n    }\n\n    elementEstimate.elementRectangle = edgeAttempt;\n  }\n\n  return elementEstimate;\n}\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n */\n\n\nfunction _centerEdgeToPoint(rect, edge, point) {\n  var positiveEdge = _getFlankingEdges(edge).positiveEdge;\n\n  var elementMiddle = _getCenterValue(rect, edge);\n\n  var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n */\n\n\nfunction _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n\n  var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);\n  var alignmentEdge = positionData.alignmentEdge,\n      targetEdge = positionData.targetEdge;\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget ? _alignEdges(estimatedElementPosition, target, targetEdge, gap) : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap); // if no alignment edge is provided it's supposed to be centered.\n\n  if (!alignmentEdge) {\n    var targetMiddlePoint = _getCenterValue(target, targetEdge);\n\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n\n  return estimatedElementPosition;\n}\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n */\n\n\nfunction _getFlankingEdges(edge) {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom\n    };\n  }\n}\n/**\n * Retrieve the final value for the return edge of `elementRectangle`. If the `elementRectangle` is closer to one side\n * of the bounds versus the other, the return edge is flipped to grow inward.\n */\n\n\nfunction _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {\n  if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {\n    return returnEdge * -1;\n  }\n\n  return returnEdge;\n}\n/**\n * Whether or not the considered edge of the elementRectangle is lying on the edge of the bounds\n * @param elementRectangle The rectangle whose edge we are considering\n * @param bounds The rectangle marking the bounds\n * @param edge The target edge we're considering\n * @returns If the target edge of the elementRectangle is in the same location as that edge of the bounds\n */\n\n\nfunction _isEdgeOnBounds(elementRectangle, edge, bounds) {\n  return bounds !== undefined && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);\n}\n/**\n * Finalizes the element position based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the Callout shrinks it shrinks towards that corner.\n */\n\n\nfunction _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge, forceWithinBounds) {\n  var returnValue = {};\n\n  var hostRect = _getRectangleFromElement(hostElement);\n\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge; // If we are finalizing the return edge, choose the edge such that we grow away from the bounds\n  // If we are not finalizing the return edge but the opposite edge is flush against the bounds,\n  // choose that as the anchor edge so the element rect can grow away from the bounds' edge\n  // In this case there will not be a visual difference because there is no more room for the elementRectangle to grow\n  // in the usual direction\n\n  if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {\n    returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);\n  }\n\n  returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge); // if the positioned element will still overflow, return all four edges with in-bounds values\n\n  if (forceWithinBounds) {\n    returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);\n    returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);\n  }\n\n  return returnValue;\n} // Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\n\n\nfunction _calculateActualBeakWidthInPixels(beakWidth) {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be\n * flipped (e.g. bottomLeftEdge would become bottomRightEdge).\n *\n * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.\n */\n\n\nfunction _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {\n  if (directionalHint === void 0) {\n    directionalHint = DirectionalHint.bottomAutoEdge;\n  }\n\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge\n    };\n  }\n\n  var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);\n\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n\n  return positionInformation;\n}\n/**\n * Gets the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n */\n\n\nfunction _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\n\nfunction getClosestEdge(targetEdge, target, boundingRect) {\n  var targetCenter = _getCenterValue(target, targetEdge);\n\n  var boundingCenter = _getCenterValue(boundingRect, targetEdge);\n\n  var _a = _getFlankingEdges(targetEdge),\n      positiveEdge = _a.positiveEdge,\n      negativeEdge = _a.negativeEdge;\n\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\n\nfunction _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);\n\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge\n    };\n  } else {\n    return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);\n  }\n}\n\nfunction _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {\n  var targetEdge = elementPosition.targetEdge * -1; // The \"host\" element that we will use to help position the beak.\n\n  var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);\n  var returnValue = {};\n\n  var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds); // only show the beak if the callout is not fully covering the target\n\n\n  var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);\n\n  var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n  return {\n    elementPosition: __assign({}, returnValue),\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge,\n    hideBeak: !showBeak\n  };\n}\n\nfunction _positionBeak(beakWidth, elementPosition) {\n  var target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   */\n\n  var _a = _getFlankingEdges(elementPosition.targetEdge),\n      positiveEdge = _a.positiveEdge,\n      negativeEdge = _a.negativeEdge;\n\n  var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n\n  var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);\n  var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n  beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));\n\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n\n  return beakPosition;\n}\n\nfunction _getRectangleFromElement(element) {\n  var clientRect = element.getBoundingClientRect();\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\n\nfunction _getRectangleFromIRect(rect) {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\n\nfunction _getTargetRect(bounds, target) {\n  var targetRectangle;\n\n  if (target) {\n    // eslint-disable-next-line no-extra-boolean-cast\n    if (!!target.preventDefault) {\n      var ev = target;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY); // eslint-disable-next-line no-extra-boolean-cast\n    } else if (!!target.getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target); // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      var rectOrPoint = target; // eslint-disable-next-line deprecation/deprecation\n\n      var left = rectOrPoint.left || rectOrPoint.x; // eslint-disable-next-line deprecation/deprecation\n\n      var top_1 = rectOrPoint.top || rectOrPoint.y;\n      var right = rectOrPoint.right || left;\n      var bottom = rectOrPoint.bottom || top_1;\n      targetRectangle = new Rectangle(left, right, top_1, bottom);\n    }\n\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);\n\n      for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {\n        var direction = outOfBounds_1[_i];\n        targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n\n  return targetRectangle;\n}\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\n\n\nfunction _getMaxHeightFromTargetRectangle(targetRectangle, targetEdge, gapSpace, bounds, coverTarget) {\n  var maxHeight = 0;\n  var directionalHint = DirectionalDictionary[targetEdge]; // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n\n  var target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\n\nfunction _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {\n  var gap = props.gapSpace ? props.gapSpace : 0;\n\n  var targetRect = _getTargetRect(boundingRect, props.target);\n\n  var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);\n\n  var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);\n\n  return __assign(__assign({}, positionedElement), {\n    targetRectangle: targetRect\n  });\n}\n\nfunction _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {\n  var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);\n\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge\n  };\n}\n\nfunction _positionElement(props, hostElement, elementToPosition, previousPositions) {\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  var positionedElement = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);\n\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\n\nfunction _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {\n  var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  var positionProps = props;\n  positionProps.gapSpace = gap;\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);\n\n  var beakPositioned = _positionBeak(beakWidth, positionedElement);\n\n  var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);\n\n  return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), {\n    beakPosition: finalizedBeakPosition\n  });\n}\n\nfunction _positionCard(props, hostElement, callout, previousPositions) {\n  return _positionCallout(props, hostElement, callout, previousPositions, true);\n} // END PRIVATE FUNCTIONS\n\n\nexport var __positioningTestPackage = {\n  _finalizePositionData: _finalizePositionData,\n  _finalizeBeakPosition: _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels: _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds: _positionElementWithinBounds,\n  _positionBeak: _positionBeak,\n  _getPositionData: _getPositionData,\n  _getMaxHeightFromTargetRectangle: _getMaxHeightFromTargetRectangle\n};\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\n * repositions based on its previous targets rather than starting with directionalhint.\n */\n\nexport function positionElement(props, hostElement, elementToPosition, previousPositions) {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\nexport function positionCallout(props, hostElement, elementToPosition, previousPositions) {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\nexport function positionCard(props, hostElement, elementToPosition, previousPositions) {\n  return _positionCard(props, hostElement, elementToPosition, previousPositions);\n}\n/**\n * Gets the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\n\nexport function getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget) {\n  if (gapSpace === void 0) {\n    gapSpace = 0;\n  }\n\n  var mouseTarget = target;\n  var elementTarget = target;\n  var rectOrPointTarget = target;\n  var targetRect;\n  var boundingRectangle = bounds ? _getRectangleFromIRect(bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight); // eslint-disable-next-line deprecation/deprecation\n\n  var left = rectOrPointTarget.left || rectOrPointTarget.x; // eslint-disable-next-line deprecation/deprecation\n\n  var top = rectOrPointTarget.top || rectOrPointTarget.y;\n  var right = rectOrPointTarget.right || left;\n  var bottom = rectOrPointTarget.bottom || top; // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent\n\n  if (!!mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (left !== undefined && top !== undefined) {\n    targetRect = new Rectangle(left, right, top, bottom);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\n\nexport function getOppositeEdge(edge) {\n  return edge * -1;\n}\n\nfunction _getBoundsFromTargetWindow(target, targetWindow) {\n  var segments = undefined;\n\n  if (targetWindow.getWindowSegments) {\n    segments = targetWindow.getWindowSegments();\n  } // Identify if we're dealing with single screen scenarios.\n\n\n  if (segments === undefined || segments.length <= 1) {\n    return {\n      top: 0,\n      left: 0,\n      right: targetWindow.innerWidth,\n      bottom: targetWindow.innerHeight,\n      width: targetWindow.innerWidth,\n      height: targetWindow.innerHeight\n    };\n  } // Logic for determining dual screen scenarios.\n\n\n  var x = 0;\n  var y = 0; // If the target is an Element get coordinates for its center.\n\n  if (target !== null && !!target.getBoundingClientRect) {\n    var clientRect = target.getBoundingClientRect();\n    x = (clientRect.left + clientRect.right) / 2;\n    y = (clientRect.top + clientRect.bottom) / 2;\n  } // If the target is not null get x-axis and y-axis coordinates directly.\n  else if (target !== null) {\n    // eslint-disable-next-line deprecation/deprecation\n    x = target.left || target.x; // eslint-disable-next-line deprecation/deprecation\n\n    y = target.top || target.y;\n  }\n\n  var bounds = {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0\n  }; // Define which window segment are the coordinates in and calculate bounds based on that.\n\n  for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {\n    var segment = segments_1[_i];\n\n    if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {\n      bounds = {\n        top: segment.top,\n        left: segment.left,\n        right: segment.right,\n        bottom: segment.bottom,\n        width: segment.width,\n        height: segment.height\n      };\n    }\n  }\n\n  return bounds;\n}\n\nexport function getBoundsFromTargetWindow(target, targetWindow) {\n  return _getBoundsFromTargetWindow(target, targetWindow);\n}","map":{"version":3,"mappings":"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","names":["DirectionalHint","getScrollbarWidth","getRTL","RectangleEdge","Rectangle","_createPositionData","targetEdge","alignmentEdge","isAuto","DirectionalDictionary","_a","topLeftEdge","top","left","topCenter","topRightEdge","right","topAutoEdge","undefined","bottomLeftEdge","bottom","bottomCenter","bottomRightEdge","bottomAutoEdge","leftTopEdge","leftCenter","leftBottomEdge","rightTopEdge","rightCenter","rightBottomEdge","_isRectangleWithinBounds","rect","boundingRect","_getOutOfBoundsEdges","outOfBounds","push","_getEdgeValue","edge","_setEdgeValue","value","_getCenterValue","edges","_getFlankingEdges","positiveEdge","negativeEdge","_getRelativeEdgeValue","_getRelativeRectEdgeValue","_getRelativeEdgeDifference","hostRect","edgeDifference","_moveEdge","newValue","maintainSize","difference","returnRect","_alignEdges","target","gap","_alignOppositeEdges","oppositeEdge","adjustedGap","_isEdgeInBounds","bounds","adjustedRectValue","_getOutOfBoundsDegree","breakingEdges","total","_i","Math","_flipToFit","bounding","positionData","directions","currentEstimate","currentEdge","currentAlignment","oobDegree","bestEdge","bestAlignment","i","currentOOBDegree","splice","indexOf","length","slice","_estimatePosition","elementRectangle","_flipAlignmentEdge","elementEstimate","coverTarget","newEstimate","_adjustFitWithinBounds","element","directionalHintFixed","alignTargetEdge","fixedEdge","flippedElementEstimate","_alignOutOfBoundsEdges","outOfBoundsEdges","preserveEdge","direction","edgeAttempt","forcedInBounds","inBounds","_centerEdgeToPoint","point","elementMiddle","distanceToMiddle","elementToPosition","estimatedElementPosition","elementEdge","targetMiddlePoint","_finalizeReturnEdge","returnEdge","abs","_isEdgeOnBounds","_finalizeElementPosition","hostElement","doNotFinalizeReturnEdge","forceWithinBounds","returnValue","_getRectangleFromElement","getOppositeEdge","_calculateActualBeakWidthInPixels","beakWidth","sqrt","_getPositionData","directionalHint","directionalHintForRTL","previousPositions","positionInformation","_getAlignmentData","getClosestEdge","targetCenter","boundingCenter","_positionElementWithinBounds","_finalizeBeakPosition","elementPosition","positionedBeak","actualElement","width","height","beakEdgeDifference","targetRectangle","showBeak","closestEdge","hideBeak","_positionBeak","beakTargetPoint","elementBounds","beakPosition","clientRect","getBoundingClientRect","_getRectangleFromIRect","_getTargetRect","preventDefault","ev","clientX","clientY","rectOrPoint","x","top_1","y","_getMaxHeightFromTargetRectangle","gapSpace","maxHeight","_positionElementRelative","props","targetRect","positionedElement","_finalizePositionData","finalizedElement","_positionElement","window","innerWidth","innerHeight","_positionCallout","callout","isBeakVisible","positionProps","beakPositioned","finalizedBeakPosition","_positionCard","__positioningTestPackage","positionElement","positionCallout","positionCard","getMaxHeight","mouseTarget","elementTarget","rectOrPointTarget","boundingRectangle","stopPropagation","_getBoundsFromTargetWindow","targetWindow","segments","getWindowSegments","segment","getBoundsFromTargetWindow"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\positioning\\positioning.ts"],"sourcesContent":["import { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL } from '../../Utilities';\nimport { RectangleEdge } from './positioning.types';\nimport { Rectangle } from '../../Utilities';\nimport type { IRectangle, Point } from '../../Utilities';\nimport type {\n  IPositionDirectionalHintData,\n  IPositionedData,\n  ICalloutPositionedInfo,\n  ICalloutBeakPositionedInfo,\n  IPositionProps,\n  ICalloutPositionProps,\n  IWindowWithSegments,\n} from './positioning.types';\n\nfunction _createPositionData(\n  targetEdge: RectangleEdge,\n  alignmentEdge?: RectangleEdge,\n  isAuto?: boolean,\n): IPositionDirectionalHintData {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto,\n  };\n}\n\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\nconst DirectionalDictionary: { [key: number]: IPositionDirectionalHintData } = {\n  [DirectionalHint.topLeftEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.left),\n  [DirectionalHint.topCenter]: _createPositionData(RectangleEdge.top),\n  [DirectionalHint.topRightEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.right),\n  [DirectionalHint.topAutoEdge]: _createPositionData(RectangleEdge.top, undefined, true),\n  [DirectionalHint.bottomLeftEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.left),\n  [DirectionalHint.bottomCenter]: _createPositionData(RectangleEdge.bottom),\n  [DirectionalHint.bottomRightEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.right),\n  [DirectionalHint.bottomAutoEdge]: _createPositionData(RectangleEdge.bottom, undefined, true),\n  [DirectionalHint.leftTopEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.top),\n  [DirectionalHint.leftCenter]: _createPositionData(RectangleEdge.left),\n  [DirectionalHint.leftBottomEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.bottom),\n  [DirectionalHint.rightTopEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.top),\n  [DirectionalHint.rightCenter]: _createPositionData(RectangleEdge.right),\n  [DirectionalHint.rightBottomEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.bottom),\n};\n\n/**\n * Do not call methods from this directly, use either positionCallout or positionElement or make another function that\n * utilizes them.\n * START Private functions and interfaces\n */\n\nexport interface IElementPosition {\n  elementRectangle: Rectangle;\n  targetEdge: RectangleEdge;\n  alignmentEdge: RectangleEdge | undefined;\n  forcedInBounds?: boolean;\n}\n\nexport interface IElementPositionInfo extends IElementPosition {\n  targetRectangle: Rectangle;\n}\n\ntype PartialIRectangle = Partial<IRectangle>;\n\ninterface IPartialIRectangle extends PartialIRectangle {\n  [key: string]: number | undefined;\n}\n\nfunction _isRectangleWithinBounds(rect: Rectangle, boundingRect: Rectangle): boolean {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\nfunction _getOutOfBoundsEdges(rect: Rectangle, boundingRect: Rectangle): RectangleEdge[] {\n  const outOfBounds: RectangleEdge[] = [];\n\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n\n  return outOfBounds;\n}\n\nfunction _getEdgeValue(rect: Rectangle, edge: RectangleEdge): number {\n  return (rect as any)[RectangleEdge[edge]] as number;\n}\n\nfunction _setEdgeValue(rect: Rectangle, edge: RectangleEdge, value: number) {\n  (rect as any)[RectangleEdge[edge]] = value;\n  return rect;\n}\n\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n */\nfunction _getCenterValue(rect: Rectangle, edge: RectangleEdge): number {\n  const edges = _getFlankingEdges(edge);\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reserved in certain cases for the\n * \"negative\" edges.\n *\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n */\nfunction _getRelativeEdgeValue(edge: RectangleEdge, value: number): number {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\n\nfunction _getRelativeRectEdgeValue(edge: RectangleEdge, rect: Rectangle): number {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\n\nfunction _getRelativeEdgeDifference(rect: Rectangle, hostRect: Rectangle, edge: RectangleEdge): number {\n  const edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n * if maintainSize is set to false, it will only adjust the specified edge value\n */\nfunction _moveEdge(rect: Rectangle, edge: RectangleEdge, newValue: number, maintainSize = true): Rectangle {\n  const difference = _getEdgeValue(rect, edge) - newValue;\n  let returnRect = _setEdgeValue(rect, edge, newValue);\n  if (maintainSize) {\n    returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  }\n  return returnRect;\n}\n\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n */\nfunction _alignEdges(rect: Rectangle, target: Rectangle, edge: RectangleEdge, gap: number = 0): Rectangle {\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n */\nfunction _alignOppositeEdges(\n  rect: Rectangle,\n  target: Rectangle,\n  targetEdge: RectangleEdge,\n  gap: number = 0,\n): Rectangle {\n  const oppositeEdge = targetEdge * -1;\n  const adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n */\nfunction _isEdgeInBounds(rect: Rectangle, bounds: Rectangle, edge: RectangleEdge): boolean {\n  const adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n\n/**\n * Returns a measure of how much a rectangle is out of bounds for a given alignment;\n * this can be used to compare which rectangle is more or less out of bounds.\n * A value of 0 means the rectangle is entirely in bounds\n */\nfunction _getOutOfBoundsDegree(rect: Rectangle, bounds: Rectangle) {\n  const breakingEdges = _getOutOfBoundsEdges(rect, bounds);\n  let total = 0;\n  for (const edge of breakingEdges) {\n    total += _getRelativeEdgeDifference(rect, bounds, edge) ** 2;\n  }\n\n  return total;\n}\n\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the least bad option should be returned.\n */\nfunction _flipToFit(\n  rect: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n): IElementPosition {\n  const directions: RectangleEdge[] = [\n    RectangleEdge.left,\n    RectangleEdge.right,\n    RectangleEdge.bottom,\n    RectangleEdge.top,\n  ];\n  // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n  let currentEstimate = rect;\n  let currentEdge = positionData.targetEdge;\n  let currentAlignment = positionData.alignmentEdge;\n\n  // keep track of least bad option, in case no sides fit\n  let oobDegree;\n  let bestEdge = currentEdge;\n  let bestAlignment = currentAlignment;\n\n  // Keep switching sides until one is found with enough space.\n  // If all sides don't fit then return the unmodified element.\n  for (let i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      // update least-bad edges\n      const currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);\n      if (!oobDegree || currentOOBDegree < oobDegree) {\n        oobDegree = currentOOBDegree;\n        bestEdge = currentEdge;\n        bestAlignment = currentAlignment;\n      }\n\n      directions.splice(directions.indexOf(currentEdge), 1);\n      if (directions.length > 0) {\n        if (directions.indexOf(currentEdge * -1) > -1) {\n          currentEdge = currentEdge * -1;\n        } else {\n          currentAlignment = currentEdge;\n          currentEdge = directions.slice(-1)[0];\n        }\n        currentEstimate = _estimatePosition(\n          rect,\n          target,\n          { targetEdge: currentEdge, alignmentEdge: currentAlignment },\n          gap,\n        );\n      }\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment,\n      };\n    }\n  }\n\n  // nothing fits, use least-bad option\n  currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap);\n  return {\n    elementRectangle: currentEstimate,\n    targetEdge: bestEdge,\n    alignmentEdge: bestAlignment,\n  };\n}\n\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges\n * into position, when `alignTargetEdge` is specified.\n */\nfunction _flipAlignmentEdge(\n  elementEstimate: IElementPosition,\n  target: Rectangle,\n  gap: number,\n  coverTarget?: boolean,\n): IElementPosition {\n  const { alignmentEdge, targetEdge, elementRectangle } = elementEstimate;\n  const oppositeEdge = alignmentEdge! * -1;\n  const newEstimate = _estimatePosition(\n    elementRectangle,\n    target,\n    { targetEdge: targetEdge, alignmentEdge: oppositeEdge },\n    gap,\n    coverTarget,\n  );\n\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge,\n  };\n}\n\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n */\nfunction _adjustFitWithinBounds(\n  element: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean,\n): IElementPosition {\n  const { alignmentEdge, alignTargetEdge } = positionData;\n  let elementEstimate: IElementPosition = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge,\n  };\n\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n  const outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);\n  // if directionalHintFixed is specified, we need to force the target edge to not change\n  // we need *-1 because targetEdge refers to the target's edge; the callout edge is the opposite\n  const fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : undefined;\n\n  if (outOfBounds.length > 0) {\n    if (alignTargetEdge) {\n      // The edge opposite to the alignment edge might be out of bounds.\n      // Flip alignment to see if we can get it within bounds.\n      if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n        const flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n        if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n          return flippedElementEstimate;\n        } else {\n          // If the flipped elements edges are still out of bounds, try nudging it.\n          elementEstimate = _alignOutOfBoundsEdges(\n            _getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding),\n            elementEstimate,\n            bounding,\n            fixedEdge,\n          );\n        }\n      } else {\n        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);\n      }\n    } else {\n      elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);\n    }\n  }\n\n  return elementEstimate;\n}\n\n/**\n * Iterates through a list of out of bounds edges and tries to nudge and align them.\n * @param outOfBoundsEdges - Array of edges that are out of bounds\n * @param elementEstimate - The current element positioning estimate\n * @param bounding - The current bounds\n * @param preserveEdge - Specify an edge that should not be modified\n */\nfunction _alignOutOfBoundsEdges(\n  outOfBoundsEdges: RectangleEdge[],\n  elementEstimate: IElementPosition,\n  bounding: Rectangle,\n  preserveEdge?: RectangleEdge,\n) {\n  for (const direction of outOfBoundsEdges) {\n    let edgeAttempt;\n\n    // if preserveEdge is specified, do not call _alignEdges, skip directly to _moveEdge\n    // this is because _alignEdges will move the opposite edge\n    if (preserveEdge && preserveEdge === direction * -1) {\n      edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);\n      elementEstimate.forcedInBounds = true;\n    } else {\n      edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n      const inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);\n      // only update estimate if the attempt didn't break out of the opposite bounding edge\n      if (!inBounds) {\n        edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);\n        elementEstimate.forcedInBounds = true;\n      }\n    }\n\n    elementEstimate.elementRectangle = edgeAttempt;\n  }\n\n  return elementEstimate;\n}\n\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n */\nfunction _centerEdgeToPoint(rect: Rectangle, edge: RectangleEdge, point: number): Rectangle {\n  const { positiveEdge } = _getFlankingEdges(edge);\n  const elementMiddle = _getCenterValue(rect, edge);\n  const distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n */\nfunction _estimatePosition(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  coverTarget?: boolean,\n): Rectangle {\n  let estimatedElementPosition = new Rectangle(\n    elementToPosition.left,\n    elementToPosition.right,\n    elementToPosition.top,\n    elementToPosition.bottom,\n  );\n  const { alignmentEdge, targetEdge } = positionData;\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget\n    ? _alignEdges(estimatedElementPosition, target, targetEdge, gap)\n    : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap);\n  // if no alignment edge is provided it's supposed to be centered.\n  if (!alignmentEdge) {\n    const targetMiddlePoint = _getCenterValue(target, targetEdge);\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n\n  return estimatedElementPosition;\n}\n\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n */\nfunction _getFlankingEdges(edge: RectangleEdge): { positiveEdge: RectangleEdge; negativeEdge: RectangleEdge } {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right,\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom,\n    };\n  }\n}\n\n/**\n * Retrieve the final value for the return edge of `elementRectangle`. If the `elementRectangle` is closer to one side\n * of the bounds versus the other, the return edge is flipped to grow inward.\n */\nfunction _finalizeReturnEdge(\n  elementRectangle: Rectangle,\n  returnEdge: RectangleEdge,\n  bounds?: Rectangle,\n): RectangleEdge {\n  if (\n    bounds &&\n    Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) >\n      Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))\n  ) {\n    return returnEdge * -1;\n  }\n\n  return returnEdge;\n}\n\n/**\n * Whether or not the considered edge of the elementRectangle is lying on the edge of the bounds\n * @param elementRectangle The rectangle whose edge we are considering\n * @param bounds The rectangle marking the bounds\n * @param edge The target edge we're considering\n * @returns If the target edge of the elementRectangle is in the same location as that edge of the bounds\n */\nfunction _isEdgeOnBounds(elementRectangle: Rectangle, edge: RectangleEdge, bounds?: Rectangle): boolean {\n  return bounds !== undefined && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);\n}\n\n/**\n * Finalizes the element position based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the Callout shrinks it shrinks towards that corner.\n */\nfunction _finalizeElementPosition(\n  elementRectangle: Rectangle,\n  hostElement: HTMLElement,\n  targetEdge: RectangleEdge,\n  bounds?: Rectangle,\n  alignmentEdge?: RectangleEdge,\n  coverTarget?: boolean,\n  doNotFinalizeReturnEdge?: boolean,\n  forceWithinBounds?: boolean,\n): IPartialIRectangle {\n  const returnValue: IPartialIRectangle = {};\n\n  const hostRect: Rectangle = _getRectangleFromElement(hostElement);\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  let returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;\n\n  // If we are finalizing the return edge, choose the edge such that we grow away from the bounds\n  // If we are not finalizing the return edge but the opposite edge is flush against the bounds,\n  // choose that as the anchor edge so the element rect can grow away from the bounds' edge\n  // In this case there will not be a visual difference because there is no more room for the elementRectangle to grow\n  // in the usual direction\n  if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {\n    returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);\n  }\n\n  returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n\n  // if the positioned element will still overflow, return all four edges with in-bounds values\n  if (forceWithinBounds) {\n    returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(\n      elementRectangle,\n      hostRect,\n      elementEdge * -1,\n    );\n    returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(\n      elementRectangle,\n      hostRect,\n      returnEdge * -1,\n    );\n  }\n\n  return returnValue;\n}\n\n// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\nfunction _calculateActualBeakWidthInPixels(beakWidth: number): number {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be\n * flipped (e.g. bottomLeftEdge would become bottomRightEdge).\n *\n * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.\n */\nfunction _getPositionData(\n  directionalHint: DirectionalHint = DirectionalHint.bottomAutoEdge,\n  directionalHintForRTL?: DirectionalHint,\n  previousPositions?: IPositionDirectionalHintData,\n): IPositionDirectionalHintData {\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge,\n    };\n  }\n  const positionInformation: IPositionDirectionalHintData = { ...DirectionalDictionary[directionalHint] };\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n  return positionInformation;\n}\n\n/**\n * Gets the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n */\nfunction _getAlignmentData(\n  positionData: IPositionDirectionalHintData,\n  target: Rectangle,\n  boundingRect: Rectangle,\n  coverTarget?: boolean,\n  alignTargetEdge?: boolean,\n): IPositionDirectionalHintData {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\n\nfunction getClosestEdge(targetEdge: RectangleEdge, target: Rectangle, boundingRect: Rectangle): RectangleEdge {\n  const targetCenter: number = _getCenterValue(target, targetEdge);\n  const boundingCenter: number = _getCenterValue(boundingRect, targetEdge);\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(targetEdge);\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\n\nfunction _positionElementWithinBounds(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean,\n): IElementPosition {\n  const estimatedElementPosition: Rectangle = _estimatePosition(\n    elementToPosition,\n    target,\n    positionData,\n    gap,\n    coverTarget,\n  );\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge,\n    };\n  } else {\n    return _adjustFitWithinBounds(\n      estimatedElementPosition,\n      target,\n      bounding,\n      positionData,\n      gap,\n      directionalHintFixed,\n      coverTarget,\n    );\n  }\n}\n\nfunction _finalizeBeakPosition(\n  elementPosition: IElementPositionInfo,\n  positionedBeak: Rectangle,\n  bounds?: Rectangle,\n): ICalloutBeakPositionedInfo {\n  const targetEdge = elementPosition.targetEdge * -1;\n  // The \"host\" element that we will use to help position the beak.\n  const actualElement = new Rectangle(\n    0,\n    elementPosition.elementRectangle.width,\n    0,\n    elementPosition.elementRectangle.height,\n  );\n  const returnValue: IPartialIRectangle = {};\n  const returnEdge = _finalizeReturnEdge(\n    elementPosition.elementRectangle,\n    elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge,\n    bounds,\n  );\n\n  // only show the beak if the callout is not fully covering the target\n  const beakEdgeDifference = _getRelativeEdgeDifference(\n    elementPosition.elementRectangle,\n    elementPosition.targetRectangle,\n    targetEdge,\n  );\n  const showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));\n\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n\n  return {\n    elementPosition: { ...returnValue },\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge,\n    hideBeak: !showBeak,\n  };\n}\n\nfunction _positionBeak(beakWidth: number, elementPosition: IElementPositionInfo): Rectangle {\n  const target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   */\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(elementPosition.targetEdge);\n  const beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n  const elementBounds = new Rectangle(\n    beakWidth / 2,\n    elementPosition.elementRectangle.width - beakWidth / 2,\n    beakWidth / 2,\n    elementPosition.elementRectangle.height - beakWidth / 2,\n  );\n\n  let beakPosition: Rectangle = new Rectangle(0, beakWidth, 0, beakWidth);\n\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n\n  beakPosition = _centerEdgeToPoint(\n    beakPosition,\n    elementPosition.targetEdge * -1,\n    beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle),\n  );\n\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n\n  return beakPosition;\n}\n\nfunction _getRectangleFromElement(element: Element): Rectangle {\n  const clientRect: ClientRect = element.getBoundingClientRect();\n\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\n\nfunction _getRectangleFromIRect(rect: IRectangle): Rectangle {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\n\nfunction _getTargetRect(bounds: Rectangle, target: Element | MouseEvent | Point | Rectangle | undefined): Rectangle {\n  let targetRectangle: Rectangle;\n  if (target) {\n    // eslint-disable-next-line no-extra-boolean-cast\n    if (!!(target as MouseEvent).preventDefault) {\n      const ev = target as MouseEvent;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n      // eslint-disable-next-line no-extra-boolean-cast\n    } else if (!!(target as Element).getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target as Element);\n      // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      const rectOrPoint: Point & Rectangle = target as Point & Rectangle;\n      // eslint-disable-next-line deprecation/deprecation\n      const left = rectOrPoint.left || rectOrPoint.x;\n      // eslint-disable-next-line deprecation/deprecation\n      const top = rectOrPoint.top || rectOrPoint.y;\n      const right = rectOrPoint.right || left;\n      const bottom = rectOrPoint.bottom || top;\n      targetRectangle = new Rectangle(left, right, top, bottom);\n    }\n\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      const outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(targetRectangle, bounds);\n\n      for (const direction of outOfBounds) {\n        (targetRectangle as any)[RectangleEdge[direction]] = (bounds as any)[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n\n  return targetRectangle;\n}\n\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\nfunction _getMaxHeightFromTargetRectangle(\n  targetRectangle: Rectangle,\n  targetEdge: DirectionalHint,\n  gapSpace: number,\n  bounds: Rectangle,\n  coverTarget?: boolean,\n) {\n  let maxHeight = 0;\n  const directionalHint = DirectionalDictionary[targetEdge];\n\n  // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n  const target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\n\nfunction _positionElementRelative(\n  props: IPositionProps,\n  elementToPosition: HTMLElement,\n  boundingRect: Rectangle,\n  previousPositions?: IPositionedData,\n): IElementPositionInfo {\n  const gap: number = props.gapSpace ? props.gapSpace : 0;\n  const targetRect: Rectangle = _getTargetRect(boundingRect, props.target);\n  const positionData: IPositionDirectionalHintData = _getAlignmentData(\n    _getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions)!,\n    targetRect,\n    boundingRect,\n    props.coverTarget,\n    props.alignTargetEdge,\n  );\n  const positionedElement: IElementPosition = _positionElementWithinBounds(\n    _getRectangleFromElement(elementToPosition),\n    targetRect,\n    boundingRect,\n    positionData,\n    gap,\n    props.directionalHintFixed,\n    props.coverTarget,\n  );\n  return { ...positionedElement, targetRectangle: targetRect };\n}\n\nfunction _finalizePositionData(\n  positionedElement: IElementPosition,\n  hostElement: HTMLElement,\n  bounds?: Rectangle,\n  coverTarget?: boolean,\n  doNotFinalizeReturnEdge?: boolean,\n): IPositionedData {\n  const finalizedElement: IPartialIRectangle = _finalizeElementPosition(\n    positionedElement.elementRectangle,\n    hostElement,\n    positionedElement.targetEdge,\n    bounds,\n    positionedElement.alignmentEdge,\n    coverTarget,\n    doNotFinalizeReturnEdge,\n    positionedElement.forcedInBounds,\n  );\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge,\n  };\n}\n\nfunction _positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData,\n): IPositionedData {\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPosition = _positionElementRelative(\n    props,\n    elementToPosition,\n    boundingRect,\n    previousPositions,\n  );\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\n\nfunction _positionCallout(\n  props: ICalloutPositionProps,\n  hostElement: HTMLElement,\n  callout: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n  doNotFinalizeReturnEdge?: boolean,\n): ICalloutPositionedInfo {\n  const beakWidth: number = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  const gap: number = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  const positionProps: IPositionProps = props;\n  positionProps.gapSpace = gap;\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPositionInfo = _positionElementRelative(\n    positionProps,\n    callout,\n    boundingRect,\n    previousPositions,\n  );\n\n  const beakPositioned: Rectangle = _positionBeak(beakWidth, positionedElement);\n  const finalizedBeakPosition: ICalloutBeakPositionedInfo = _finalizeBeakPosition(\n    positionedElement,\n    beakPositioned,\n    boundingRect,\n  );\n\n  return {\n    ..._finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge),\n    beakPosition: finalizedBeakPosition,\n  };\n}\n\nfunction _positionCard(\n  props: ICalloutPositionProps,\n  hostElement: HTMLElement,\n  callout: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCallout(props, hostElement, callout, previousPositions, true);\n}\n// END PRIVATE FUNCTIONS\n\nexport const __positioningTestPackage = {\n  _finalizePositionData,\n  _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds,\n  _positionBeak,\n  _getPositionData,\n  _getMaxHeightFromTargetRectangle,\n};\n\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\n * repositions based on its previous targets rather than starting with directionalhint.\n */\nexport function positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData,\n): IPositionedData {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\n\nexport function positionCallout(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\n\nexport function positionCard(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCard(props, hostElement, elementToPosition, previousPositions);\n}\n\n/**\n * Gets the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\nexport function getMaxHeight(\n  target: Element | MouseEvent | Point | Rectangle,\n  targetEdge: DirectionalHint,\n  gapSpace: number = 0,\n  bounds?: IRectangle,\n  coverTarget?: boolean,\n): number {\n  const mouseTarget: MouseEvent = target as MouseEvent;\n  const elementTarget: Element = target as Element;\n  const rectOrPointTarget: Point & Rectangle = target as Point & Rectangle;\n  let targetRect: Rectangle;\n  const boundingRectangle = bounds\n    ? _getRectangleFromIRect(bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  // eslint-disable-next-line deprecation/deprecation\n  const left = rectOrPointTarget.left || rectOrPointTarget.x;\n  // eslint-disable-next-line deprecation/deprecation\n  const top = rectOrPointTarget.top || rectOrPointTarget.y;\n  const right = rectOrPointTarget.right || left;\n  const bottom = rectOrPointTarget.bottom || top;\n\n  // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent\n  if (!!mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (left !== undefined && top !== undefined) {\n    targetRect = new Rectangle(left, right, top, bottom);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\nexport function getOppositeEdge(edge: RectangleEdge): RectangleEdge {\n  return edge * -1;\n}\n\nfunction _getBoundsFromTargetWindow(\n  target: Element | MouseEvent | Point | Rectangle | null,\n  targetWindow: IWindowWithSegments,\n): IRectangle {\n  let segments = undefined;\n  if (targetWindow.getWindowSegments) {\n    segments = targetWindow.getWindowSegments();\n  }\n\n  // Identify if we're dealing with single screen scenarios.\n  if (segments === undefined || segments.length <= 1) {\n    return {\n      top: 0,\n      left: 0,\n      right: targetWindow.innerWidth,\n      bottom: targetWindow.innerHeight,\n      width: targetWindow.innerWidth,\n      height: targetWindow.innerHeight,\n    };\n  }\n\n  // Logic for determining dual screen scenarios.\n  let x: number | undefined = 0;\n  let y: number | undefined = 0;\n\n  // If the target is an Element get coordinates for its center.\n  if (target !== null && !!(target as Element).getBoundingClientRect) {\n    const clientRect = (target as Element).getBoundingClientRect();\n    x = (clientRect.left + clientRect.right) / 2;\n    y = (clientRect.top + clientRect.bottom) / 2;\n  }\n  // If the target is not null get x-axis and y-axis coordinates directly.\n  else if (target !== null) {\n    // eslint-disable-next-line deprecation/deprecation\n    x = (target as Point).left || (target as MouseEvent | Point).x;\n    // eslint-disable-next-line deprecation/deprecation\n    y = (target as Point).top || (target as MouseEvent | Point).y;\n  }\n\n  let bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };\n\n  // Define which window segment are the coordinates in and calculate bounds based on that.\n  for (const segment of segments) {\n    if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {\n      bounds = {\n        top: segment.top,\n        left: segment.left,\n        right: segment.right,\n        bottom: segment.bottom,\n        width: segment.width,\n        height: segment.height,\n      };\n    }\n  }\n\n  return bounds;\n}\n\nexport function getBoundsFromTargetWindow(\n  target: Element | MouseEvent | Point | Rectangle | null,\n  targetWindow: IWindowWithSegments,\n): IRectangle {\n  return _getBoundsFromTargetWindow(target, targetWindow);\n}\n"]},"metadata":{},"sourceType":"module"}