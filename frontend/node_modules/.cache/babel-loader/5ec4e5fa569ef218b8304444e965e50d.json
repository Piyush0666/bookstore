{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nexport var LayerHost = function (props) {\n  var className = props.className;\n  var layerHostId = React.useState(function () {\n    return getId();\n  })[0];\n  var _a = props.id,\n      hostId = _a === void 0 ? layerHostId : _a;\n  var layerHostRef = React.useRef({\n    hostId: hostId,\n    rootRef: React.useRef(null),\n    notifyLayersChanged: function () {// Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    }\n  });\n  React.useImperativeHandle(props.componentRef, function () {\n    return layerHostRef.current;\n  });\n  React.useEffect(function () {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId); // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useUnmount(function () {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n  return React.createElement(\"div\", __assign({}, props, {\n    className: css('ms-LayerHost', className),\n    ref: layerHostRef.current.rootRef\n  }));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,mBAA/C,QAA0E,sBAA1E;AAGA,OAAO,IAAMC,SAAS,GAA6C,iBAAK;EAC9D,aAAS,GAAKC,KAAK,UAAnB;EAED,eAAW,GAAIR,KAAK,CAACS,QAAN,CAAe;IAAM,YAAK,EAAL;EAAO,CAA5B,EAA6B,CAA7B,CAAf;EAEC,SAA6BD,KAAK,GAAlC;EAAA,IAAIE,MAAM,mBAAGC,WAAH,GAAcC,EAAxB;EAER,IAAMC,YAAY,GAAGb,KAAK,CAACc,MAAN,CAAyB;IAC5CJ,MAAM,QADsC;IAE5CK,OAAO,EAAEf,KAAK,CAACc,MAAN,CAAoC,IAApC,CAFmC;IAG5CE,mBAAmB,EAAE,aACnB;IACD;EAL2C,CAAzB,CAArB;EAQAhB,KAAK,CAACiB,mBAAN,CAA0BT,KAAK,CAACU,YAAhC,EAA8C;IAAM,mBAAY,CAACC,OAAb;EAAoB,CAAxE;EAEAnB,KAAK,CAACoB,SAAN,CAAgB;IACdf,iBAAiB,CAACK,MAAD,EAASG,YAAY,CAACM,OAAtB,CAAjB;IACAf,iBAAiB,CAACM,MAAD,CAAjB,CAFc,CAGd;EACD,CAJD,EAIG,EAJH;EAMAT,UAAU,CAAC;IACTK,mBAAmB,CAACI,MAAD,EAASG,YAAY,CAACM,OAAtB,CAAnB;IACAf,iBAAiB,CAACM,MAAD,CAAjB;EACD,CAHS,CAAV;EAKA,OAAOV,wCAASQ,KAAT,EAAc;IAAEa,SAAS,EAAEnB,GAAG,CAAC,cAAD,EAAiBmB,SAAjB,CAAhB;IAA6CC,GAAG,EAAET,YAAY,CAACM,OAAb,CAAqBJ;EAAvE,CAAd,EAAP;AACD,CA7BM","names":["React","useUnmount","css","getId","notifyHostChanged","registerLayerHost","unregisterLayerHost","LayerHost","props","useState","hostId","layerHostId","_a","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","className","ref"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Layer\\LayerHost.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n"]},"metadata":{},"sourceType":"module"}