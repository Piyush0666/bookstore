{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { CustomizerContext, getNativeElementProps, omit } from '@fluentui/utilities';\nimport { ThemeContext } from './ThemeContext';\nexport var renderThemeProvider = function (state) {\n  var theme = state.theme,\n      customizerContext = state.customizerContext;\n  var Root = state.as || 'div';\n  var rootProps = typeof state.as === 'string' ? getNativeElementProps(state.as, state) : omit(state, ['as']);\n  return React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, React.createElement(CustomizerContext.Provider, {\n    value: customizerContext\n  }, React.createElement(Root, __assign({}, rootProps))));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,EAAmDC,IAAnD,QAA+D,qBAA/D;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAGA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,KAAD,EAA0B;EACnD,SAAK,GAAwBA,KAAK,MAAlC;EAAA,IAAOC,iBAAiB,GAAKD,KAAK,kBAAlC;EACR,IAAME,IAAI,GAAGF,KAAK,CAACG,EAAN,IAAY,KAAzB;EACA,IAAMC,SAAS,GAAG,OAAOJ,KAAK,CAACG,EAAb,KAAoB,QAApB,GAA+BP,qBAAqB,CAACI,KAAK,CAACG,EAAP,EAAWH,KAAX,CAApD,GAAwEH,IAAI,CAACG,KAAD,EAAQ,CAAC,IAAD,CAAR,CAA9F;EAEA,OACEN,oBAACI,YAAY,CAACO,QAAd,EAAsB;IAACC,KAAK,EAAEC;EAAR,CAAtB,EACEb,oBAACC,iBAAiB,CAACU,QAAnB,EAA2B;IAACC,KAAK,EAAEL;EAAR,CAA3B,EACEP,oBAACQ,IAAD,EAAKM,aAAKJ,SAAL,CAAL,CADF,CADF,CADF;AAOD,CAZM","names":["React","CustomizerContext","getNativeElementProps","omit","ThemeContext","renderThemeProvider","state","customizerContext","Root","as","rootProps","Provider","value","theme","__assign"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\ThemeProvider\\renderThemeProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { CustomizerContext, getNativeElementProps, omit } from '@fluentui/utilities';\nimport { ThemeContext } from './ThemeContext';\nimport type { ThemeProviderState } from './ThemeProvider.types';\n\nexport const renderThemeProvider = (state: ThemeProviderState) => {\n  const { theme, customizerContext } = state;\n  const Root = state.as || 'div';\n  const rootProps = typeof state.as === 'string' ? getNativeElementProps(state.as, state) : omit(state, ['as']);\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <CustomizerContext.Provider value={customizerContext}>\n        <Root {...rootProps} />\n      </CustomizerContext.Provider>\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}