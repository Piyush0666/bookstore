{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, getPropsWithDefaults, getWindow, modalize } from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\n\nfunction useScrollbarAsync(props, root) {\n  var async = useAsync();\n\n  var _a = React.useState(false),\n      needsVerticalScrollBarState = _a[0],\n      setNeedsVerticalScrollBar = _a[1];\n\n  React.useEffect(function () {\n    async.requestAnimationFrame(function () {\n      var _a; // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n\n\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      var needsVerticalScrollBar = false;\n\n      if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        var rootHeight = root.current.clientHeight;\n        var firstChildHeight = root.current.firstElementChild.clientHeight;\n\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n    return function () {\n      return async.dispose();\n    };\n  });\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n      containsFocus = options.containsFocus;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(function () {\n      var _a;\n\n      (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props, root) {\n  var _a = props.onRestoreFocus,\n      onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;\n  var originalFocusedElement = React.useRef();\n  var containsFocus = React.useRef(false);\n  React.useEffect(function () {\n    originalFocusedElement.current = getDocument().activeElement;\n\n    if (doesElementContainFocus(root.current)) {\n      containsFocus.current = true;\n    }\n\n    return function () {\n      var _a;\n\n      onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      }); // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n\n      originalFocusedElement.current = undefined;\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useOnEvent(root, 'focus', React.useCallback(function () {\n    containsFocus.current = true;\n  }, []), true);\n  useOnEvent(root, 'blur', React.useCallback(function (ev) {\n    /** The popup should update this._containsFocus when:\n     * relatedTarget exists AND\n     * the relatedTarget is not contained within the popup.\n     * If the relatedTarget is within the popup, that means the popup still has focus\n     * and focused moved from one element to another within the popup.\n     * If relatedTarget is undefined or null that usually means that a\n     * keyboard event occurred and focus didn't change\n     */\n    if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {\n      containsFocus.current = false;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n\n  }, []), true);\n}\n\nfunction useHideSiblingNodes(props, root) {\n  // eslint-disable-next-line deprecation/deprecation\n  var shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n  React.useEffect(function () {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    var unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n/**\n * This adds accessibility to Dialog and Panel controls\n */\n\n\nexport var Popup = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults({\n    shouldRestoreFocus: true,\n    enableAriaHiddenSiblings: true\n  }, propsWithoutDefaults);\n  var root = React.useRef();\n  var mergedRootRef = useMergedRefs(root, forwardedRef);\n  useHideSiblingNodes(props, root);\n  useRestoreFocus(props, root);\n  var role = props.role,\n      className = props.className,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      style = props.style,\n      children = props.children,\n      onDismiss = props.onDismiss;\n  var needsVerticalScrollBar = useScrollbarAsync(props, root);\n  var onKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        if (onDismiss) {\n          onDismiss(ev);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }, [onDismiss]);\n  var win = useWindow();\n  useOnEvent(win, 'keydown', onKeyDown);\n  return React.createElement(\"div\", __assign({\n    ref: mergedRootRef\n  }, getNativeProps(props, divProperties), {\n    className: className,\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    onKeyDown: onKeyDown,\n    style: __assign({\n      overflowY: needsVerticalScrollBar ? 'scroll' : undefined,\n      outline: 'none'\n    }, style)\n  }), children);\n});\nPopup.displayName = 'Popup';","map":{"version":3,"mappings":"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","names":["React","KeyCodes","divProperties","doesElementContainFocus","getDocument","getNativeProps","getPropsWithDefaults","getWindow","modalize","useMergedRefs","useAsync","useOnEvent","useWindow","useScrollbarAsync","props","root","async","useState","needsVerticalScrollBarState","setNeedsVerticalScrollBar","useEffect","requestAnimationFrame","style","overflowY","needsVerticalScrollBar","current","_a","firstElementChild","rootHeight","clientHeight","firstChildHeight","dispose","defaultFocusRestorer","options","containsFocus","originalElement","setTimeout","focus","useRestoreFocus","originalFocusedElement","useRef","activeElement","onRestoreFocus","documentContainsFocus","hasFocus","undefined","useCallback","ev","relatedTarget","contains","useHideSiblingNodes","shouldHideSiblings","String","toLowerCase","enableAriaHiddenSiblings","unmodalize","Popup","forwardRef","propsWithoutDefaults","forwardedRef","shouldRestoreFocus","mergedRootRef","className","ariaLabel","ariaLabelledBy","ariaDescribedBy","children","onDismiss","onKeyDown","which","escape","preventDefault","stopPropagation","win","ref","role","outline","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Popup\\Popup.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  getPropsWithDefaults,\n  getWindow,\n  modalize,\n} from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { IPopupProps, IPopupRestoreFocusParams } from './Popup.types';\n\nfunction useScrollbarAsync(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const async = useAsync();\n  const [needsVerticalScrollBarState, setNeedsVerticalScrollBar] = React.useState(false);\n  React.useEffect(() => {\n    async.requestAnimationFrame(() => {\n      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      let needsVerticalScrollBar = false;\n      if (root && root.current && root.current?.firstElementChild) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        const rootHeight = root.current.clientHeight;\n        const firstChildHeight = root.current.firstElementChild.clientHeight;\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n\n    return () => async.dispose();\n  });\n\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options: IPopupRestoreFocusParams) {\n  const { originalElement, containsFocus } = options;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(() => {\n      originalElement.focus?.();\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const { onRestoreFocus = defaultFocusRestorer } = props;\n  const originalFocusedElement = React.useRef<HTMLElement>();\n  const containsFocus = React.useRef(false);\n\n  React.useEffect(() => {\n    originalFocusedElement.current = getDocument()!.activeElement as HTMLElement;\n\n    if (doesElementContainFocus(root.current!)) {\n      containsFocus.current = true;\n    }\n\n    return () => {\n      onRestoreFocus?.({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n      originalFocusedElement.current = undefined;\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useOnEvent(\n    root,\n    'focus',\n    React.useCallback((): void => {\n      containsFocus.current = true;\n    }, []),\n    true,\n  );\n\n  useOnEvent(\n    root,\n    'blur',\n    React.useCallback((ev: FocusEvent): void => {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occurred and focus didn't change\n       */\n      if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget as HTMLElement)) {\n        containsFocus.current = false;\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []),\n    true,\n  );\n}\n\nfunction useHideSiblingNodes(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  // eslint-disable-next-line deprecation/deprecation\n  const shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n\n  React.useEffect(() => {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    const unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport const Popup: React.FunctionComponent<IPopupProps> = React.forwardRef<HTMLDivElement, IPopupProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(\n      { shouldRestoreFocus: true, enableAriaHiddenSiblings: true },\n      propsWithoutDefaults,\n    );\n\n    const root = React.useRef<HTMLDivElement>();\n    const mergedRootRef = useMergedRefs(root, forwardedRef) as React.Ref<HTMLDivElement>;\n\n    useHideSiblingNodes(props, root);\n    useRestoreFocus(props, root);\n\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style, children, onDismiss } = props;\n    const needsVerticalScrollBar = useScrollbarAsync(props, root);\n\n    const onKeyDown = React.useCallback(\n      (ev: React.KeyboardEvent<HTMLElement> | KeyboardEvent): void => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.escape:\n            if (onDismiss) {\n              onDismiss(ev);\n\n              ev.preventDefault();\n              ev.stopPropagation();\n            }\n\n            break;\n        }\n      },\n      [onDismiss],\n    );\n\n    const win = useWindow();\n    useOnEvent(win, 'keydown', onKeyDown as (ev: Event) => void);\n\n    return (\n      <div\n        ref={mergedRootRef}\n        {...getNativeProps(props, divProperties)}\n        className={className}\n        role={role}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        onKeyDown={onKeyDown}\n        style={{ overflowY: needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none', ...style }}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nPopup.displayName = 'Popup';\n"]},"metadata":{},"sourceType":"module"}