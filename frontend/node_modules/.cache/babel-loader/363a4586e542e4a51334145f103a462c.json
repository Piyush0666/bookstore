{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nexport var CalendarGridRow = function (props) {\n  var classNames = props.classNames,\n      week = props.week,\n      weeks = props.weeks,\n      weekIndex = props.weekIndex,\n      rowClassName = props.rowClassName,\n      ariaRole = props.ariaRole,\n      showWeekNumbers = props.showWeekNumbers,\n      firstDayOfWeek = props.firstDayOfWeek,\n      firstWeekOfYear = props.firstWeekOfYear,\n      navigatedDate = props.navigatedDate,\n      strings = props.strings;\n  var weekNumbers = showWeekNumbers ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate) : null;\n  var titleString = weekNumbers ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex]) : '';\n  return React.createElement(\"tr\", {\n    role: ariaRole,\n    className: rowClassName,\n    key: weekIndex + '_' + week[0].key\n  }, showWeekNumbers && weekNumbers && React.createElement(\"th\", {\n    className: classNames.weekNumberCell,\n    key: weekIndex,\n    title: titleString,\n    \"aria-label\": titleString,\n    scope: \"row\"\n  }, React.createElement(\"span\", null, weekNumbers[weekIndex])), week.map(function (day, dayIndex) {\n    return React.createElement(CalendarGridDayCell, __assign({}, props, {\n      key: day.key,\n      day: day,\n      dayIndex: dayIndex\n    }));\n  }));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AA2BA,OAAO,IAAMC,eAAe,GAAmD,iBAAK;EAEhF,cAAU,GAWRC,KAAK,WAXP;EAAA,IACAC,IAAI,GAUFD,KAAK,KAXP;EAAA,IAEAE,KAAK,GASHF,KAAK,MAXP;EAAA,IAGAG,SAAS,GAQPH,KAAK,UAXP;EAAA,IAIAI,YAAY,GAOVJ,KAAK,aAXP;EAAA,IAKAK,QAAQ,GAMNL,KAAK,SAXP;EAAA,IAMAM,eAAe,GAKbN,KAAK,gBAXP;EAAA,IAOAO,cAAc,GAIZP,KAAK,eAXP;EAAA,IAQAQ,eAAe,GAGbR,KAAK,gBAXP;EAAA,IASAS,aAAa,GAEXT,KAAK,cAXP;EAAA,IAUAU,OAAO,GACLV,KAAK,QAXP;EAYF,IAAMW,WAAW,GAAGL,eAAe,GAC/BT,qBAAqB,CAACK,KAAM,CAACU,MAAR,EAAgBL,cAAhB,EAAgCC,eAAhC,EAAiDC,aAAjD,CADU,GAE/B,IAFJ;EAIA,IAAMI,WAAW,GAAGF,WAAW,GAC3BD,OAAO,CAACI,sBAAR,IAAkClB,MAAM,CAACc,OAAO,CAACI,sBAAT,EAAiCH,WAAW,CAACR,SAAD,CAA5C,CADb,GAE3B,EAFJ;EAIA,OACER;IAAIoB,IAAI,EAAEV,QAAV;IAAoBW,SAAS,EAAEZ,YAA/B;IAA6Ca,GAAG,EAAEd,SAAS,GAAG,GAAZ,GAAkBF,IAAI,CAAC,CAAD,CAAJ,CAAQgB;EAA5E,GACGX,eAAe,IAAIK,WAAnB,IACChB;IACEqB,SAAS,EAAEE,UAAU,CAACC,cADxB;IAEEF,GAAG,EAAEd,SAFP;IAGEiB,KAAK,EAAEP,WAHT;IAGoB,cACNA,WAJd;IAKEQ,KAAK,EAAC;EALR,GAOE1B,kCAAOgB,WAAW,CAACR,SAAD,CAAlB,CAPF,CAFJ,EAYGF,IAAI,CAACqB,GAAL,CAAS,UAACC,GAAD,EAAgBC,QAAhB,EAAgC;IAAK,OAC7C7B,oBAACG,mBAAD,EAAoB2B,aAAKzB,KAAL,EAAU;MAAEiB,GAAG,EAAEM,GAAG,CAACN,GAAX;MAAgBM,GAAG,EAAEA,GAArB;MAA0BC,QAAQ,EAAEA;IAApC,CAAV,CAApB,CAD6C;EAE9C,CAFA,CAZH,CADF;AAkBD,CAxCM","names":["React","format","getWeekNumbersInMonth","CalendarGridDayCell","CalendarGridRow","props","week","weeks","weekIndex","rowClassName","ariaRole","showWeekNumbers","firstDayOfWeek","firstWeekOfYear","navigatedDate","strings","weekNumbers","length","titleString","weekNumberFormatString","role","className","key","classNames","weekNumberCell","title","scope","map","day","dayIndex","__assign"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\CalendarDayGrid\\CalendarGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo, IWeekCorners } from './CalendarDayGrid.base';\n\nexport interface ICalendarGridRowProps extends ICalendarDayGridProps {\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n  weeks: IDayInfo[][];\n  week: IDayInfo[];\n  weekIndex: number;\n  weekCorners?: IWeekCorners;\n  ariaHidden?: boolean;\n  rowClassName?: string;\n  ariaRole?: string;\n  navigatedDayRef: React.MutableRefObject<HTMLTableCellElement>;\n  activeDescendantId: string;\n  calculateRoundedStyles(\n    classNames: IProcessedStyleSet<ICalendarDayGridStyles>,\n    above: boolean,\n    below: boolean,\n    left: boolean,\n    right: boolean,\n  ): string;\n  getDayInfosInRangeOfDay(dayToCompare: IDayInfo): IDayInfo[];\n  getRefsFromDayInfos(dayInfosInRange: IDayInfo[]): (HTMLElement | null)[];\n}\n\nexport const CalendarGridRow: React.FunctionComponent<ICalendarGridRowProps> = props => {\n  const {\n    classNames,\n    week,\n    weeks,\n    weekIndex,\n    rowClassName,\n    ariaRole,\n    showWeekNumbers,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    navigatedDate,\n    strings,\n  } = props;\n  const weekNumbers = showWeekNumbers\n    ? getWeekNumbersInMonth(weeks!.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)\n    : null;\n\n  const titleString = weekNumbers\n    ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex])\n    : '';\n\n  return (\n    <tr role={ariaRole} className={rowClassName} key={weekIndex + '_' + week[0].key}>\n      {showWeekNumbers && weekNumbers && (\n        <th\n          className={classNames.weekNumberCell}\n          key={weekIndex}\n          title={titleString}\n          aria-label={titleString}\n          scope=\"row\"\n        >\n          <span>{weekNumbers[weekIndex]}</span>\n        </th>\n      )}\n      {week.map((day: IDayInfo, dayIndex: number) => (\n        <CalendarGridDayCell {...props} key={day.key} day={day} dayIndex={dayIndex} />\n      ))}\n    </tr>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}