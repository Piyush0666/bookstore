{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\n\nexport var useUnmount = function (callback) {\n  var unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(function () {\n    return function () {\n      var _a;\n\n      (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);\n    };\n  }, []);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;;;;AAKA,OAAO,IAAMC,UAAU,GAAG,UAACC,QAAD,EAAqB;EAC7C,IAAMC,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAaF,QAAb,CAAnB;EACAC,UAAU,CAACE,OAAX,GAAqBH,QAArB;EACAF,KAAK,CAACM,SAAN,CACE;IAAM;;;MACJ,gBAAU,CAACD,OAAX,MAAkB,IAAlB,IAAkBE,aAAlB,GAAkB,MAAlB,GAAkBA,QAAlBJ,UAAkB,CAAlB;IACD,CAFK;EAEL,CAHH,EAIE,EAJF;AAMD,CATM","names":["React","useUnmount","callback","unmountRef","useRef","current","useEffect","_a"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react-hooks\\src\\useUnmount.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n"]},"metadata":{},"sourceType":"module"}