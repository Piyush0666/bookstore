{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nvar getClassNames = classNamesFunction();\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\n\nexport var useLink = function (props, forwardedRef) {\n  var as = props.as,\n      className = props.className,\n      disabled = props.disabled,\n      href = props.href,\n      onClick = props.onClick,\n      styles = props.styles,\n      theme = props.theme,\n      underline = props.underline;\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n  var classNames = getClassNames(styles, {\n    className: className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme\n  });\n\n  var _onClick = function (ev) {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  var rootType = as ? as : href ? 'a' : 'button';\n  var state = {};\n  var slots = {\n    root: rootType\n  };\n  var slotProps = {\n    root: __assign(__assign({}, adjustPropsForRootType(rootType, props)), {\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs\n    })\n  };\n  return {\n    state: state,\n    slots: slots,\n    slotProps: slotProps\n  };\n};\n\nvar useComponentRef = function (props, link) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        if (link.current) {\n          link.current.focus();\n        }\n      }\n    };\n  }, [link]);\n};\n\nvar adjustPropsForRootType = function (RootType, props) {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  var as = props.as,\n      disabled = props.disabled,\n      target = props.target,\n      href = props.href,\n      theme = props.theme,\n      getStyles = props.getStyles,\n      styles = props.styles,\n      componentRef = props.componentRef,\n      underline = props.underline,\n      restProps = __rest(props, [\"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"underline\"]); // RootType will be a string if we're dealing with an html component\n\n\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return __assign({\n        target: target,\n        href: disabled ? undefined : href\n      }, restProps);\n    } // Add the type='button' prop for button elements\n\n\n    if (RootType === 'button') {\n      return __assign({\n        type: 'button',\n        disabled: disabled\n      }, restProps);\n    } // Remove the target and href props for all other non anchor elements\n\n\n    return __assign(__assign({}, restProps), {\n      disabled: disabled\n    });\n  } // Retain all props except 'as' for ReactComponents\n\n\n  return __assign({\n    target: target,\n    href: href,\n    disabled: disabled\n  }, restProps);\n};","map":{"version":3,"mappings":"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","names":["React","useMergedRefs","classNamesFunction","useFocusRects","getClassNames","useLink","props","forwardedRef","className","disabled","href","onClick","styles","theme","underline","rootRef","useRef","mergedRootRefs","useComponentRef","classNames","isButton","isDisabled","isUnderlined","_onClick","ev","preventDefault","rootType","as","state","slots","root","slotProps","adjustPropsForRootType","ref","link","useImperativeHandle","componentRef","focus","current","RootType","target","getStyles","restProps","undefined","type"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Link\\useLink.ts"],"sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n"]},"metadata":{},"sourceType":"module"}