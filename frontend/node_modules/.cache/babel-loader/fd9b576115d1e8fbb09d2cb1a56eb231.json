{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n\n(function (ResponsiveMode) {\n  /** Width \\<= 479px */\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  /** Width \\> 479px and \\<= 639px */\n\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  /** Width \\> 639px and \\<= 1023px */\n\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  /** Width \\> 1023px and \\<= 1365px */\n\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  /** Width \\> 1365px and \\<= 1919px */\n\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  /** Width \\> 1919px */\n\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\n\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\n\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\n\n\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\n\n\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\n\nexport function initializeResponsiveMode(element) {\n  var currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  var _a;\n\n  return (_a = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;\n}\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\n\nexport function withResponsiveMode(ComposedComponent) {\n  var _a; // eslint-disable-next-line deprecation/deprecation\n\n\n  var resultClass = (_a =\n  /** @class */\n  function (_super) {\n    __extends(WithResponsiveMode, _super);\n\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n\n      this._onResize();\n    };\n\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nfunction getWidthOfCurrentWindow(currentWindow) {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\n\n\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    } // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n\n\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n\n  return responsiveMode;\n}","map":{"version":3,"mappings":"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","names":["React","BaseDecorator","getWindow","hoistStatics","EventGroup","WindowContext","ResponsiveMode","RESPONSIVE_MAX_CONSTRAINT","_defaultMode","_lastMode","setResponsiveMode","responsiveMode","initializeResponsiveMode","element","currentWindow","getResponsiveMode","getInitialResponsiveMode","_a","large","withResponsiveMode","ComposedComponent","resultClass","__extends","props","_super","_this","context","window","state","setState","_events","_updateComposedComponentRef","bind","WithResponsiveMode","on","_onResize","dispose","unknown","__assign","ref","getWidthOfCurrentWindow","document","documentElement","clientWidth","e","innerWidth","small","undefined","Error"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\decorators\\withResponsiveMode.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  /** Width \\<= 479px */\n  small = 0,\n  /** Width \\> 479px and \\<= 639px */\n  medium = 1,\n  /** Width \\> 639px and \\<= 1023px */\n  large = 2,\n  /** Width \\> 1023px and \\<= 1365px */\n  xLarge = 3,\n  /** Width \\> 1365px and \\<= 1919px */\n  xxLarge = 4,\n  /** Width \\> 1919px */\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  const currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode(): ResponsiveMode {\n  return _defaultMode ?? _lastMode ?? ResponsiveMode.large;\n}\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  // eslint-disable-next-line deprecation/deprecation\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nfunction getWidthOfCurrentWindow(currentWindow: Window): number {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"]},"metadata":{},"sourceType":"module"}