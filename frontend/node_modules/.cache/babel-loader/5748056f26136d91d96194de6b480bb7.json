{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nvar getClassNames = classNamesFunction();\n\nvar TooltipBase =\n/** @class */\nfunction (_super) {\n  __extends(TooltipBase, _super);\n\n  function TooltipBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderContent = function (props) {\n      if (typeof props.content === 'string') {\n        return React.createElement(\"p\", {\n          className: _this._classNames.subText\n        }, props.content);\n      } else {\n        return React.createElement(\"div\", {\n          className: _this._classNames.subText\n        }, props.content);\n      }\n    };\n\n    return _this;\n  }\n\n  TooltipBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        calloutProps = _a.calloutProps,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        styles = _a.styles,\n        id = _a.id,\n        maxWidth = _a.maxWidth,\n        _b = _a.onRenderContent,\n        onRenderContent = _b === void 0 ? this._onRenderContent : _b,\n        targetElement = _a.targetElement,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || calloutProps && calloutProps.className,\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth\n    });\n    return React.createElement(Callout, __assign({\n      target: targetElement,\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL\n    }, calloutProps, getNativeProps(this.props, divProperties, ['id']), {\n      className: this._classNames.root\n    }), React.createElement(\"div\", {\n      className: this._classNames.content,\n      id: id,\n      onMouseEnter: this.props.onMouseEnter,\n      onMouseLeave: this.props.onMouseLeave\n    }, onRenderContent(this.props, this._onRenderContent)));\n  }; // Specify default props values\n\n\n  TooltipBase.defaultProps = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n  return TooltipBase;\n}(React.Component);\n\nexport { TooltipBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,cAA5C,QAAkE,iBAAlE;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAIA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;;AAEA;AAAA;AAAA;EAAiCM;;EAAjC;IAAA;;IA2DUC,yBAAmB,UAACC,KAAD,EAAqB;MAC9C,IAAI,OAAOA,KAAK,CAACC,OAAb,KAAyB,QAA7B,EAAuC;QACrC,OAAOV;UAAGW,SAAS,EAAEH,KAAI,CAACI,WAAL,CAAiBC;QAA/B,GAAyCJ,KAAK,CAACC,OAA/C,CAAP;MACD,CAFD,MAEO;QACL,OAAOV;UAAKW,SAAS,EAAEH,KAAI,CAACI,WAAL,CAAiBC;QAAjC,GAA2CJ,KAAK,CAACC,OAAjD,CAAP;MACD;IACF,CANO;;;EAOT;;EAlDQI,+BAAP;IACQ,SAWF,KAAKL,KAXH;IAAA,IACJE,SAAS,eADL;IAAA,IAEJI,YAAY,kBAFR;IAAA,IAGJC,eAAe,qBAHX;IAAA,IAIJC,qBAAqB,2BAJjB;IAAA,IAKJC,MAAM,YALF;IAAA,IAMJC,EAAE,QANE;IAAA,IAOJC,QAAQ,cAPJ;IAAA,IAQJC,uBARI;IAAA,IAQJC,eAAe,mBAAG,KAAKC,gBAAR,GAAwBF,EARnC;IAAA,IASJG,aAAa,mBATT;IAAA,IAUJC,KAAK,WAVD;IAaN,KAAKb,WAAL,GAAmBN,aAAa,CAACY,MAAD,EAAU;MACxCO,KAAK,EAAEA,KADiC;MAExCd,SAAS,EAAEA,SAAS,IAAKI,YAAY,IAAIA,YAAY,CAACJ,SAFd;MAGxCe,SAAS,EAAEX,YAAY,IAAIA,YAAY,CAACW,SAHA;MAIxCC,QAAQ,EAAEZ,YAAY,IAAIA,YAAY,CAACY,QAJC;MAKxCP,QAAQ,EAAEA;IAL8B,CAAV,CAAhC;IAQA,OACEpB,oBAACI,OAAD,EAAQwB;MACNC,MAAM,EAAEL,aADF;MAENR,eAAe,EAAEA,eAFX;MAGNC,qBAAqB,EAAEA;IAHjB,GAIFF,YAJE,EAKFZ,cAAc,CAAC,KAAKM,KAAN,EAAaP,aAAb,EAA4B,CAAC,IAAD,CAA5B,CALZ,EAK+C;MACrDS,SAAS,EAAE,KAAKC,WAAL,CAAiBkB;IADyB,CAL/C,CAAR,EAQE9B;MACEW,SAAS,EAAE,KAAKC,WAAL,CAAiBF,OAD9B;MAEES,EAAE,EAAEA,EAFN;MAGEY,YAAY,EAAE,KAAKtB,KAAL,CAAWsB,YAH3B;MAIEC,YAAY,EAAE,KAAKvB,KAAL,CAAWuB;IAJ3B,GAMGV,eAAe,CAAC,KAAKb,KAAN,EAAa,KAAKc,gBAAlB,CANlB,CARF,CADF;EAmBD,CAzCM,CAhBT,CACE;;;EACcT,2BAAuC;IACnDE,eAAe,EAAEX,eAAe,CAAC4B,SADkB;IAEnDb,QAAQ,EAAE,OAFyC;IAGnDL,YAAY,EAAE;MACZmB,aAAa,EAAE,IADH;MAEZR,SAAS,EAAE,EAFC;MAGZC,QAAQ,EAAE,CAHE;MAIZQ,eAAe,EAAE,IAJL;MAKZC,UAAU,EAAE;IALA;EAHqC,CAAvC;EAgEhB;AAAC,CAlED,CAAiCpC,KAAK,CAACqC,SAAvC;;SAAavB","names":["React","classNamesFunction","divProperties","getNativeProps","Callout","DirectionalHint","getClassNames","__extends","_this","props","content","className","_classNames","subText","TooltipBase","calloutProps","directionalHint","directionalHintForRTL","styles","id","maxWidth","_b","onRenderContent","_onRenderContent","targetElement","theme","beakWidth","gapSpace","__assign","target","root","onMouseEnter","onMouseLeave","topCenter","isBeakVisible","setInitialFocus","doNotLayer","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Tooltip\\Tooltip.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    if (typeof props.content === 'string') {\n      return <p className={this._classNames.subText}>{props.content}</p>;\n    } else {\n      return <div className={this._classNames.subText}>{props.content}</div>;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}