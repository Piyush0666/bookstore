{"ast":null,"code":"var _a;\n\nimport { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nvar ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = classNamesFunction();\n\nvar getAnnouncementPriority = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n\n  return 'polite';\n};\n\nvar getRole = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n\n  return 'status';\n};\n\nexport var MessageBarBase = React.forwardRef(function (props, ref) {\n  var _a = useBoolean(false),\n      expandSingleLine = _a[0],\n      toggleExpandSingleLine = _a[1].toggle;\n\n  var labelId = useId('MessageBar');\n  var actions = props.actions,\n      className = props.className,\n      children = props.children,\n      // eslint-disable-next-line deprecation/deprecation\n  overflowButtonAriaLabel = props.overflowButtonAriaLabel,\n      dismissIconProps = props.dismissIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      _b = props.messageBarType,\n      messageBarType = _b === void 0 ? MessageBarType.info : _b,\n      _c = props.onDismiss,\n      onDismiss = _c === void 0 ? undefined : _c,\n      _d = props.isMultiline,\n      isMultiline = _d === void 0 ? true : _d,\n      truncated = props.truncated,\n      dismissButtonAriaLabel = props.dismissButtonAriaLabel,\n      messageBarIconProps = props.messageBarIconProps,\n      role = props.role,\n      _e = props.delayedRender,\n      delayedRender = _e === void 0 ? true : _e,\n      expandButtonProps = props.expandButtonProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties, ['className', 'role']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className: className\n  });\n  var expandIconProps = {\n    iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n  };\n  var regionProps = actions || onDismiss ? {\n    'aria-describedby': labelId,\n    role: 'region'\n  } : {};\n  var actionsDiv = actions ? React.createElement(\"div\", {\n    className: classNames.actions\n  }, actions) : null;\n  var dismissButton = onDismiss ? React.createElement(IconButton, {\n    disabled: false,\n    className: classNames.dismissal,\n    onClick: onDismiss,\n    iconProps: dismissIconProps ? dismissIconProps : {\n      iconName: 'Clear'\n    },\n    title: dismissButtonAriaLabel,\n    ariaLabel: dismissButtonAriaLabel\n  }) : null;\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    className: classNames.root\n  }, regionProps), React.createElement(\"div\", {\n    className: classNames.content\n  }, React.createElement(\"div\", {\n    className: classNames.iconContainer,\n    \"aria-hidden\": true\n  }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n    className: css(classNames.icon, messageBarIconProps.className)\n  })) : React.createElement(Icon, {\n    iconName: ICON_MAP[messageBarType],\n    className: classNames.icon\n  })), React.createElement(\"div\", {\n    className: classNames.text,\n    id: labelId,\n    role: role || getRole(messageBarType),\n    \"aria-live\": getAnnouncementPriority(messageBarType)\n  }, React.createElement(\"span\", __assign({\n    className: classNames.innerText\n  }, nativeProps), delayedRender ? React.createElement(DelayedRender, null, React.createElement(\"span\", null, children)) : // this span is probably not necessary, but preserving it for now in case anyone\n  // has styling that expects it to be present\n  React.createElement(\"span\", null, children))),\n  /* singleline expand/collapse button */\n  !isMultiline && !actionsDiv && truncated && React.createElement(\"div\", {\n    className: classNames.expandSingleLine\n  }, React.createElement(IconButton, __assign({\n    disabled: false,\n    className: classNames.expand,\n    onClick: toggleExpandSingleLine,\n    iconProps: expandIconProps,\n    ariaLabel: overflowButtonAriaLabel,\n    \"aria-expanded\": expandSingleLine\n  }, expandButtonProps))), !isMultiline && actionsDiv,\n  /* singleline dismiss */\n  !isMultiline && dismissButton && React.createElement(\"div\", {\n    className: classNames.dismissSingleLine\n  }, dismissButton), isMultiline && dismissButton), isMultiline && actionsDiv);\n});\nMessageBarBase.displayName = COMPONENT_NAME;","map":{"version":3,"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,cAA5C,EAA4DC,qBAA5D,EAAmFC,GAAnF,QAA8F,iBAA9F;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,uBAAlC;AAGA,IAAMC,QAAQ,aACZC,GAACJ,cAAc,CAACK,IAAhB,IAAuB,MADX,EAEZD,GAACJ,cAAc,CAACM,OAAhB,IAA0B,MAFd,EAGZF,GAACJ,cAAc,CAACO,KAAhB,IAAwB,YAHZ,EAIZH,GAACJ,cAAc,CAACQ,OAAhB,IAA0B,UAJd,EAKZJ,GAACJ,cAAc,CAACS,aAAhB,IAAgC,SALpB,EAMZL,GAACJ,cAAc,CAACU,OAAhB,IAA0B,WANd,KAAd;AASA,IAAMC,cAAc,GAAG,YAAvB;AAEA,IAAMC,aAAa,GAAGlB,kBAAkB,EAAxC;;AAEA,IAAMmB,uBAAuB,GAAG,UAACC,cAAD,EAA+B;EAC7D,QAAQA,cAAR;IACE,KAAKd,cAAc,CAACQ,OAApB;IACA,KAAKR,cAAc,CAACO,KAApB;IACA,KAAKP,cAAc,CAACS,aAApB;MACE,OAAO,WAAP;EAJJ;;EAMA,OAAO,QAAP;AACD,CARD;;AAUA,IAAMM,OAAO,GAAG,UAACD,cAAD,EAA+B;EAC7C,QAAQA,cAAR;IACE,KAAKd,cAAc,CAACQ,OAApB;IACA,KAAKR,cAAc,CAACO,KAApB;IACA,KAAKP,cAAc,CAACS,aAApB;MACE,OAAO,OAAP;EAJJ;;EAMA,OAAO,QAAP;AACD,CARD;;AAUA,OAAO,IAAMO,cAAc,GAA8CxB,KAAK,CAACyB,UAAN,CAGvE,UAACC,KAAD,EAAQC,GAAR,EAAW;EACL,SAAyDjB,UAAU,CAAC,KAAD,CAAnE;EAAA,IAACkB,gBAAgB,QAAjB;EAAA,IAA6BC,sBAAsB,eAAnD;;EACN,IAAMC,OAAO,GAAGrB,KAAK,CAAC,YAAD,CAArB;EAGE,WAAO,GAiBLiB,KAAK,QAjBP;EAAA,IACAK,SAAS,GAgBPL,KAAK,UAjBP;EAAA,IAEAM,QAAQ,GAeNN,KAAK,SAjBP;EAAA,IAGA;EACAO,uBAAuB,GAarBP,KAAK,wBAjBP;EAAA,IAKAQ,gBAAgB,GAYdR,KAAK,iBAjBP;EAAA,IAMAS,MAAM,GAWJT,KAAK,OAjBP;EAAA,IAOAU,KAAK,GAUHV,KAAK,MAjBP;EAAA,IAQAW,KASEX,KAAK,eAjBP;EAAA,IAQAJ,cAAc,mBAAGd,cAAc,CAACK,IAAlB,GAAsBwB,EARpC;EAAA,IASAC,KAQEZ,KAAK,UAjBP;EAAA,IASAa,SAAS,mBAAGC,SAAH,GAAYF,EATrB;EAAA,IAUAG,KAOEf,KAAK,YAjBP;EAAA,IAUAgB,WAAW,mBAAG,IAAH,GAAOD,EAVlB;EAAA,IAWAE,SAAS,GAMPjB,KAAK,UAjBP;EAAA,IAYAkB,sBAAsB,GAKpBlB,KAAK,uBAjBP;EAAA,IAaAmB,mBAAmB,GAIjBnB,KAAK,oBAjBP;EAAA,IAcAoB,IAAI,GAGFpB,KAAK,KAjBP;EAAA,IAeAqB,KAEErB,KAAK,cAjBP;EAAA,IAeAsB,aAAa,mBAAG,IAAH,GAAOD,EAfpB;EAAA,IAgBAE,iBAAiB,GACfvB,KAAK,kBAjBP;EAmBF,IAAMwB,WAAW,GAAG/C,cAAc,CAAwCuB,KAAxC,EAA+CtB,qBAA/C,EAAsE,CACtG,WADsG,EAEtG,MAFsG,CAAtE,CAAlC;EAKA,IAAM+C,UAAU,GAAiD/B,aAAa,CAACe,MAAD,EAAS;IACrFC,KAAK,EAAEA,KAD8E;IAErFd,cAAc,EAAEA,cAAc,IAAId,cAAc,CAACK,IAFoC;IAGrF0B,SAAS,EAAEA,SAAS,KAAKC,SAH4D;IAIrFY,OAAO,EAAEA,OAAO,KAAKZ,SAJgE;IAKrFG,SAAS,EAAEA,SAL0E;IAMrFD,WAAW,EAAEA,WANwE;IAOrFd,gBAAgB,EAAEA,gBAPmE;IAQrFG,SAAS;EAR4E,CAAT,CAA9E;EAWA,IAAMsB,eAAe,GAAG;IAAEC,QAAQ,EAAE1B,gBAAgB,GAAG,iBAAH,GAAuB;EAAnD,CAAxB;EACA,IAAM2B,WAAW,GAAGH,OAAO,IAAIb,SAAX,GAAuB;IAAE,oBAAoBT,OAAtB;IAA+BgB,IAAI,EAAE;EAArC,CAAvB,GAAyE,EAA7F;EACA,IAAMU,UAAU,GAAGJ,OAAO,GAAGpD;IAAK+B,SAAS,EAAEoB,UAAU,CAACC;EAA3B,GAAqCA,OAArC,CAAH,GAAyD,IAAnF;EAEA,IAAMK,aAAa,GAAGlB,SAAS,GAC7BvC,oBAACM,UAAD,EAAW;IACToD,QAAQ,EAAE,KADD;IAET3B,SAAS,EAAEoB,UAAU,CAACQ,SAFb;IAGTC,OAAO,EAAErB,SAHA;IAITsB,SAAS,EAAE3B,gBAAgB,GAAGA,gBAAH,GAAsB;MAAEoB,QAAQ,EAAE;IAAZ,CAJxC;IAKTQ,KAAK,EAAElB,sBALE;IAMTmB,SAAS,EAAEnB;EANF,CAAX,CAD6B,GAS3B,IATJ;EAWA,OACE5C;IAAK2B,GAAG,EAAEA,GAAV;IAAeI,SAAS,EAAEoB,UAAU,CAACa;EAArC,GAA+CT,WAA/C,GACEvD;IAAK+B,SAAS,EAAEoB,UAAU,CAACc;EAA3B,GACEjE;IAAK+B,SAAS,EAAEoB,UAAU,CAACe,aAA3B;IAAwC;EAAxC,GACGrB,mBAAmB,GAClB7C,oBAACO,IAAD,EAAK4D,aAAKtB,mBAAL,EAAwB;IAAEd,SAAS,EAAE1B,GAAG,CAAC8C,UAAU,CAACiB,IAAZ,EAAkBvB,mBAAmB,CAACd,SAAtC;EAAhB,CAAxB,CAAL,CADkB,GAGlB/B,oBAACO,IAAD,EAAK;IAAC+C,QAAQ,EAAE3C,QAAQ,CAACW,cAAD,CAAnB;IAAsCS,SAAS,EAAEoB,UAAU,CAACiB;EAA5D,CAAL,CAJJ,CADF,EAQEpE;IACE+B,SAAS,EAAEoB,UAAU,CAACkB,IADxB;IAEEC,EAAE,EAAExC,OAFN;IAGEgB,IAAI,EAAEA,IAAI,IAAIvB,OAAO,CAACD,cAAD,CAHvB;IAGuC,aAC1BD,uBAAuB,CAACC,cAAD;EAJpC,GAMEtB;IAAM+B,SAAS,EAAEoB,UAAU,CAACoB;EAA5B,GAA2CrB,WAA3C,GACGF,aAAa,GACZhD,oBAACC,aAAD,EAAc,IAAd,EACED,kCAAOgC,QAAP,CADF,CADY,GAKZ;EACA;EACAhC,kCAAOgC,QAAP,CARJ,CANF,CARF;EA2BI;EAAwC,CAACU,WAAD,IAAgB,CAACc,UAAjB,IAA+Bb,SAA/B,IACtC3C;IAAK+B,SAAS,EAAEoB,UAAU,CAACvB;EAA3B,GACE5B,oBAACM,UAAD,EAAW6D;IACTT,QAAQ,EAAE,KADD;IAET3B,SAAS,EAAEoB,UAAU,CAACqB,MAFb;IAGTZ,OAAO,EAAE/B,sBAHA;IAITgC,SAAS,EAAER,eAJF;IAKTU,SAAS,EAAE9B,uBALF;IAKyB,iBACnBL;EANN,GAOLqB,iBAPK,CAAX,CADF,CA5BN,EAyC4B,CAACP,WAAD,IAAgBc,UAzC5C;EA2CI;EAAyB,CAACd,WAAD,IAAgBe,aAAhB,IACvBzD;IAAK+B,SAAS,EAAEoB,UAAU,CAACsB;EAA3B,GAA+ChB,aAA/C,CA5CN,EA+C2Bf,WAAW,IAAIe,aA/C1C,CADF,EAkD2Bf,WAAW,IAAIc,UAlD1C,CADF;AAsDD,CAhHwE,CAAlE;AAiHPhC,cAAc,CAACkD,WAAf,GAA6BvD,cAA7B","names":["React","DelayedRender","classNamesFunction","getNativeProps","htmlElementProperties","css","IconButton","Icon","MessageBarType","useId","useBoolean","ICON_MAP","_a","info","warning","error","blocked","severeWarning","success","COMPONENT_NAME","getClassNames","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","forwardRef","props","ref","expandSingleLine","toggleExpandSingleLine","labelId","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","_b","_c","onDismiss","undefined","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","classNames","actions","expandIconProps","iconName","regionProps","actionsDiv","dismissButton","disabled","dismissal","onClick","iconProps","title","ariaLabel","root","content","iconContainer","__assign","icon","text","id","innerText","expand","dismissSingleLine","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\MessageBar\\MessageBar.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}