{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { find, isElementVisibleAndNotHidden, values } from '../../Utilities';\nimport { ktpTargetFromSequences, mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\n\nvar KeytipTree =\n/** @class */\nfunction () {\n  /**\n   * KeytipTree constructor\n   */\n  function KeytipTree() {\n    this.nodeMap = {}; // Root has no keytipSequence\n\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: []\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n\n\n  KeytipTree.prototype.addNode = function (keytipProps, uniqueID, persisted) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence); // Create node and add to map\n\n\n    var node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n\n    this.nodeMap[uniqueID] = node; // Try to add self to parents children\n\n    var parents = this.getNodes([parentID]);\n    parents.forEach(function (parent) {\n      return parent.children.push(nodeID);\n    });\n  };\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n\n\n  KeytipTree.prototype.updateNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence);\n\n    var node = this.nodeMap[uniqueID];\n    var prevParent = node.parent;\n\n    if (node) {\n      // Fix parent nodes if needed\n      if (prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        this._removeChildFromParents(prevParent, node.id);\n      }\n\n      if (node.id !== nodeID) {\n        // If the ID of the node has changed, update node's parent's array of children with new ID\n        var parents = this.getNodes([parentID]);\n        parents.forEach(function (parent) {\n          var index = parent.children.indexOf(node.id);\n          index >= 0 ? parent.children[index] = nodeID : parent.children.push(nodeID);\n        });\n      } // Update values\n\n\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  };\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n\n\n  KeytipTree.prototype.removeNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last sequence to calculate the parent ID\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    this._removeChildFromParents(this._getParentID(fullSequence), nodeID);\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  };\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n\n\n  KeytipTree.prototype.getExactMatchedNode = function (keySequence, currentKeytip) {\n    var _this = this;\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    var matchingNodes = possibleNodes.filter(function (node) {\n      return _this._getNodeSequence(node) === keySequence && !node.disabled;\n    }); // If we found no nodes, we are done\n\n    if (matchingNodes.length === 0) {\n      return undefined;\n    } // Since the matching nodes all have the same key sequence,\n    // Grab the first one build the correct selector\n\n\n    var node = matchingNodes[0]; // If we have exactly one node, return it\n\n    if (matchingNodes.length === 1) {\n      return node;\n    } // Get the potential target elements based on a selector from the sequences\n\n\n    var keySequences = node.keySequences;\n    var overflowSetSequence = node.overflowSetSequence;\n    var fullKeySequences = overflowSetSequence ? mergeOverflows(keySequences, overflowSetSequence) : keySequences;\n    var keytipTargetSelector = ktpTargetFromSequences(fullKeySequences);\n    var potentialTargetElements = document.querySelectorAll(keytipTargetSelector); // If we have less nodes than the potential target elements,\n    // we won't be able to map element to node, return the first node.\n    // Note, the number of nodes could be more than the number of potential\n    // target elements, if an OverflowSet is involved\n\n    if (matchingNodes.length < potentialTargetElements.length) {\n      return node;\n    } // Attempt to find the node that corresponds to the first visible/non-hidden element\n\n\n    var matchingIndex = Array.from(potentialTargetElements).findIndex(function (element) {\n      return isElementVisibleAndNotHidden(element);\n    });\n\n    if (matchingIndex !== -1) {\n      return matchingNodes[matchingIndex];\n    } // We did not find any visible elements associated with any of the nodes.\n    // We may be dealing with a keytip that is a submenu in an OverflowSet.\n    // Worst case, fall back to the first node returned\n\n\n    var overflowNode = matchingNodes.find(function (matchingNode) {\n      return matchingNode.hasOverflowSubMenu;\n    });\n    return overflowNode || node;\n  };\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n\n\n  KeytipTree.prototype.getPartiallyMatchedNodes = function (keySequence, currentKeytip) {\n    var _this = this; // Get children that are persisted\n\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter(function (node) {\n      return _this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  };\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n\n\n  KeytipTree.prototype.getChildren = function (node) {\n    var _this = this;\n\n    if (!node) {\n      node = this.currentKeytip;\n\n      if (!node) {\n        return [];\n      }\n    }\n\n    var children = node.children;\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (children.indexOf(_this.nodeMap[key].id) >= 0 && !_this.nodeMap[key].persisted) {\n        nodes.push(_this.nodeMap[key].id);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n\n\n  KeytipTree.prototype.getNodes = function (ids) {\n    var _this = this;\n\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (ids.indexOf(_this.nodeMap[key].id) >= 0) {\n        nodes.push(_this.nodeMap[key]);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n\n\n  KeytipTree.prototype.getNode = function (id) {\n    var nodeMapValues = values(this.nodeMap);\n    return find(nodeMapValues, function (node) {\n      return node.id === id;\n    });\n  };\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n\n\n  KeytipTree.prototype.isCurrentKeytipParent = function (keytipProps) {\n    if (this.currentKeytip) {\n      var fullSequence = __spreadArray([], keytipProps.keySequences);\n\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      } // Take off the last sequence to calculate the parent ID\n\n\n      fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n      var parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      var matchesCurrWithoutOverflow = false;\n\n      if (this.currentKeytip.overflowSetSequence) {\n        var currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n\n    return false;\n  };\n\n  KeytipTree.prototype._getParentID = function (fullSequence) {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  };\n\n  KeytipTree.prototype._getFullSequence = function (keytipProps) {\n    var fullSequence = __spreadArray([], keytipProps.keySequences);\n\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n\n    return fullSequence;\n  };\n\n  KeytipTree.prototype._getNodeSequence = function (node) {\n    var fullSequence = __spreadArray([], node.keySequences);\n\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n\n    return fullSequence[fullSequence.length - 1];\n  };\n\n  KeytipTree.prototype._createNode = function (id, parentId, children, keytipProps, persisted) {\n    var _this = this;\n\n    var keySequences = keytipProps.keySequences,\n        hasDynamicChildren = keytipProps.hasDynamicChildren,\n        overflowSetSequence = keytipProps.overflowSetSequence,\n        hasMenu = keytipProps.hasMenu,\n        onExecute = keytipProps.onExecute,\n        onReturn = keytipProps.onReturn,\n        disabled = keytipProps.disabled,\n        hasOverflowSubMenu = keytipProps.hasOverflowSubMenu;\n    var node = {\n      id: id,\n      keySequences: keySequences,\n      overflowSetSequence: overflowSetSequence,\n      parent: parentId,\n      children: children,\n      onExecute: onExecute,\n      onReturn: onReturn,\n      hasDynamicChildren: hasDynamicChildren,\n      hasMenu: hasMenu,\n      disabled: disabled,\n      persisted: persisted,\n      hasOverflowSubMenu: hasOverflowSubMenu\n    };\n    node.children = Object.keys(this.nodeMap).reduce(function (array, nodeMapKey) {\n      if (_this.nodeMap[nodeMapKey].parent === id) {\n        array.push(_this.nodeMap[nodeMapKey].id);\n      }\n\n      return array;\n    }, []);\n    return node;\n  };\n\n  KeytipTree.prototype._removeChildFromParents = function (parentID, childID) {\n    var parents = this.getNodes([parentID]);\n    parents.forEach(function (parent) {\n      var childIndex = parent.children.indexOf(childID);\n\n      if (childIndex >= 0) {\n        parent.children.splice(childIndex, 1);\n      }\n    });\n  };\n\n  return KeytipTree;\n}();\n\nexport { KeytipTree };","map":{"version":3,"mappings":"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","names":["find","isElementVisibleAndNotHidden","values","ktpTargetFromSequences","mergeOverflows","sequencesToID","KTP_LAYER_ID","root","id","children","parent","keySequences","nodeMap","KeytipTree","keytipProps","uniqueID","persisted","fullSequence","_getFullSequence","nodeID","pop","parentID","_getParentID","node","_createNode","parents","getNodes","forEach","push","prevParent","_removeChildFromParents","index","indexOf","overflowSetSequence","onExecute","onReturn","hasDynamicChildren","hasMenu","disabled","keySequence","currentKeytip","possibleNodes","matchingNodes","filter","_this","_getNodeSequence","length","undefined","fullKeySequences","keytipTargetSelector","potentialTargetElements","document","querySelectorAll","matchingIndex","Array","from","findIndex","element","overflowNode","hasOverflowSubMenu","Object","keys","reduce","nodes","key","ids","nodeMapValues","matchesCurrWithoutOverflow","currKeytipIdWithoutOverflow","parentId","array","nodeMapKey","childID","childIndex","splice"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\KeytipLayer\\KeytipTree.ts"],"sourcesContent":["import { find, isElementVisibleAndNotHidden, values } from '../../Utilities';\nimport { ktpTargetFromSequences, mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\n\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\nexport class KeytipTree {\n  public currentKeytip?: IKeytipTreeNode;\n  public root: IKeytipTreeNode;\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\n\n  /**\n   * KeytipTree constructor\n   */\n  constructor() {\n    // Root has no keytipSequence\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: [],\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n\n    // Create node and add to map\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n    this.nodeMap[uniqueID] = node;\n\n    // Try to add self to parents children\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => parent.children.push(nodeID));\n  }\n\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const node = this.nodeMap[uniqueID];\n    const prevParent = node.parent;\n    if (node) {\n      // Fix parent nodes if needed\n      if (prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        this._removeChildFromParents(prevParent, node.id);\n      }\n      if (node.id !== nodeID) {\n        // If the ID of the node has changed, update node's parent's array of children with new ID\n        const parents = this.getNodes([parentID]);\n        parents.forEach(parent => {\n          const index = parent.children.indexOf(node.id);\n          index >= 0 ? (parent.children[index] = nodeID) : parent.children.push(nodeID);\n        });\n      }\n\n      // Update values\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  }\n\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last sequence to calculate the parent ID\n    fullSequence.pop();\n\n    // Parent ID is the root if there aren't any more sequences\n    this._removeChildFromParents(this._getParentID(fullSequence), nodeID);\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  }\n\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    const matchingNodes = possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n\n    // If we found no nodes, we are done\n    if (matchingNodes.length === 0) {\n      return undefined;\n    }\n\n    // Since the matching nodes all have the same key sequence,\n    // Grab the first one build the correct selector\n    const node = matchingNodes[0];\n\n    // If we have exactly one node, return it\n    if (matchingNodes.length === 1) {\n      return node;\n    }\n\n    // Get the potential target elements based on a selector from the sequences\n    const keySequences = node.keySequences;\n    const overflowSetSequence = node.overflowSetSequence;\n    const fullKeySequences = overflowSetSequence ? mergeOverflows(keySequences, overflowSetSequence) : keySequences;\n    const keytipTargetSelector = ktpTargetFromSequences(fullKeySequences);\n    const potentialTargetElements = document.querySelectorAll(keytipTargetSelector);\n\n    // If we have less nodes than the potential target elements,\n    // we won't be able to map element to node, return the first node.\n    // Note, the number of nodes could be more than the number of potential\n    // target elements, if an OverflowSet is involved\n    if (matchingNodes.length < potentialTargetElements.length) {\n      return node;\n    }\n\n    // Attempt to find the node that corresponds to the first visible/non-hidden element\n    const matchingIndex = Array.from(potentialTargetElements).findIndex((element: HTMLElement) =>\n      isElementVisibleAndNotHidden(element),\n    );\n    if (matchingIndex !== -1) {\n      return matchingNodes[matchingIndex];\n    }\n\n    // We did not find any visible elements associated with any of the nodes.\n    // We may be dealing with a keytip that is a submenu in an OverflowSet.\n    // Worst case, fall back to the first node returned\n    const overflowNode = matchingNodes.find(matchingNode => matchingNode.hasOverflowSubMenu);\n    return overflowNode || node;\n  }\n\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\n    // Get children that are persisted\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  }\n\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n  public getChildren(node?: IKeytipTreeNode): string[] {\n    if (!node) {\n      node = this.currentKeytip;\n      if (!node) {\n        return [];\n      }\n    }\n    const children = node.children;\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\n        nodes.push(this.nodeMap[key].id);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\n        nodes.push(this.nodeMap[key]);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n  public getNode(id: string): IKeytipTreeNode | undefined {\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\n    return find(nodeMapValues, (node: IKeytipTreeNode): boolean => {\n      return node.id === id;\n    });\n  }\n\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\n    if (this.currentKeytip) {\n      let fullSequence = [...keytipProps.keySequences];\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      }\n      // Take off the last sequence to calculate the parent ID\n      fullSequence.pop();\n      // Parent ID is the root if there aren't any more sequences\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      let matchesCurrWithoutOverflow = false;\n      if (this.currentKeytip.overflowSetSequence) {\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n    return false;\n  }\n\n  private _getParentID(fullSequence: string[]): string {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  }\n\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\n    let fullSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n    return fullSequence;\n  }\n\n  private _getNodeSequence(node: IKeytipTreeNode): string {\n    let fullSequence = [...node.keySequences];\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n    return fullSequence[fullSequence.length - 1];\n  }\n\n  private _createNode(\n    id: string,\n    parentId: string,\n    children: string[],\n    keytipProps: IKeytipProps,\n    persisted?: boolean,\n  ): IKeytipTreeNode {\n    const {\n      keySequences,\n      hasDynamicChildren,\n      overflowSetSequence,\n      hasMenu,\n      onExecute,\n      onReturn,\n      disabled,\n      hasOverflowSubMenu,\n    } = keytipProps;\n    const node = {\n      id,\n      keySequences,\n      overflowSetSequence,\n      parent: parentId,\n      children,\n      onExecute,\n      onReturn,\n      hasDynamicChildren,\n      hasMenu,\n      disabled,\n      persisted,\n      hasOverflowSubMenu,\n    };\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\n      if (this.nodeMap[nodeMapKey].parent === id) {\n        array.push(this.nodeMap[nodeMapKey].id);\n      }\n      return array;\n    }, []);\n    return node;\n  }\n\n  private _removeChildFromParents(parentID: string, childID: string): void {\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => {\n      const childIndex = parent.children.indexOf(childID);\n      if (childIndex >= 0) {\n        parent.children.splice(childIndex, 1);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}