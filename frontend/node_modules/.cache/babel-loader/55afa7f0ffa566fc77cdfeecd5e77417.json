{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@fluentui/utilities';\nimport { DocumentCardContext } from './DocumentCard.base';\nvar getClassNames = classNamesFunction();\nvar TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardTitleBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardTitleBase, _super);\n\n  function DocumentCardTitleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._titleElement = React.createRef(); // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n    // Let _shrinkTitle take care of that.\n\n    _this._truncateTitle = function () {\n      if (!_this._needMeasurement) {\n        return;\n      }\n\n      _this._async.requestAnimationFrame(_this._truncateWhenInAnimation);\n    };\n\n    _this._truncateWhenInAnimation = function () {\n      var originalTitle = _this.props.title;\n      var element = _this._titleElement.current;\n\n      if (element) {\n        var style = getComputedStyle(element);\n\n        if (style.width && style.lineHeight && style.height) {\n          var clientWidth = element.clientWidth,\n              scrollWidth = element.scrollWidth;\n          _this._clientWidth = clientWidth;\n          var lines = Math.floor((parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10));\n          element.style.whiteSpace = ''; // Use overflow to predict truncated length.\n          // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n          // if container is like\n          // |A text with A very| long text that need to be truncated.ppt\n          // The scroll width is 58, (take two | out of length)\n          // The client width is 18\n          // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n          // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n          // So that the logic can predict truncated text well.\n          // first piece will be `A text `, * second piece will be `ated.ppt`\n          // |A text ...ated.ppt|\n\n          var overFlowRate = scrollWidth / (parseInt(style.width, 10) * lines);\n\n          if (overFlowRate > 1) {\n            var truncatedLength = originalTitle.length / overFlowRate - 3;\n            /** Saved for separator */\n\n            return _this.setState({\n              truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n              truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2)\n            });\n          }\n        }\n      }\n    };\n\n    _this._shrinkTitle = function () {\n      var _a = _this.state,\n          truncatedTitleFirstPiece = _a.truncatedTitleFirstPiece,\n          truncatedTitleSecondPiece = _a.truncatedTitleSecondPiece;\n\n      if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n        var titleElement = _this._titleElement.current;\n\n        if (!titleElement) {\n          return;\n        }\n\n        if (titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD || titleElement.scrollWidth > titleElement.clientWidth) {\n          _this.setState({\n            truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n            truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1)\n          });\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._clientWidth = undefined;\n    _this.state = {\n      truncatedTitleFirstPiece: undefined,\n      truncatedTitleSecondPiece: undefined\n    };\n    return _this;\n  }\n\n  DocumentCardTitleBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    if (this.props.title !== prevProps.title) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined\n      });\n    }\n\n    if (prevProps.shouldTruncate !== this.props.shouldTruncate) {\n      if (this.props.shouldTruncate) {\n        this._truncateTitle();\n\n        this._async.requestAnimationFrame(this._shrinkTitle);\n\n        this._events.on(window, 'resize', this._updateTruncation);\n      } else {\n        this._events.off(window, 'resize', this._updateTruncation);\n      }\n    } else if (this._needMeasurement) {\n      this._async.requestAnimationFrame(function () {\n        _this._truncateWhenInAnimation();\n\n        _this._shrinkTitle();\n      });\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentDidMount = function () {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    this._async.dispose();\n  };\n\n  DocumentCardTitleBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        title = _a.title,\n        shouldTruncate = _a.shouldTruncate,\n        showAsSecondaryTitle = _a.showAsSecondaryTitle,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var _b = this.state,\n        truncatedTitleFirstPiece = _b.truncatedTitleFirstPiece,\n        truncatedTitleSecondPiece = _b.truncatedTitleSecondPiece;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      showAsSecondaryTitle: showAsSecondaryTitle\n    });\n\n    if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      return React.createElement(DocumentCardContext.Consumer, null, function (_a) {\n        var role = _a.role,\n            tabIndex = _a.tabIndex;\n        return React.createElement(\"div\", {\n          className: _this._classNames.root,\n          ref: _this._titleElement,\n          title: title,\n          tabIndex: tabIndex,\n          role: role\n        }, truncatedTitleFirstPiece, \"\\u2026\", truncatedTitleSecondPiece);\n      });\n    } else {\n      return React.createElement(DocumentCardContext.Consumer, null, function (_a) {\n        var role = _a.role,\n            tabIndex = _a.tabIndex;\n        return React.createElement(\"div\", {\n          className: _this._classNames.root,\n          ref: _this._titleElement,\n          title: title,\n          tabIndex: tabIndex,\n          role: role,\n          style: _this._needMeasurement ? {\n            whiteSpace: 'nowrap'\n          } : undefined\n        }, title);\n      });\n    }\n  };\n\n  Object.defineProperty(DocumentCardTitleBase.prototype, \"_needMeasurement\", {\n    /**\n     * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n     * So that the logic can predict truncated text well.\n     */\n    get: function () {\n      return !!this.props.shouldTruncate && this._clientWidth === undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DocumentCardTitleBase.prototype._updateTruncation = function () {\n    var _this = this;\n\n    if (this._timerId) {\n      return;\n    }\n\n    this._timerId = this._async.setTimeout(function () {\n      delete _this._timerId;\n      _this._clientWidth = undefined;\n\n      _this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined\n      });\n    }, 250);\n  };\n\n  return DocumentCardTitleBase;\n}(React.Component);\n\nexport { DocumentCardTitleBase };","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","classNamesFunction","initializeComponentRef","DocumentCardContext","getClassNames","TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD","__extends","props","_super","_this","createRef","_needMeasurement","_async","requestAnimationFrame","_truncateWhenInAnimation","originalTitle","title","element","_titleElement","current","style","getComputedStyle","width","lineHeight","height","scrollWidth","_clientWidth","clientWidth","lines","Math","floor","parseInt","whiteSpace","overFlowRate","truncatedLength","length","setState","truncatedTitleFirstPiece","slice","truncatedTitleSecondPiece","state","titleElement","scrollHeight","clientHeight","_events","undefined","DocumentCardTitleBase","prevProps","shouldTruncate","_truncateTitle","_shrinkTitle","on","window","_updateTruncation","off","dispose","showAsSecondaryTitle","styles","theme","className","_classNames","Consumer","_a","role","tabIndex","root","ref","Object","_timerId","setTimeout","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\DocumentCard\\DocumentCardTitle.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@fluentui/utilities';\nimport type {\n  IDocumentCardTitleProps,\n  IDocumentCardTitleStyleProps,\n  IDocumentCardTitleStyles,\n} from './DocumentCardTitle.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { DocumentCardContext } from './DocumentCard.base';\n\nconst getClassNames = classNamesFunction<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>();\n\nexport interface IDocumentCardTitleState {\n  truncatedTitleFirstPiece?: string;\n  truncatedTitleSecondPiece?: string;\n}\n\nconst TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\n  private _titleElement = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IDocumentCardTitleStyles>;\n  private _async: Async;\n  private _events: EventGroup;\n  private _clientWidth: number | undefined;\n  private _timerId: number | undefined;\n\n  constructor(props: IDocumentCardTitleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._clientWidth = undefined;\n\n    this.state = {\n      truncatedTitleFirstPiece: undefined,\n      truncatedTitleSecondPiece: undefined,\n    };\n  }\n\n  public componentDidUpdate(prevProps: IDocumentCardTitleProps): void {\n    if (this.props.title !== prevProps.title) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n      });\n    }\n\n    if (prevProps.shouldTruncate !== this.props.shouldTruncate) {\n      if (this.props.shouldTruncate) {\n        this._truncateTitle();\n        this._async.requestAnimationFrame(this._shrinkTitle);\n        this._events.on(window, 'resize', this._updateTruncation);\n      } else {\n        this._events.off(window, 'resize', this._updateTruncation);\n      }\n    } else if (this._needMeasurement) {\n      this._async.requestAnimationFrame(() => {\n        this._truncateWhenInAnimation();\n        this._shrinkTitle();\n      });\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { title, shouldTruncate, showAsSecondaryTitle, styles, theme, className } = this.props;\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      showAsSecondaryTitle,\n    });\n\n    if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      return (\n        <DocumentCardContext.Consumer>\n          {({ role, tabIndex }) => {\n            return (\n              <div\n                className={this._classNames.root}\n                ref={this._titleElement}\n                title={title}\n                tabIndex={tabIndex}\n                role={role}\n              >\n                {truncatedTitleFirstPiece}\n                &hellip;\n                {truncatedTitleSecondPiece}\n              </div>\n            );\n          }}\n        </DocumentCardContext.Consumer>\n      );\n    } else {\n      return (\n        <DocumentCardContext.Consumer>\n          {({ role, tabIndex }) => {\n            return (\n              <div\n                className={this._classNames.root}\n                ref={this._titleElement}\n                title={title}\n                tabIndex={tabIndex}\n                role={role}\n                style={this._needMeasurement ? { whiteSpace: 'nowrap' } : undefined}\n              >\n                {title}\n              </div>\n            );\n          }}\n        </DocumentCardContext.Consumer>\n      );\n    }\n  }\n\n  /**\n   * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n   * So that the logic can predict truncated text well.\n   */\n  private get _needMeasurement(): boolean {\n    return !!this.props.shouldTruncate && this._clientWidth === undefined;\n  }\n\n  // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n  // Let _shrinkTitle take care of that.\n  private _truncateTitle = (): void => {\n    if (!this._needMeasurement) {\n      return;\n    }\n\n    this._async.requestAnimationFrame(this._truncateWhenInAnimation);\n  };\n\n  private _truncateWhenInAnimation: () => void = () => {\n    const originalTitle = this.props.title;\n    const element: HTMLDivElement | null = this._titleElement.current;\n\n    if (element) {\n      const style: CSSStyleDeclaration = getComputedStyle(element);\n      if (style.width && style.lineHeight && style.height) {\n        const { clientWidth, scrollWidth } = element;\n\n        this._clientWidth = clientWidth;\n\n        const lines: number = Math.floor(\n          (parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10),\n        );\n\n        element.style.whiteSpace = '';\n\n        // Use overflow to predict truncated length.\n        // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n        // if container is like\n        // |A text with A very| long text that need to be truncated.ppt\n        // The scroll width is 58, (take two | out of length)\n        // The client width is 18\n        // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n        // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n        // So that the logic can predict truncated text well.\n        // first piece will be `A text `, * second piece will be `ated.ppt`\n        // |A text ...ated.ppt|\n        const overFlowRate: number = scrollWidth / (parseInt(style.width, 10) * lines);\n\n        if (overFlowRate > 1) {\n          const truncatedLength: number = originalTitle.length / overFlowRate - 3; /** Saved for separator */\n          return this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n          });\n        }\n      }\n    }\n  };\n\n  private _shrinkTitle: () => void = () => {\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n    if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      const titleElement = this._titleElement.current;\n\n      if (!titleElement) {\n        return;\n      }\n\n      if (\n        titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD ||\n        titleElement.scrollWidth > titleElement.clientWidth\n      ) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1),\n        });\n      }\n    }\n  };\n\n  private _updateTruncation(): void {\n    if (this._timerId) {\n      return;\n    }\n\n    this._timerId = this._async.setTimeout(() => {\n      delete this._timerId;\n      this._clientWidth = undefined;\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n      });\n    }, 250);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}