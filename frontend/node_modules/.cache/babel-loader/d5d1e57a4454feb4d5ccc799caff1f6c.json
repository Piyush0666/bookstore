{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\nexport var ToggleBase = React.forwardRef(function (props, forwardedRef) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      ariaLabel = props.ariaLabel,\n      controlledChecked = props.checked,\n      className = props.className,\n      _b = props.defaultChecked,\n      defaultChecked = _b === void 0 ? false : _b,\n      disabled = props.disabled,\n      inlineLabel = props.inlineLabel,\n      label = props.label,\n      // eslint-disable-next-line deprecation/deprecation\n  offAriaLabel = props.offAriaLabel,\n      offText = props.offText,\n      // eslint-disable-next-line deprecation/deprecation\n  onAriaLabel = props.onAriaLabel,\n      onChange = props.onChange,\n      // eslint-disable-next-line deprecation/deprecation\n  onChanged = props.onChanged,\n      onToggleClick = props.onClick,\n      onText = props.onText,\n      role = props.role,\n      styles = props.styles,\n      theme = props.theme;\n\n  var _c = useControllableValue(controlledChecked, defaultChecked, React.useCallback(function (ev, isChecked) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, isChecked);\n    onChanged === null || onChanged === void 0 ? void 0 : onChanged(isChecked);\n  }, [onChange, onChanged])),\n      checked = _c[0],\n      setChecked = _c[1];\n\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    checked: checked,\n    inlineLabel: inlineLabel,\n    onOffMissing: !onText && !offText\n  });\n  var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n  var id = useId(COMPONENT_NAME, props.id);\n  var labelId = id + \"-label\";\n  var stateTextId = id + \"-stateText\";\n  var stateText = checked ? onText : offText;\n  var toggleNativeProps = getNativeProps(props, inputProperties, ['defaultChecked']); // The following properties take priority for what Narrator should read:\n  // 1. ariaLabel\n  // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n  // 3. label, if existent\n\n  var labelledById = undefined;\n\n  if (!ariaLabel && !badAriaLabel) {\n    if (label) {\n      labelledById = labelId;\n    }\n\n    if (stateText && !labelledById) {\n      labelledById = stateTextId;\n    }\n  }\n\n  var toggleButton = React.useRef(null);\n  useFocusRects(toggleButton);\n  useComponentRef(props, checked, toggleButton);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        offAriaLabel: undefined,\n        onAriaLabel: 'ariaLabel',\n        onChanged: 'onChange'\n      },\n      mutuallyExclusive: {\n        checked: 'defaultChecked'\n      }\n    });\n  }\n\n  var onClick = function (ev) {\n    if (!disabled) {\n      setChecked(!checked, ev);\n\n      if (onToggleClick) {\n        onToggleClick(ev);\n      }\n    }\n  };\n\n  var slotProps = {\n    root: {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    },\n    label: {\n      children: label,\n      className: classNames.label,\n      htmlFor: id,\n      id: labelId\n    },\n    container: {\n      className: classNames.container\n    },\n    pill: __assign(__assign({}, toggleNativeProps), {\n      'aria-disabled': disabled,\n      'aria-checked': checked,\n      'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n      'aria-labelledby': labelledById,\n      className: classNames.pill,\n      'data-is-focusable': true,\n      'data-ktp-target': true,\n      disabled: disabled,\n      id: id,\n      onClick: onClick,\n      ref: toggleButton,\n      role: role ? role : 'switch',\n      type: 'button'\n    }),\n    thumb: {\n      className: classNames.thumb\n    },\n    stateText: {\n      children: stateText,\n      className: classNames.text,\n      htmlFor: id,\n      id: stateTextId\n    }\n  };\n  return React.createElement(RootType, __assign({\n    ref: forwardedRef\n  }, slotProps.root), label && React.createElement(Label, __assign({}, slotProps.label)), React.createElement(\"div\", __assign({}, slotProps.container), React.createElement(\"button\", __assign({}, slotProps.pill), React.createElement(\"span\", __assign({}, slotProps.thumb))), (checked && onText || offText) && React.createElement(Label, __assign({}, slotProps.stateText))));\n});\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nvar useComponentRef = function (props, isChecked, toggleButtonRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      focus: function () {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      }\n    };\n  }, [isChecked, toggleButtonRef]);\n};","map":{"version":3,"mappings":"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","names":["React","useControllableValue","useId","useWarnings","classNamesFunction","getNativeProps","inputProperties","useFocusRects","Label","getClassNames","COMPONENT_NAME","ToggleBase","forwardRef","props","forwardedRef","RootType","_a","ariaLabel","controlledChecked","className","_b","defaultChecked","disabled","inlineLabel","label","offAriaLabel","offText","onAriaLabel","onChange","onChanged","onToggleClick","onText","role","styles","theme","useCallback","ev","isChecked","checked","setChecked","classNames","onOffMissing","badAriaLabel","id","labelId","stateTextId","stateText","toggleNativeProps","labelledById","undefined","toggleButton","useRef","useComponentRef","process","env","NODE_ENV","name","deprecations","mutuallyExclusive","onClick","slotProps","root","hidden","children","htmlFor","container","pill","ref","type","thumb","text","__assign","displayName","toggleButtonRef","useImperativeHandle","componentRef","focus","current"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Toggle\\Toggle.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n"]},"metadata":{},"sourceType":"module"}