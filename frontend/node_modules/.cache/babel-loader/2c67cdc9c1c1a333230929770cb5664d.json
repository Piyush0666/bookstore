{"ast":null,"code":"import { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport { useEffect } from 'react';\n\nvar graphGet = function (graphNode, _a) {\n  var _b, _c, _d;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  return (_d = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme)) === null || _d === void 0 ? void 0 : _d.classMap;\n};\n\nvar graphSet = function (graphNode, _a, classMap) {\n  var _b, _c;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var windowNode = (_b = graphNode.get(windowId)) !== null && _b !== void 0 ? _b : new Map();\n  graphNode.set(windowId, windowNode);\n  var idNode = (_c = windowNode.get(id)) !== null && _c !== void 0 ? _c : new Map();\n  windowNode.set(id, idNode);\n  idNode.set(theme, {\n    classMap: classMap,\n    refCount: 0\n  });\n};\n\nfunction graphRef(graphNode, _a) {\n  var _b, _c;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var node = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme);\n\n  if (node) {\n    node.refCount++;\n  }\n}\n\nfunction graphDeref(graphNode, _a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var node = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme);\n\n  if (node) {\n    node.refCount--;\n\n    if (node.refCount === 0) {\n      (_e = (_d = graphNode.get(windowId)) === null || _d === void 0 ? void 0 : _d.get(id)) === null || _e === void 0 ? void 0 : _e.delete(theme);\n\n      if (((_g = (_f = graphNode.get(windowId)) === null || _f === void 0 ? void 0 : _f.get(id)) === null || _g === void 0 ? void 0 : _g.size) === 0) {\n        (_h = graphNode.get(windowId)) === null || _h === void 0 ? void 0 : _h.delete(id);\n\n        if (((_j = graphNode.get(windowId)) === null || _j === void 0 ? void 0 : _j.size) === 0) {\n          graphNode.delete(windowId);\n        }\n      }\n    }\n  }\n}\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\n\n\nexport function makeStyles(styleOrFunction) {\n  // Create graph of inputs to map to output.\n  var graph = new Map(); // Retain a dictionary of window ids we're tracking\n\n  var allWindows = new Set(); // cleanupMapEntries will\n  // 1. remove all the graph branches for the window,\n  // 2. remove the event listener,\n  // 3. delete the allWindows entry.\n\n  var cleanupMapEntries = function (ev) {\n    var win = ev.currentTarget;\n    var winId = win.__id__;\n    graph.delete(winId);\n    win.removeEventListener('unload', cleanupMapEntries);\n    allWindows.delete(winId);\n  }; // eslint-disable-next-line deprecation/deprecation\n\n\n  return function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var theme = options.theme;\n    var winId;\n    var win = useWindow();\n\n    if (win) {\n      win.__id__ = win.__id__ || getId();\n      winId = win.__id__;\n\n      if (!allWindows.has(winId)) {\n        allWindows.add(winId);\n        win.addEventListener('unload', cleanupMapEntries);\n      }\n    }\n\n    var contextualTheme = useTheme();\n    theme = theme || contextualTheme;\n    var renderer = mergeStylesRenderer;\n    var id = renderer.getId();\n    var path = [winId, id, theme];\n    var value = graphGet(graph, path); // Don't keep around unused styles\n\n    useEffect(function () {\n      graphRef(graph, [winId, id, theme]);\n      return function () {\n        return graphDeref(graph, [winId, id, theme]);\n      };\n    }, [winId, id, theme]);\n\n    if (!value) {\n      var styles = isStyleFunction(styleOrFunction) ? styleOrFunction(theme) : styleOrFunction;\n      value = mergeStylesRenderer.renderStyles(styles, {\n        targetWindow: win,\n        rtl: !!theme.rtl\n      });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n\nfunction isStyleFunction(styleOrFunction) {\n  return typeof styleOrFunction === 'function';\n}","map":{"version":3,"mappings":"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","names":["useTheme","getId","useWindow","mergeStylesRenderer","useEffect","graphGet","graphNode","_a","windowId","id","theme","get","_b","_c","_d","classMap","graphSet","windowNode","Map","set","idNode","refCount","graphRef","node","graphDeref","_e","delete","_f","_g","size","_h","_j","makeStyles","styleOrFunction","graph","allWindows","Set","cleanupMapEntries","ev","win","currentTarget","winId","__id__","removeEventListener","options","has","add","addEventListener","contextualTheme","renderer","path","value","styles","isStyleFunction","renderStyles","targetWindow","rtl"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\ThemeProvider\\makeStyles.ts"],"sourcesContent":["import { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport type { IStyle } from '@fluentui/style-utilities';\nimport type { Theme } from '@fluentui/theme';\nimport { useEffect } from 'react';\n\ntype GraphPath = readonly [windowId: string | undefined, id: number, theme: Theme | undefined];\nexport type StylesClassMapping<TStyleSet extends { [key in keyof TStyleSet]: IStyle }> = {\n  [key in keyof TStyleSet]: string;\n};\ntype Graph<TStyleSet extends { [key in keyof TStyleSet]: IStyle }> = Map<\n  string | undefined,\n  Map<number, Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>>\n>;\n\nconst graphGet = <TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n): StylesClassMapping<TStyleSet> | undefined => {\n  return graphNode.get(windowId)?.get(id)?.get(theme)?.classMap;\n};\n\nconst graphSet = <TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n  classMap: StylesClassMapping<TStyleSet>,\n) => {\n  const windowNode =\n    graphNode.get(windowId) ??\n    new Map<number, Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>>();\n  graphNode.set(windowId, windowNode);\n\n  const idNode =\n    windowNode.get(id) ?? new Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>();\n  windowNode.set(id, idNode);\n\n  idNode.set(theme, { classMap, refCount: 0 });\n};\n\nfunction graphRef<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n) {\n  const node = graphNode.get(windowId)?.get(id)?.get(theme);\n  if (node) {\n    node.refCount++;\n  }\n}\n\nfunction graphDeref<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n) {\n  const node = graphNode.get(windowId)?.get(id)?.get(theme);\n  if (node) {\n    node.refCount--;\n\n    if (node.refCount === 0) {\n      graphNode.get(windowId)?.get(id)?.delete(theme);\n\n      if (graphNode.get(windowId)?.get(id)?.size === 0) {\n        graphNode.get(windowId)?.delete(id);\n\n        if (graphNode.get(windowId)?.size === 0) {\n          graphNode.delete(windowId);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Options that can be provided to the hook generated by `makeStyles`.\n * @deprecated Only used in deprecated `makeStyles` implementation below.\n */\nexport type UseStylesOptions = {\n  theme?: Theme;\n};\n\ntype WindowWithId = Window & {\n  __id__: string;\n};\n\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\nexport function makeStyles<TStyleSet extends { [key in keyof TStyleSet]: IStyle } = { [key: string]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n  // eslint-disable-next-line deprecation/deprecation\n): (options?: UseStylesOptions) => StylesClassMapping<TStyleSet> {\n  // Create graph of inputs to map to output.\n  const graph: Graph<TStyleSet> = new Map();\n  // Retain a dictionary of window ids we're tracking\n  const allWindows = new Set<string>();\n\n  // cleanupMapEntries will\n  // 1. remove all the graph branches for the window,\n  // 2. remove the event listener,\n  // 3. delete the allWindows entry.\n  const cleanupMapEntries = (ev: PageTransitionEvent) => {\n    const win = ev.currentTarget as WindowWithId;\n    const winId = win.__id__;\n    graph.delete(winId);\n    win.removeEventListener('unload', cleanupMapEntries);\n    allWindows.delete(winId);\n  };\n\n  // eslint-disable-next-line deprecation/deprecation\n  return (options: UseStylesOptions = {}): StylesClassMapping<TStyleSet> => {\n    let { theme } = options;\n    let winId: string | undefined;\n    const win = useWindow() as WindowWithId | undefined;\n    if (win) {\n      win.__id__ = win.__id__ || getId();\n      winId = win.__id__;\n      if (!allWindows.has(winId)) {\n        allWindows.add(winId);\n        win.addEventListener('unload', cleanupMapEntries);\n      }\n    }\n\n    const contextualTheme = useTheme();\n\n    theme = theme || contextualTheme;\n    const renderer = mergeStylesRenderer;\n\n    const id = renderer.getId();\n    const path: GraphPath = [winId, id, theme] as const;\n    let value = graphGet(graph, path);\n\n    // Don't keep around unused styles\n    useEffect(() => {\n      graphRef(graph, [winId, id, theme]);\n\n      return () => graphDeref(graph, [winId, id, theme]);\n    }, [winId, id, theme]);\n\n    if (!value) {\n      const styles = isStyleFunction(styleOrFunction)\n        ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!)\n        : styleOrFunction;\n\n      value = mergeStylesRenderer.renderStyles<TStyleSet>(styles, { targetWindow: win, rtl: !!theme!.rtl });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n\nfunction isStyleFunction<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n): styleOrFunction is (theme: Theme) => TStyleSet {\n  return typeof styleOrFunction === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}