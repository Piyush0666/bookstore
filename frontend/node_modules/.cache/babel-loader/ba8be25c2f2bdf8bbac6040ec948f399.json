{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var CalendarDayBase = function (props) {\n  var dayGrid = React.useRef(null);\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        var _a, _b;\n\n        (_b = (_a = dayGrid.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    };\n  }, []);\n  var strings = props.strings,\n      navigatedDate = props.navigatedDate,\n      dateTimeFormatter = props.dateTimeFormatter,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      onHeaderSelect = props.onHeaderSelect,\n      showSixWeeksByDefault = props.showSixWeeksByDefault,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      restrictedDates = props.restrictedDates,\n      onNavigateDate = props.onNavigateDate,\n      showWeekNumbers = props.showWeekNumbers,\n      dateRangeType = props.dateRangeType,\n      animationDirection = props.animationDirection;\n  var monthAndYearId = useId();\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection\n  });\n  var monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  var HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  var headerAriaLabel = strings.yearPickerHeaderAriaLabel ? format(strings.yearPickerHeaderAriaLabel, monthAndYear) : monthAndYear;\n  return React.createElement(\"div\", {\n    className: classNames.root\n  }, React.createElement(\"div\", {\n    className: classNames.header\n  }, React.createElement(HeaderButtonComponentType, {\n    \"aria-label\": onHeaderSelect ? headerAriaLabel : undefined,\n    className: classNames.monthAndYear,\n    onClick: onHeaderSelect,\n    \"data-is-focusable\": !!onHeaderSelect,\n    tabIndex: onHeaderSelect ? 0 : -1,\n    onKeyDown: onButtonKeyDown(onHeaderSelect),\n    type: \"button\"\n  }, React.createElement(\"span\", {\n    id: monthAndYearId,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, monthAndYear)), React.createElement(CalendarDayNavigationButtons, __assign({}, props, {\n    classNames: classNames\n  }))), React.createElement(CalendarDayGrid, __assign({}, props, {\n    styles: styles,\n    componentRef: dayGrid,\n    strings: strings,\n    navigatedDate: navigatedDate,\n    weeksToShow: showSixWeeksByDefault ? 6 : undefined,\n    dateTimeFormatter: dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates,\n    onNavigateDate: onNavigateDate,\n    labelledBy: monthAndYearId,\n    dateRangeType: dateRangeType\n  })));\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\nvar CalendarDayNavigationButtons = function (props) {\n  var _a, _b;\n\n  var minDate = props.minDate,\n      maxDate = props.maxDate,\n      navigatedDate = props.navigatedDate,\n      allFocusable = props.allFocusable,\n      strings = props.strings,\n      navigationIcons = props.navigationIcons,\n      showCloseButton = props.showCloseButton,\n      classNames = props.classNames,\n      onNavigateDate = props.onNavigateDate,\n      onDismiss = props.onDismiss;\n\n  var onSelectNextMonth = function () {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  var onSelectPrevMonth = function () {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n\n  var leftNavigationIcon = navigationIcons.leftNavigation;\n  var rightNavigationIcon = navigationIcons.rightNavigation;\n  var closeNavigationIcon = navigationIcons.closeIcon; // determine if previous/next months are in bounds\n\n  var prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  var nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true; // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n\n  return React.createElement(\"div\", {\n    className: classNames.monthComponents\n  }, React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_a = {}, _a[classNames.disabledStyle] = !prevMonthInBounds, _a)),\n    tabIndex: prevMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !prevMonthInBounds,\n    onClick: prevMonthInBounds ? onSelectPrevMonth : undefined,\n    onKeyDown: prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined,\n    title: strings.prevMonthAriaLabel ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: leftNavigationIcon\n  })), React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_b = {}, _b[classNames.disabledStyle] = !nextMonthInBounds, _b)),\n    tabIndex: nextMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !nextMonthInBounds,\n    onClick: nextMonthInBounds ? onSelectNextMonth : undefined,\n    onKeyDown: nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined,\n    title: strings.nextMonthAriaLabel ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: rightNavigationIcon\n  })), showCloseButton && React.createElement(\"button\", {\n    className: css(classNames.headerIconButton),\n    onClick: onDismiss,\n    onKeyDown: onButtonKeyDown(onDismiss),\n    title: strings.closeButtonAriaLabel,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: closeNavigationIcon\n  })));\n};\n\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nvar onButtonKeyDown = function (callback) {\n  return function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback === null || callback === void 0 ? void 0 : callback();\n        break;\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["React","KeyCodes","css","classNamesFunction","format","Icon","addMonths","compareDatePart","getMonthStart","getMonthEnd","CalendarDayGrid","useId","getClassNames","CalendarDayBase","dayGrid","useRef","useImperativeHandle","props","componentRef","focus","current","_a","_b","navigatedDate","dateTimeFormatter","styles","theme","className","onHeaderSelect","showSixWeeksByDefault","minDate","maxDate","restrictedDates","onNavigateDate","showWeekNumbers","dateRangeType","animationDirection","monthAndYearId","classNames","headerIsClickable","monthAndYear","formatMonthYear","strings","HeaderButtonComponentType","headerAriaLabel","yearPickerHeaderAriaLabel","root","header","undefined","onClick","tabIndex","onKeyDown","onButtonKeyDown","type","id","CalendarDayNavigationButtons","__assign","weeksToShow","labelledBy","displayName","allFocusable","navigationIcons","showCloseButton","onDismiss","onSelectNextMonth","onSelectPrevMonth","leftNavigationIcon","leftNavigation","rightNavigationIcon","rightNavigation","closeNavigationIcon","closeIcon","prevMonthInBounds","nextMonthInBounds","monthComponents","headerIconButton","disabledStyle","title","prevMonthAriaLabel","months","getMonth","iconName","nextMonthAriaLabel","closeButtonAriaLabel","callback","ev","which","enter"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\Calendar\\src\\components\\Calendar\\CalendarDay\\CalendarDay.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { useId } from '@fluentui/react-hooks';\nimport type { ICalendarDayProps, ICalendarDayStyleProps, ICalendarDayStyles } from './CalendarDay.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { ICalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid.types';\n\nconst getClassNames = classNamesFunction<ICalendarDayStyleProps, ICalendarDayStyles>();\n\nexport const CalendarDayBase: React.FunctionComponent<ICalendarDayProps> = props => {\n  const dayGrid = React.useRef<ICalendarDayGrid>(null);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        dayGrid.current?.focus?.();\n      },\n    }),\n    [],\n  );\n\n  const {\n    strings,\n    navigatedDate,\n    dateTimeFormatter,\n    styles,\n    theme,\n    className,\n    onHeaderSelect,\n    showSixWeeksByDefault,\n    minDate,\n    maxDate,\n    restrictedDates,\n    onNavigateDate,\n    showWeekNumbers,\n    dateRangeType,\n    animationDirection,\n  } = props;\n  const monthAndYearId = useId();\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection,\n  });\n\n  const monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  const HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  const headerAriaLabel = strings.yearPickerHeaderAriaLabel\n    ? format(strings.yearPickerHeaderAriaLabel, monthAndYear)\n    : monthAndYear;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.header}>\n        <HeaderButtonComponentType\n          aria-label={onHeaderSelect ? headerAriaLabel : undefined}\n          className={classNames.monthAndYear}\n          onClick={onHeaderSelect}\n          data-is-focusable={!!onHeaderSelect}\n          tabIndex={onHeaderSelect ? 0 : -1} // prevent focus if there's no action for the button\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          type=\"button\"\n        >\n          <span id={monthAndYearId} aria-live=\"polite\" aria-atomic=\"true\">\n            {monthAndYear}\n          </span>\n        </HeaderButtonComponentType>\n        <CalendarDayNavigationButtons {...props} classNames={classNames} />\n      </div>\n      <CalendarDayGrid\n        {...props}\n        styles={styles}\n        componentRef={dayGrid}\n        strings={strings}\n        navigatedDate={navigatedDate!}\n        weeksToShow={showSixWeeksByDefault ? 6 : undefined}\n        dateTimeFormatter={dateTimeFormatter!}\n        minDate={minDate}\n        maxDate={maxDate}\n        restrictedDates={restrictedDates}\n        onNavigateDate={onNavigateDate}\n        labelledBy={monthAndYearId}\n        dateRangeType={dateRangeType}\n      />\n    </div>\n  );\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\ninterface ICalendarDayNavigationButtonsProps extends ICalendarDayProps {\n  classNames: IProcessedStyleSet<ICalendarDayStyles>;\n}\n\nconst CalendarDayNavigationButtons = (props: ICalendarDayNavigationButtonsProps): JSX.Element => {\n  const {\n    minDate,\n    maxDate,\n    navigatedDate,\n    allFocusable,\n    strings,\n    navigationIcons,\n    showCloseButton,\n    classNames,\n    onNavigateDate,\n    onDismiss,\n  } = props;\n\n  const onSelectNextMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n  const leftNavigationIcon = navigationIcons.leftNavigation;\n  const rightNavigationIcon = navigationIcons.rightNavigation;\n  const closeNavigationIcon = navigationIcons.closeIcon;\n\n  // determine if previous/next months are in bounds\n  const prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  const nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;\n\n  // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n  return (\n    <div className={classNames.monthComponents}>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !prevMonthInBounds,\n        })}\n        tabIndex={prevMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!prevMonthInBounds}\n        onClick={prevMonthInBounds ? onSelectPrevMonth : undefined}\n        onKeyDown={prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined}\n        title={\n          strings.prevMonthAriaLabel\n            ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={leftNavigationIcon} />\n      </button>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !nextMonthInBounds,\n        })}\n        tabIndex={nextMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!nextMonthInBounds}\n        onClick={nextMonthInBounds ? onSelectNextMonth : undefined}\n        onKeyDown={nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined}\n        title={\n          strings.nextMonthAriaLabel\n            ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={rightNavigationIcon} />\n      </button>\n      {showCloseButton && (\n        <button\n          className={css(classNames.headerIconButton)}\n          onClick={onDismiss}\n          onKeyDown={onButtonKeyDown(onDismiss)}\n          title={strings.closeButtonAriaLabel}\n          type=\"button\"\n        >\n          <Icon iconName={closeNavigationIcon} />\n        </button>\n      )}\n    </div>\n  );\n};\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nconst onButtonKeyDown = (\n  callback?: () => void,\n): ((ev: React.KeyboardEvent<HTMLButtonElement | HTMLDivElement>) => void) => (\n  ev: React.KeyboardEvent<HTMLButtonElement>,\n) => {\n  // eslint-disable-next-line deprecation/deprecation\n  switch (ev.which) {\n    case KeyCodes.enter:\n      callback?.();\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}