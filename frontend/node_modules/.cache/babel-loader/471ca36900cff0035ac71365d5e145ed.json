{"ast":null,"code":"import * as React from 'react';\n/**\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\n *\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\n *\n * Usage example:\n * ```ts\n * const myRef = useRefEffect<HTMLElement>(element => {\n *  ...\n *  return () => { ... cleanup ... };\n * });\n * ```\n * ```jsx\n * <div ref={myRef} />\n * ```\n *\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\n * @param initial - (Optional) The initial value for the ref.\n *\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\n */\n\nexport function useRefEffect(callback, initial) {\n  if (initial === void 0) {\n    initial = null;\n  }\n\n  var createRefCallback = function () {\n    var refCallback = function (value) {\n      if (data.ref.current !== value) {\n        if (data.cleanup) {\n          data.cleanup();\n          data.cleanup = undefined;\n        }\n\n        data.ref.current = value;\n\n        if (value !== null) {\n          data.cleanup = data.callback(value);\n        }\n      }\n    };\n\n    refCallback.current = initial;\n    return refCallback;\n  };\n\n  var data = React.useRef({\n    ref: createRefCallback(),\n    callback: callback\n  }).current;\n  data.callback = callback;\n  return data.ref;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAUC,YAAV,CAA0BC,QAA1B,EAAuEC,OAAvE,EAA+F;EAAxB;IAAAA;EAAwB;;EAOnG,IAAMC,iBAAiB,GAAG;IACxB,IAAMC,WAAW,GAAG,UAACC,KAAD,EAAgB;MAClC,IAAIC,IAAI,CAACC,GAAL,CAASC,OAAT,KAAqBH,KAAzB,EAAgC;QAC9B,IAAIC,IAAI,CAACG,OAAT,EAAkB;UAChBH,IAAI,CAACG,OAAL;UACAH,IAAI,CAACG,OAAL,GAAeC,SAAf;QACD;;QAEDJ,IAAI,CAACC,GAAL,CAASC,OAAT,GAAmBH,KAAnB;;QAEA,IAAIA,KAAK,KAAK,IAAd,EAAoB;UAClBC,IAAI,CAACG,OAAL,GAAeH,IAAI,CAACL,QAAL,CAAcI,KAAd,CAAf;QACD;MACF;IACF,CAbD;;IAeAD,WAAW,CAACI,OAAZ,GAAsBN,OAAtB;IACA,OAAOE,WAAP;EACD,CAlBD;;EAoBA,IAAME,IAAI,GAAGP,KAAK,CAACY,MAAN,CAAsB;IACjCJ,GAAG,EAAEJ,iBAAiB,EADW;IAEjCF,QAAQ;EAFyB,CAAtB,EAGVO,OAHH;EAKAF,IAAI,CAACL,QAAL,GAAgBA,QAAhB;EAEA,OAAOK,IAAI,CAACC,GAAZ;AACD","names":["React","useRefEffect","callback","initial","createRefCallback","refCallback","value","data","ref","current","cleanup","undefined","useRef"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react-hooks\\src\\useRefEffect.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A callback ref function that also has a .current member for the ref's current value.\n */\nexport type RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\n\n/**\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\n *\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\n *\n * Usage example:\n * ```ts\n * const myRef = useRefEffect<HTMLElement>(element => {\n *  ...\n *  return () => { ... cleanup ... };\n * });\n * ```\n * ```jsx\n * <div ref={myRef} />\n * ```\n *\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\n * @param initial - (Optional) The initial value for the ref.\n *\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\n */\nexport function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial: T | null = null): RefCallback<T> {\n  type RefData = {\n    ref: ((value: T | null) => void) & React.MutableRefObject<T | null>;\n    callback: (value: T) => (() => void) | void;\n    cleanup?: (() => void) | void;\n  };\n\n  const createRefCallback = () => {\n    const refCallback = (value: T | null) => {\n      if (data.ref.current !== value) {\n        if (data.cleanup) {\n          data.cleanup();\n          data.cleanup = undefined;\n        }\n\n        data.ref.current = value;\n\n        if (value !== null) {\n          data.cleanup = data.callback(value);\n        }\n      }\n    };\n\n    refCallback.current = initial;\n    return refCallback;\n  };\n\n  const data = React.useRef<RefData>({\n    ref: createRefCallback(),\n    callback,\n  }).current;\n\n  data.callback = callback;\n\n  return data.ref;\n}\n"]},"metadata":{},"sourceType":"module"}