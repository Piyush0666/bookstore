{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Pivot';\n\nvar getTabId = function (props, pivotId, itemKey, index) {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n\n  return pivotId + (\"-Tab\" + index);\n}; // Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\n\n\nvar getLinkItems = function (props, pivotId) {\n  var result = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {}\n  };\n  React.Children.forEach(React.Children.toArray(props.children), function (child, index) {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = child.props,\n          linkText = _a.linkText,\n          pivotItemProps = __rest(_a, [\"linkText\"]);\n\n      var itemKey = child.props.itemKey || index.toString();\n      result.links.push(__assign(__assign({\n        headerText: linkText\n      }, pivotItemProps), {\n        itemKey: itemKey\n      }));\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nvar isPivotItem = function (item) {\n  var _a;\n\n  return React.isValidElement(item) && ((_a = item.type) === null || _a === void 0 ? void 0 : _a.name) === PivotItem.name;\n};\n\nexport var PivotBase = React.forwardRef(function (props, ref) {\n  var focusZoneRef = React.useRef(null);\n  var overflowMenuButtonComponentRef = React.useRef(null);\n  var pivotId = useId('Pivot');\n\n  var _a = useControllableValue(props.selectedKey, props.defaultSelectedKey),\n      selectedKey = _a[0],\n      setSelectedKey = _a[1];\n\n  var componentRef = props.componentRef,\n      theme = props.theme,\n      linkSize = props.linkSize,\n      linkFormat = props.linkFormat,\n      overflowBehavior = props.overflowBehavior,\n      overflowAriaLabel = props.overflowAriaLabel,\n      focusZoneProps = props.focusZoneProps;\n  var classNames;\n  var nameProps = {\n    'aria-label': props['aria-label'],\n    'aria-labelledby': props['aria-labelledby']\n  };\n  var divProps = getNativeProps(props, divProperties, ['aria-label', 'aria-labelledby']);\n  var linkCollection = getLinkItems(props, pivotId);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: function () {\n        var _a;\n\n        (_a = focusZoneRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n\n  var renderLinkContent = function (link) {\n    if (!link) {\n      return null;\n    }\n\n    var itemCount = link.itemCount,\n        itemIcon = link.itemIcon,\n        headerText = link.headerText;\n    return React.createElement(\"span\", {\n      className: classNames.linkContent\n    }, itemIcon !== undefined && React.createElement(\"span\", {\n      className: classNames.icon\n    }, React.createElement(Icon, {\n      iconName: itemIcon\n    })), headerText !== undefined && React.createElement(\"span\", {\n      className: classNames.text\n    }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n      className: classNames.count\n    }, \" (\", itemCount, \")\"));\n  };\n\n  var renderPivotLink = function (renderLinkCollection, link, renderPivotLinkSelectedKey, className) {\n    var itemKey = link.itemKey,\n        headerButtonProps = link.headerButtonProps,\n        onRenderItemLink = link.onRenderItemLink;\n    var tabId = renderLinkCollection.keyToTabIdMapping[itemKey];\n    var linkContent;\n    var isSelected = renderPivotLinkSelectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, renderLinkContent);\n    } else {\n      linkContent = renderLinkContent(link);\n    }\n\n    var contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : ''; // Adding space supplementary for icon\n\n    contentString += link.itemIcon ? ' xx' : '';\n    var itemSemantics = link.role && link.role !== 'tab' ? {\n      role: link.role\n    } : {\n      role: 'tab',\n      'aria-selected': isSelected\n    };\n    return React.createElement(CommandButton, __assign({}, headerButtonProps, itemSemantics, {\n      id: tabId,\n      key: itemKey,\n      className: css(className, isSelected && classNames.linkIsSelected),\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: function (ev) {\n        return onLinkClick(itemKey, ev);\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function (ev) {\n        return onKeyDown(itemKey, ev);\n      },\n      \"aria-label\": link.ariaLabel,\n      name: link.headerText,\n      keytipProps: link.keytipProps,\n      \"data-content\": contentString\n    }), linkContent);\n  };\n\n  var onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n    updateSelectedItem(itemKey, ev);\n  };\n\n  var onKeyDown = function (itemKey, ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      updateSelectedItem(itemKey);\n    }\n  };\n\n  var updateSelectedItem = function (itemKey, ev) {\n    var _a;\n\n    setSelectedKey(itemKey);\n    linkCollection = getLinkItems(props, pivotId);\n\n    if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n      var item = React.Children.toArray(props.children)[selectedIndex];\n\n      if (isPivotItem(item)) {\n        props.onLinkClick(item, ev);\n      }\n    }\n\n    (_a = overflowMenuButtonComponentRef.current) === null || _a === void 0 ? void 0 : _a.dismissMenu();\n  };\n\n  var renderPivotItem = function (itemKey, isActive) {\n    if (props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      hidden: !isActive,\n      key: itemKey,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": selectedTabId,\n      className: classNames.itemContainer\n    }, React.Children.toArray(props.children)[index]);\n  };\n\n  var isKeyValid = function (itemKey) {\n    return itemKey === null || itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n\n  var getSelectedKey = function () {\n    if (isKeyValid(selectedKey)) {\n      return selectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n\n  classNames = getClassNames(props.styles, {\n    theme: theme,\n    linkSize: linkSize,\n    linkFormat: linkFormat\n  });\n  var renderedSelectedKey = getSelectedKey();\n  var renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n  var items = linkCollection.links.map(function (l) {\n    return renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link);\n  }); // The overflow menu starts empty and items[] is updated as the overflow items change\n\n  var overflowMenuProps = React.useMemo(function () {\n    return {\n      items: [],\n      alignTargetEdge: true,\n      directionalHint: DirectionalHint.bottomRightEdge\n    };\n  }, []);\n  var overflowMenuButtonRef = useOverflow({\n    onOverflowItemsChanged: function (overflowIndex, elements) {\n      // Set data-is-overflowing on each item\n      elements.forEach(function (_a) {\n        var ele = _a.ele,\n            isOverflowing = _a.isOverflowing;\n        return ele.dataset.isOverflowing = \"\" + isOverflowing;\n      }); // Update the menu items\n\n      overflowMenuProps.items = linkCollection.links.slice(overflowIndex).filter(function (link) {\n        return link.itemKey !== renderedSelectedKey;\n      }).map(function (link, index) {\n        link.role = 'menuitem';\n        return {\n          key: link.itemKey || \"\" + (overflowIndex + index),\n          onRender: function () {\n            return renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu);\n          }\n        };\n      });\n    },\n    rtl: getRTL(theme),\n    pinnedIndex: renderedSelectedIndex\n  }).menuButtonRef;\n  return React.createElement(\"div\", __assign({\n    ref: ref\n  }, divProps), React.createElement(FocusZone, __assign({\n    componentRef: focusZoneRef,\n    role: \"tablist\"\n  }, nameProps, {\n    direction: FocusZoneDirection.horizontal\n  }, focusZoneProps, {\n    className: css(classNames.root, focusZoneProps === null || focusZoneProps === void 0 ? void 0 : focusZoneProps.className)\n  }), items, overflowBehavior === 'menu' && React.createElement(CommandButton, {\n    className: css(classNames.link, classNames.overflowMenuButton),\n    elementRef: overflowMenuButtonRef,\n    componentRef: overflowMenuButtonComponentRef,\n    menuProps: overflowMenuProps,\n    menuIconProps: {\n      iconName: 'More',\n      style: {\n        color: 'inherit'\n      }\n    },\n    ariaLabel: overflowAriaLabel\n  })), renderedSelectedKey && linkCollection.links.map(function (link) {\n    return (link.alwaysRender === true || renderedSelectedKey === link.itemKey) && renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey);\n  }));\n});\nPivotBase.displayName = COMPONENT_NAME;","map":{"version":3,"mappings":"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","names":["React","useControllableValue","useId","classNamesFunction","css","divProperties","getNativeProps","getRTL","KeyCodes","warn","CommandButton","useOverflow","FocusZone","FocusZoneDirection","DirectionalHint","Icon","PivotItem","getClassNames","COMPONENT_NAME","getTabId","props","pivotId","itemKey","index","getLinkItems","result","links","keyToIndexMapping","keyToTabIdMapping","Children","forEach","toArray","children","child","isPivotItem","_a","linkText","pivotItemProps","toString","push","__assign","headerText","item","isValidElement","type","name","PivotBase","forwardRef","ref","focusZoneRef","useRef","overflowMenuButtonComponentRef","selectedKey","defaultSelectedKey","setSelectedKey","theme","linkSize","linkFormat","overflowBehavior","overflowAriaLabel","focusZoneProps","classNames","nameProps","divProps","linkCollection","useImperativeHandle","componentRef","focus","current","renderLinkContent","link","itemIcon","className","linkContent","undefined","icon","iconName","text","itemCount","count","renderPivotLink","renderLinkCollection","renderPivotLinkSelectedKey","headerButtonProps","onRenderItemLink","tabId","isSelected","contentString","itemSemantics","role","id","key","linkIsSelected","onClick","ev","onKeyDown","ariaLabel","keytipProps","onLinkClick","preventDefault","updateSelectedItem","which","enter","selectedIndex","dismissMenu","renderPivotItem","isActive","headersOnly","selectedTabId","hidden","itemContainer","isKeyValid","getSelectedKey","length","styles","renderedSelectedKey","renderedSelectedIndex","items","map","l","overflowMenuProps","useMemo","alignTargetEdge","directionalHint","bottomRightEdge","overflowMenuButtonRef","onOverflowItemsChanged","overflowIndex","elements","ele","isOverflowing","dataset","slice","filter","onRender","linkInMenu","rtl","pinnedIndex","menuButtonRef","direction","horizontal","root","overflowMenuButton","elementRef","menuProps","menuIconProps","style","color","alwaysRender","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Pivot\\Pivot.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nimport type { IButton } from '../../Button';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IContextualMenuProps } from '../ContextualMenu/ContextualMenu.types';\nimport type { IPivot, IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport type { IPivotItemProps } from './PivotItem.types';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\n\nconst COMPONENT_NAME = 'Pivot';\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\nconst getTabId = (props: IPivotProps, pivotId: string, itemKey: string, index: number): string => {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n  return pivotId + `-Tab${index}`;\n};\n\n// Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\nconst getLinkItems = (props: IPivotProps, pivotId: string): PivotLinkCollection => {\n  const result: PivotLinkCollection = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {},\n  };\n\n  React.Children.forEach(React.Children.toArray(props.children), (child: React.ReactNode, index: number) => {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      const { linkText, ...pivotItemProps } = child.props;\n      const itemKey = child.props.itemKey || index.toString();\n      result.links.push({\n        headerText: linkText,\n        ...pivotItemProps,\n        itemKey: itemKey,\n      });\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nconst isPivotItem = (item: React.ReactNode): item is PivotItem => {\n  return React.isValidElement(item) && (item.type as React.ComponentType)?.name === PivotItem.name;\n};\n\nexport const PivotBase: React.FunctionComponent<IPivotProps> = React.forwardRef<HTMLDivElement, IPivotProps>(\n  (props, ref) => {\n    const focusZoneRef = React.useRef<IFocusZone>(null);\n    const overflowMenuButtonComponentRef = React.useRef<IButton>(null);\n    const pivotId: string = useId('Pivot');\n\n    const [selectedKey, setSelectedKey] = useControllableValue(props.selectedKey, props.defaultSelectedKey);\n\n    const { componentRef, theme, linkSize, linkFormat, overflowBehavior, overflowAriaLabel, focusZoneProps } = props;\n\n    let classNames: { [key in keyof IPivotStyles]: string };\n    const nameProps = {\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n    };\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n      'aria-label',\n      'aria-labelledby',\n    ]);\n\n    let linkCollection = getLinkItems(props, pivotId);\n\n    React.useImperativeHandle(componentRef as React.RefObject<IPivot>, () => ({\n      focus: () => {\n        focusZoneRef.current?.focus();\n      },\n    }));\n\n    const renderLinkContent = (link?: IPivotItemProps): JSX.Element | null => {\n      if (!link) {\n        return null;\n      }\n\n      const { itemCount, itemIcon, headerText } = link;\n      return (\n        <span className={classNames.linkContent}>\n          {itemIcon !== undefined && (\n            <span className={classNames.icon}>\n              <Icon iconName={itemIcon} />\n            </span>\n          )}\n          {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n          {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n        </span>\n      );\n    };\n\n    const renderPivotLink = (\n      renderLinkCollection: PivotLinkCollection,\n      link: IPivotItemProps,\n      renderPivotLinkSelectedKey: string | null | undefined,\n      className: string,\n    ): JSX.Element => {\n      const { itemKey, headerButtonProps, onRenderItemLink } = link;\n      const tabId = renderLinkCollection.keyToTabIdMapping[itemKey!];\n      let linkContent: JSX.Element | null;\n      const isSelected: boolean = renderPivotLinkSelectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, renderLinkContent);\n      } else {\n        linkContent = renderLinkContent(link);\n      }\n\n      let contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n      // Adding space supplementary for icon\n      contentString += link.itemIcon ? ' xx' : '';\n\n      const itemSemantics =\n        link.role && link.role !== 'tab'\n          ? {\n              role: link.role,\n            }\n          : {\n              role: 'tab',\n              'aria-selected': isSelected,\n            };\n\n      return (\n        <CommandButton\n          {...headerButtonProps}\n          {...itemSemantics}\n          id={tabId}\n          key={itemKey}\n          className={css(className, isSelected && classNames.linkIsSelected)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={(ev: React.MouseEvent<HTMLElement>) => onLinkClick(itemKey!, ev)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => onKeyDown(itemKey!, ev)}\n          aria-label={link.ariaLabel}\n          name={link.headerText}\n          keytipProps={link.keytipProps}\n          data-content={contentString}\n        >\n          {linkContent}\n        </CommandButton>\n      );\n    };\n\n    const onLinkClick = (itemKey: string, ev: React.MouseEvent<HTMLElement>): void => {\n      ev.preventDefault();\n      updateSelectedItem(itemKey, ev);\n    };\n\n    const onKeyDown = (itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n        updateSelectedItem(itemKey);\n      }\n    };\n\n    const updateSelectedItem = (itemKey: string, ev?: React.MouseEvent<HTMLElement>): void => {\n      setSelectedKey(itemKey);\n      linkCollection = getLinkItems(props, pivotId);\n      if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n        const selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n        const item = React.Children.toArray(props.children)[selectedIndex];\n        if (isPivotItem(item)) {\n          props.onLinkClick(item, ev);\n        }\n      }\n\n      overflowMenuButtonComponentRef.current?.dismissMenu();\n    };\n\n    const renderPivotItem = (itemKey: string | undefined, isActive: boolean): JSX.Element | null => {\n      if (props.headersOnly || !itemKey) {\n        return null;\n      }\n\n      const index = linkCollection.keyToIndexMapping[itemKey];\n      const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={!isActive}\n          key={itemKey}\n          aria-hidden={!isActive}\n          aria-labelledby={selectedTabId}\n          className={classNames.itemContainer}\n        >\n          {React.Children.toArray(props.children)[index]}\n        </div>\n      );\n    };\n\n    const isKeyValid = (itemKey: string | null | undefined): boolean => {\n      return itemKey === null || (itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined);\n    };\n\n    const getSelectedKey = () => {\n      if (isKeyValid(selectedKey)) {\n        return selectedKey;\n      }\n      if (linkCollection.links.length) {\n        return linkCollection.links[0].itemKey;\n      }\n      return undefined;\n    };\n\n    classNames = getClassNames(props.styles!, {\n      theme: theme!,\n      linkSize,\n      linkFormat,\n    });\n\n    const renderedSelectedKey = getSelectedKey();\n    const renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n\n    const items = linkCollection.links.map(l =>\n      renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link),\n    );\n\n    // The overflow menu starts empty and items[] is updated as the overflow items change\n    const overflowMenuProps: IContextualMenuProps = React.useMemo(\n      () => ({\n        items: [],\n        alignTargetEdge: true,\n        directionalHint: DirectionalHint.bottomRightEdge,\n      }),\n      [],\n    );\n\n    const { menuButtonRef: overflowMenuButtonRef } = useOverflow({\n      onOverflowItemsChanged: (overflowIndex, elements) => {\n        // Set data-is-overflowing on each item\n        elements.forEach(({ ele, isOverflowing }) => (ele.dataset.isOverflowing = `${isOverflowing}`));\n\n        // Update the menu items\n        overflowMenuProps.items = linkCollection.links\n          .slice(overflowIndex)\n          .filter(link => link.itemKey !== renderedSelectedKey)\n          .map((link, index) => {\n            link.role = 'menuitem';\n\n            return {\n              key: link.itemKey || `${overflowIndex + index}`,\n              onRender: () => renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu),\n            };\n          });\n      },\n      rtl: getRTL(theme),\n      pinnedIndex: renderedSelectedIndex,\n    });\n\n    return (\n      <div ref={ref} {...divProps}>\n        <FocusZone\n          componentRef={focusZoneRef}\n          role=\"tablist\"\n          {...nameProps}\n          direction={FocusZoneDirection.horizontal}\n          {...focusZoneProps}\n          className={css(classNames.root, focusZoneProps?.className)}\n        >\n          {items}\n          {overflowBehavior === 'menu' && (\n            <CommandButton\n              className={css(classNames.link, classNames.overflowMenuButton)}\n              elementRef={overflowMenuButtonRef}\n              componentRef={overflowMenuButtonComponentRef}\n              menuProps={overflowMenuProps}\n              menuIconProps={{ iconName: 'More', style: { color: 'inherit' } }}\n              ariaLabel={overflowAriaLabel}\n            />\n          )}\n        </FocusZone>\n        {renderedSelectedKey &&\n          linkCollection.links.map(\n            link =>\n              (link.alwaysRender === true || renderedSelectedKey === link.itemKey) &&\n              renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey),\n          )}\n      </div>\n    );\n  },\n);\nPivotBase.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}