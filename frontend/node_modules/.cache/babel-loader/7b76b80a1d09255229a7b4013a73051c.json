{"ast":null,"code":"import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\n\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n      rowClassNames = props.rowClassNames,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n      item = props.item,\n      itemIndex = props.itemIndex,\n      isSelected = props.isSelected,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      propsOnRenderField = props.onRenderField,\n      cellsByColumn = props.cellsByColumn,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      rowHeaderId = props.rowHeaderId;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  var defaultOnRenderField = React.useCallback(function (fieldProps) {\n    var column = fieldProps.column,\n        cellValueKey = fieldProps.cellValueKey,\n        className = fieldProps.className,\n        onRender = fieldProps.onRender,\n        fieldItem = fieldProps.item,\n        fieldItemIndex = fieldProps.itemIndex;\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n    return React.createElement(\"div\", {\n      key: key,\n      id: column.isRowHeader ? rowHeaderId : undefined,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      \"aria-readonly\": true,\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, className),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, onRender(fieldItem, fieldItemIndex, column));\n  }, [rowClassNames, cellStyleProps, rowHeaderId]);\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column) {\n    var _a = column.getValueKey,\n        getValueKey = _a === void 0 ? getCellValueKey : _a;\n\n    var onRender = cellsByColumn && column.key in cellsByColumn && function () {\n      return cellsByColumn[column.key];\n    } || column.onRender || onRenderItemColumn || defaultOnRender;\n\n    var onRenderField = defaultOnRenderField;\n\n    if (column.onRenderField) {\n      onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n    }\n\n    if (propsOnRenderField) {\n      onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n    }\n\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n\n    cellValueKeys[column.key] = cellValueKey;\n    return onRenderField({\n      item: item,\n      itemIndex: itemIndex,\n      isSelected: isSelected,\n      column: column,\n      cellValueKey: cellValueKey,\n      className: showAnimation ? rowClassNames.cellAnimation : undefined,\n      onRender: onRender\n    });\n  }));\n};\n\nfunction defaultOnRender(item, index, column) {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}","map":{"version":3,"mappings":"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","names":["React","composeRenderFunction","css","DEFAULT_CELL_STYLE_PROPS","getCellText","item","column","value","fieldName","undefined","toString","DetailsRowFields","props","rowClassNames","_a","cellStyleProps","itemIndex","isSelected","onRenderItemColumn","getCellValueKey","propsOnRenderField","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","useRef","cellValueKeys","current","defaultOnRenderField","useCallback","fieldProps","cellValueKey","className","onRender","fieldItem","fieldItemIndex","width","calculatedWidth","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","key","id","isRowHeader","role","isMultiline","cell","cellPadded","cellUnpadded","style","fields","columns","map","defaultOnRender","onRenderField","previousValueKey","getValueKey","showAnimation","cellAnimation","index"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\DetailsList\\DetailsRowFields.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          aria-readonly\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n"]},"metadata":{},"sourceType":"module"}