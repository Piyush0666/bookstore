{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuButton =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuButton, _super);\n\n  function ContextualMenuButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._btn = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    _this._getSubmenuTarget = function () {\n      return _this._btn.current ? _this._btn.current : undefined;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemMouseDown = _a.onItemMouseDown,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var isChecked = getIsChecked(item);\n    var canCheck = isChecked !== null;\n    var defaultRole = getMenuItemAriaRole(item);\n    var itemHasSubmenu = hasSubmenu(item);\n    var itemProps = item.itemProps,\n        ariaLabel = item.ariaLabel,\n        ariaDescription = item.ariaDescription;\n    var buttonNativeProperties = getNativeProps(item, buttonProperties); // Do not add the disabled attribute to the button so that it is focusable\n\n    delete buttonNativeProperties.disabled;\n    var itemRole = item.role || defaultRole; // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, buttonNativeProperties['aria-describedby']);\n    var itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style\n    };\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: ariaDescribedByIds,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"button\", __assign({\n        ref: _this._btn\n      }, buttonNativeProperties, itemButtonProperties, keytipAttributes), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n\n  return ContextualMenuButton;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuButton };","map":{"version":3,"mappings":"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","names":["React","buttonProperties","getNativeProps","memoizeFunction","getId","mergeAriaAttributeValues","ContextualMenuItemWrapper","KeytipData","getIsChecked","isItemDisabled","hasSubmenu","getMenuItemAriaRole","ContextualMenuItem","__extends","_this","createRef","keytipProps","hasMenu","ariaDescription","className","id","_ariaDescriptionId","_btn","current","undefined","ContextualMenuButton","props","item","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","_b","ChildrenRenderer","expandedMenuItemKey","onItemMouseDown","onItemClick","openSubMenu","dismissSubMenu","dismissMenu","isChecked","canCheck","defaultRole","itemHasSubmenu","ariaLabel","buttonNativeProperties","disabled","itemRole","role","ariaDescribedByIds","ariaDescribedBy","itemButtonProperties","root","onClick","_onItemClick","onKeyDown","_onItemKeyDown","onMouseEnter","_onItemMouseEnter","onMouseLeave","_onItemMouseLeave","onMouseDown","ev","onMouseMove","_onItemMouseMove","href","title","key","style","_getMemoizedMenuButtonKeytipProps","keytipAttributes","ref","__assign","componentRef","onCheckmarkClick","getSubmenuTarget","_getSubmenuTarget","itemProps","_renderAriaDescription","screenReaderText"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      buttonNativeProperties['aria-describedby'],\n    );\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n          <button ref={this._btn} {...buttonNativeProperties} {...itemButtonProperties} {...keytipAttributes}>\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}