{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, getGlobalClassNames, getHighContrastNoAdjustStyle } from '@fluentui/style-utilities';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nvar GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text'\n};\nvar MS_CHECKBOX_LABEL_SIZE = '20px';\nvar MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nvar MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n\n  var className = props.className,\n      theme = props.theme,\n      reversed = props.reversed,\n      checked = props.checked,\n      disabled = props.disabled,\n      isUsingCustomLabelRender = props.isUsingCustomLabelRender,\n      indeterminate = props.indeterminate;\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var checkmarkFontColor = semanticColors.inputForegroundChecked; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n\n  var checkmarkFontColorHovered = palette.neutralSecondary; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n\n  var checkboxBorderColor = palette.neutralPrimary;\n  var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked; // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\n  // semanticColors.inputBackgroundCheckedHovered\n\n  var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  var checkboxTextColor = semanticColors.bodyText;\n  var checkboxTextColorDisabled = semanticColors.disabledText;\n  var indeterminateDotStyles = [(_a = {\n    content: '\"\"',\n    borderRadius: effects.roundedCorner2,\n    position: 'absolute',\n    width: 10,\n    height: 10,\n    top: 4,\n    left: 4,\n    boxSizing: 'border-box',\n    borderWidth: 5,\n    borderStyle: 'solid',\n    borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\n    transitionProperty: 'border-width, border, border-color',\n    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING\n  }, _a[HighContrastSelector] = {\n    borderColor: 'WindowText'\n  }, _a)];\n  return {\n    root: [classNames.root, {\n      position: 'relative',\n      display: 'flex'\n    }, reversed && 'reversed', checked && 'is-checked', !disabled && 'is-enabled', disabled && 'is-disabled', !disabled && [!checked && (_b = {}, _b[\":hover .\" + classNames.checkbox] = (_c = {\n      borderColor: checkboxBorderHoveredColor\n    }, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c), _b[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderHoveredColor\n    }, _b[\":hover .\" + classNames.checkmark] = (_d = {\n      color: checkmarkFontColorHovered,\n      opacity: '1'\n    }, _d[HighContrastSelector] = {\n      color: 'Highlight'\n    }, _d), _b), checked && !indeterminate && (_e = {}, _e[\":hover .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[\":focus .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[HighContrastSelector] = (_f = {}, _f[\":hover .\" + classNames.checkbox] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _f[\":focus .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f[\":hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f), _e), indeterminate && (_g = {}, _g[\":hover .\" + classNames.checkbox + \", :hover .\" + classNames.checkbox + \":after\"] = (_h = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _h[HighContrastSelector] = {\n      borderColor: 'WindowText'\n    }, _h), _g[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _g[\":hover .\" + classNames.checkmark] = {\n      opacity: '0'\n    }, _g), (_j = {}, _j[\":hover .\" + classNames.text + \", :focus .\" + classNames.text] = (_k = {\n      color: checkboxHoveredTextColor\n    }, _k[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, _k), _j)], className],\n    input: (_l = {\n      position: 'absolute',\n      background: 'none',\n      opacity: 0\n    }, _l[\".\" + IsFocusVisibleClassName + \" &:focus + label::before\"] = (_m = {\n      outline: '1px solid ' + theme.palette.neutralSecondary,\n      outlineOffset: '2px'\n    }, _m[HighContrastSelector] = {\n      outline: '1px solid WindowText'\n    }, _m), _l),\n    label: [classNames.label, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n      cursor: disabled ? 'default' : 'pointer',\n      position: 'relative',\n      userSelect: 'none'\n    }, reversed && {\n      flexDirection: 'row-reverse',\n      justifyContent: 'flex-end'\n    }, {\n      '&::before': {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        content: '\"\"',\n        pointerEvents: 'none'\n      }\n    }],\n    checkbox: [classNames.checkbox, (_o = {\n      position: 'relative',\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: MS_CHECKBOX_LABEL_SIZE,\n      width: MS_CHECKBOX_LABEL_SIZE,\n      border: \"1px solid \" + checkboxBorderColor,\n      borderRadius: effects.roundedCorner2,\n      boxSizing: 'border-box',\n      transitionProperty: 'background, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n\n      /* in case the icon is bigger than the box */\n      overflow: 'hidden',\n      ':after': indeterminate ? indeterminateDotStyles : null\n    }, _o[HighContrastSelector] = __assign({\n      borderColor: 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _o), indeterminate && {\n      borderColor: checkboxBorderIndeterminateColor\n    }, !reversed ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\n    // is used, there will be only a 4px margin from checkbox to label. The label by default would have\n    // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\n    // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n    {\n      marginRight: 4\n    } : {\n      marginLeft: 4\n    }, !disabled && !indeterminate && checked && (_p = {\n      background: checkboxBackgroundChecked,\n      borderColor: checkboxBorderColorChecked\n    }, _p[HighContrastSelector] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _p), disabled && (_q = {\n      borderColor: checkboxBorderColorDisabled\n    }, _q[HighContrastSelector] = {\n      borderColor: 'GrayText'\n    }, _q), checked && disabled && (_r = {\n      background: checkboxBackgroundDisabledChecked,\n      borderColor: checkboxBorderColorDisabled\n    }, _r[HighContrastSelector] = {\n      background: 'Window'\n    }, _r)],\n    checkmark: [classNames.checkmark, (_s = {\n      opacity: checked && !indeterminate ? '1' : '0',\n      color: checkmarkFontColor\n    }, _s[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'Window'\n    }, getHighContrastNoAdjustStyle()), _s)],\n    text: [classNames.text, (_t = {\n      color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n      fontSize: fonts.medium.fontSize,\n      lineHeight: '20px'\n    }, _t[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _t), !reversed ? {\n      marginLeft: 4\n    } : {\n      marginRight: 4\n    }]\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,oBAAT,EAA+BC,mBAA/B,EAAoDC,4BAApD,QAAwF,2BAAxF;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AAIA,IAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE,aADiB;EAEvBC,KAAK,EAAE,mBAFgB;EAGvBC,QAAQ,EAAE,sBAHa;EAIvBC,SAAS,EAAE,uBAJY;EAKvBC,IAAI,EAAE;AALiB,CAAzB;AAQA,IAAMC,sBAAsB,GAAG,MAA/B;AACA,IAAMC,+BAA+B,GAAG,OAAxC;AACA,IAAMC,6BAA6B,GAAG,6BAAtC;AAEA,OAAO,IAAMC,SAAS,GAAG,UAACC,KAAD,EAA2B;;;EAC1C,aAAS,GAAkFA,KAAK,UAAhG;EAAA,IAAWC,KAAK,GAA2ED,KAAK,MAAhG;EAAA,IAAkBE,QAAQ,GAAiEF,KAAK,SAAhG;EAAA,IAA4BG,OAAO,GAAwDH,KAAK,QAAhG;EAAA,IAAqCI,QAAQ,GAA8CJ,KAAK,SAAhG;EAAA,IAA+CK,wBAAwB,GAAoBL,KAAK,yBAAhG;EAAA,IAAyEM,aAAa,GAAKN,KAAK,cAAhG;EACA,kBAAc,GAA8BC,KAAK,eAAjD;EAAA,IAAgBM,OAAO,GAAqBN,KAAK,QAAjD;EAAA,IAAyBO,OAAO,GAAYP,KAAK,QAAjD;EAAA,IAAkCQ,KAAK,GAAKR,KAAK,MAAjD;EAER,IAAMS,UAAU,GAAGvB,mBAAmB,CAACG,gBAAD,EAAmBW,KAAnB,CAAtC;EAEA,IAAMU,kBAAkB,GAAGC,cAAc,CAACC,sBAA1C,CANkD,CAOlD;;EACA,IAAMC,yBAAyB,GAAGN,OAAO,CAACO,gBAA1C,CARkD,CASlD;;EACA,IAAMC,mBAAmB,GAAGR,OAAO,CAACS,cAApC;EACA,IAAMC,gCAAgC,GAAGN,cAAc,CAACO,sBAAxD;EACA,IAAMC,0BAA0B,GAAGR,cAAc,CAACO,sBAAlD;EACA,IAAME,2BAA2B,GAAGT,cAAc,CAACU,mBAAnD;EACA,IAAMC,0BAA0B,GAAGX,cAAc,CAACY,kBAAlD;EACA,IAAMC,uCAAuC,GAAGb,cAAc,CAACc,6BAA/D;EACA,IAAMC,yBAAyB,GAAGf,cAAc,CAACO,sBAAjD,CAhBkD,CAiBlD;EACA;;EACA,IAAMS,gCAAgC,GAAGhB,cAAc,CAACc,6BAAxD;EACA,IAAMG,iCAAiC,GAAGjB,cAAc,CAACc,6BAAzD;EACA,IAAMI,wBAAwB,GAAGlB,cAAc,CAACmB,gBAAhD;EACA,IAAMC,iCAAiC,GAAGpB,cAAc,CAACU,mBAAzD;EACA,IAAMW,iBAAiB,GAAGrB,cAAc,CAACsB,QAAzC;EACA,IAAMC,yBAAyB,GAAGvB,cAAc,CAACwB,YAAjD;EAEA,IAAMC,sBAAsB,GAAW;IAEnCC,OAAO,EAAE;IACTC,YAAY,EAAEhC,OAAO,CAACiC;IACtBC,QAAQ,EAAE;IACVC,KAAK,EAAE;IACPC,MAAM,EAAE;IACRC,GAAG,EAAE;IACLC,IAAI,EAAE;IACNC,SAAS,EAAE;IACXC,WAAW,EAAE;IACbC,WAAW,EAAE;IACbC,WAAW,EAAE7C,QAAQ,GAAGiB,2BAAH,GAAiCH;IACtDgC,kBAAkB,EAAE;IACpBC,kBAAkB,EAAEtD;IACpBuD,wBAAwB,EAAEtD;KAC1BuD,GAACnE,oBAAD,IAAwB;IACtB+D,WAAW,EAAE;EADS,KAhBW,EAAvC;EAsBA,OAAO;IACL1D,IAAI,EAAE,CACJmB,UAAU,CAACnB,IADP,EAEJ;MACEkD,QAAQ,EAAE,UADZ;MAEEa,OAAO,EAAE;IAFX,CAFI,EAMJpD,QAAQ,IAAI,UANR,EAOJC,OAAO,IAAI,YAPP,EAQJ,CAACC,QAAD,IAAa,YART,EASJA,QAAQ,IAAI,aATR,EAUJ,CAACA,QAAD,IAAa,CACX,CAACD,OAAD,KAAQoD,SACNA,GAAC,aAAW7C,UAAU,CAACjB,QAAvB,KAAiC+D;MAC/BP,WAAW,EAAE1B;IADkB,GAE/BiC,GAACtE,oBAAD,IAAwB;MACtB+D,WAAW,EAAE;IADS,CAFO,IAAjC,CADM,EAONM,GAAC,aAAW7C,UAAU,CAACjB,QAAvB,IAAoC;MAAEwD,WAAW,EAAE1B;IAAf,CAP9B,EAQNgC,GAAC,aAAW7C,UAAU,CAAChB,SAAvB,KAAkC+D;MAChCC,KAAK,EAAE5C,yBADyB;MAEhC6C,OAAO,EAAE;IAFuB,GAGhCF,GAACvE,oBAAD,IAAwB;MACtBwE,KAAK,EAAE;IADe,CAHQ,IAAlC,CARM,IAAR,CADW,EAiBXvD,OAAO,IACL,CAACG,aADH,KACgBsD,SACZA,GAAC,aAAWlD,UAAU,CAACjB,QAAvB,IAAoC;MAClCoE,UAAU,EAAEjC,gCADsB;MAElCqB,WAAW,EAAEpB;IAFqB,CADxB,EAKZ+B,GAAC,aAAWlD,UAAU,CAACjB,QAAvB,IAAoC;MAClCoE,UAAU,EAAEjC,gCADsB;MAElCqB,WAAW,EAAEpB;IAFqB,CALxB,EASZ+B,GAAC1E,oBAAD,KAAqB4E,SACnBA,GAAC,aAAWpD,UAAU,CAACjB,QAAvB,IAAoC;MAClCoE,UAAU,EAAE,WADsB;MAElCZ,WAAW,EAAE;IAFqB,CADjB,EAKnBa,GAAC,aAAWpD,UAAU,CAACjB,QAAvB,IAAoC;MAClCoE,UAAU,EAAE;IADsB,CALjB,EAQnBC,GAAC,mBAAiBpD,UAAU,CAACjB,QAA7B,IAA0C;MACxCoE,UAAU,EAAE;IAD4B,CARvB,EAWnBC,GAAC,mBAAiBpD,UAAU,CAAChB,SAA7B,IAA2C;MACzCgE,KAAK,EAAE;IADkC,CAXxB,EAcnBI,GAAC,aAAWpD,UAAU,CAAChB,SAAvB,IAAqC;MACnCgE,KAAK,EAAE;IAD4B,CAdlB,IAArB,CATY,IADhB,CAjBW,EA8CXpD,aAAa,cACXyD,GAAC,aAAWrD,UAAU,CAACjB,QAAtB,GAA8B,YAA9B,GAA2CiB,UAAU,CAACjB,QAAtD,GAA8D,QAA/D,KAAuEuE;MACrEf,WAAW,EAAExB;IADwD,GAErEuC,GAAC9E,oBAAD,IAAwB;MACtB+D,WAAW,EAAE;IADS,CAF6C,IAAvE,CADW,EAOXc,GAAC,aAAWrD,UAAU,CAACjB,QAAvB,IAAoC;MAClCwD,WAAW,EAAExB;IADqB,CAPzB,EAUXsC,GAAC,aAAWrD,UAAU,CAAChB,SAAvB,IAAqC;MACnCiE,OAAO,EAAE;IAD0B,CAV1B,KA9CF,YA6DTM,GAAC,aAAWvD,UAAU,CAACf,IAAtB,GAA0B,YAA1B,GAAuCe,UAAU,CAACf,IAAnD,KAAyDuE;MACvDR,KAAK,EAAE5B;IADgD,GAEvDoC,GAAChF,oBAAD,IAAwB;MACtBwE,KAAK,EAAEtD,QAAQ,GAAG,UAAH,GAAgB;IADT,CAF+B,IAAzD,KA7DS,EAVT,EA+EJ+D,SA/EI,CADD;IAkFLC,KAAK;MACH3B,QAAQ,EAAE,UADP;MAEHoB,UAAU,EAAE,MAFT;MAIHF,OAAO,EAAE;IAJN,GAKHU,GAAC,MAAIhF,uBAAJ,GAA2B,0BAA5B,KAAsDiF;MACpDC,OAAO,EAAE,eAAetE,KAAK,CAACO,OAAN,CAAcO,gBADc;MAEpDyD,aAAa,EAAE;IAFqC,GAGpDF,GAACpF,oBAAD,IAAwB;MACtBqF,OAAO,EAAE;IADa,CAH4B,IAAtD,CALG,KAlFA;IA+FL/E,KAAK,EAAE,CACLkB,UAAU,CAAClB,KADN,EAELS,KAAK,CAACQ,KAAN,CAAYgE,MAFP,EAGL;MACEnB,OAAO,EAAE,MADX;MAEEoB,UAAU,EAAErE,wBAAwB,GAAG,QAAH,GAAc,YAFpD;MAGEsE,MAAM,EAAEvE,QAAQ,GAAG,SAAH,GAAe,SAHjC;MAIEqC,QAAQ,EAAE,UAJZ;MAKEmC,UAAU,EAAE;IALd,CAHK,EAUL1E,QAAQ,IAAI;MACV2E,aAAa,EAAE,aADL;MAEVC,cAAc,EAAE;IAFN,CAVP,EAcL;MACE,aAAa;QACXrC,QAAQ,EAAE,UADC;QAEXI,IAAI,EAAE,CAFK;QAGXkC,KAAK,EAAE,CAHI;QAIXnC,GAAG,EAAE,CAJM;QAKXoC,MAAM,EAAE,CALG;QAMX1C,OAAO,EAAE,IANE;QAOX2C,aAAa,EAAE;MAPJ;IADf,CAdK,CA/FF;IAyHLxF,QAAQ,EAAE,CACRiB,UAAU,CAACjB,QADH;MAGNgD,QAAQ,EAAE;MACVa,OAAO,EAAE;MACT4B,UAAU,EAAE;MACZR,UAAU,EAAE;MACZI,cAAc,EAAE;MAChBnC,MAAM,EAAE/C;MACR8C,KAAK,EAAE9C;MACPuF,MAAM,EAAE,eAAanE;MACrBuB,YAAY,EAAEhC,OAAO,CAACiC;MACtBM,SAAS,EAAE;MACXI,kBAAkB,EAAE;MACpBC,kBAAkB,EAAEtD;MACpBuD,wBAAwB,EAAEtD;;MAE1B;MACAsF,QAAQ,EAAE;MACV,UAAU9E,aAAa,GAAG+B,sBAAH,GAA4B;OACnDgD,GAACnG,oBAAD,IAAqBoG;MACnBrC,WAAW,EAAE;IADM,GAEhB7D,4BAA4B,EAFZ,KApBf,GAyBRkB,aAAa,IAAI;MACf2C,WAAW,EAAE/B;IADE,CAzBT,EA4BR,CAAChB,QAAD,GACI;IACA;IACA;IACA;IACA;MACEqF,WAAW,EAAE;IADf,CALJ,GAQI;MACEC,UAAU,EAAE;IADd,CApCI,EAuCR,CAACpF,QAAD,IACE,CAACE,aADH,IAEEH,OAFF,KAESsF;MACL5B,UAAU,EAAElC,yBADP;MAELsB,WAAW,EAAE7B;IAFR,GAGLqE,GAACvG,oBAAD,IAAwB;MACtB2E,UAAU,EAAE,WADU;MAEtBZ,WAAW,EAAE;IAFS,CAHnB,IAFT,CAvCQ,EAiDR7C,QAAQ;MACN6C,WAAW,EAAE5B;IADP,GAENqE,GAACxG,oBAAD,IAAwB;MACtB+D,WAAW,EAAE;IADS,CAFlB,KAjDA,EAuDR9C,OAAO,IACLC,QADF,KACUuF;MACN9B,UAAU,EAAE7B,iCADN;MAENiB,WAAW,EAAE5B;IAFP,GAGNsE,GAACzG,oBAAD,IAAwB;MACtB2E,UAAU,EAAE;IADU,CAHlB,IADV,CAvDQ,CAzHL;IAyLLnE,SAAS,EAAE,CACTgB,UAAU,CAAChB,SADF;MAGPiE,OAAO,EAAExD,OAAO,IAAI,CAACG,aAAZ,GAA4B,GAA5B,GAAkC;MAC3CoD,KAAK,EAAE/C;OACPiF,GAAC1G,oBAAD,IAAqBoG;MACnB5B,KAAK,EAAEtD,QAAQ,GAAG,UAAH,GAAgB;IADZ,GAEhBhB,4BAA4B,EAFZ,KALd,EAzLN;IAoMLO,IAAI,EAAE,CACJe,UAAU,CAACf,IADP;MAGF+D,KAAK,EAAEtD,QAAQ,GAAG+B,yBAAH,GAA+BF;MAC9C4D,QAAQ,EAAEpF,KAAK,CAACgE,MAAN,CAAaoB;MACvBC,UAAU,EAAE;OACZC,GAAC7G,oBAAD,IAAqBoG;MACnB5B,KAAK,EAAEtD,QAAQ,GAAG,UAAH,GAAgB;IADZ,GAEhBhB,4BAA4B,EAFZ,KANnB,GAWJ,CAACc,QAAD,GACI;MACEsF,UAAU,EAAE;IADd,CADJ,GAII;MACED,WAAW,EAAE;IADf,CAfA;EApMD,CAAP;AAwND,CAxQM","names":["HighContrastSelector","getGlobalClassNames","getHighContrastNoAdjustStyle","IsFocusVisibleClassName","GlobalClassNames","root","label","checkbox","checkmark","text","MS_CHECKBOX_LABEL_SIZE","MS_CHECKBOX_TRANSITION_DURATION","MS_CHECKBOX_TRANSITION_TIMING","getStyles","props","theme","reversed","checked","disabled","isUsingCustomLabelRender","indeterminate","effects","palette","fonts","classNames","checkmarkFontColor","semanticColors","inputForegroundChecked","checkmarkFontColorHovered","neutralSecondary","checkboxBorderColor","neutralPrimary","checkboxBorderIndeterminateColor","inputBackgroundChecked","checkboxBorderColorChecked","checkboxBorderColorDisabled","disabledBodySubtext","checkboxBorderHoveredColor","inputBorderHovered","checkboxBorderIndeterminateHoveredColor","inputBackgroundCheckedHovered","checkboxBackgroundChecked","checkboxBackgroundCheckedHovered","checkboxBorderColorCheckedHovered","checkboxHoveredTextColor","inputTextHovered","checkboxBackgroundDisabledChecked","checkboxTextColor","bodyText","checkboxTextColorDisabled","disabledText","indeterminateDotStyles","content","borderRadius","roundedCorner2","position","width","height","top","left","boxSizing","borderWidth","borderStyle","borderColor","transitionProperty","transitionDuration","transitionTimingFunction","_a","display","_b","_c","_d","color","opacity","_e","background","_f","_g","_h","_j","_k","className","input","_l","_m","outline","outlineOffset","medium","alignItems","cursor","userSelect","flexDirection","justifyContent","right","bottom","pointerEvents","flexShrink","border","overflow","_o","__assign","marginRight","marginLeft","_p","_q","_r","_s","fontSize","lineHeight","_t"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Checkbox\\Checkbox.styles.ts"],"sourcesContent":["import { HighContrastSelector, getGlobalClassNames, getHighContrastNoAdjustStyle } from '@fluentui/style-utilities';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport type { ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport type { IStyle } from '@fluentui/style-utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text',\n};\n\nconst MS_CHECKBOX_LABEL_SIZE = '20px';\nconst MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nconst MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\n\nexport const getStyles = (props: ICheckboxStyleProps): ICheckboxStyles => {\n  const { className, theme, reversed, checked, disabled, isUsingCustomLabelRender, indeterminate } = props;\n  const { semanticColors, effects, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const checkmarkFontColor = semanticColors.inputForegroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n  const checkmarkFontColorHovered = palette.neutralSecondary;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n  const checkboxBorderColor = palette.neutralPrimary;\n  const checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  const checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  const checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  const checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  const checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  const checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\n  // semanticColors.inputBackgroundCheckedHovered\n  const checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  const checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  const checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  const checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  const checkboxTextColor = semanticColors.bodyText;\n  const checkboxTextColorDisabled = semanticColors.disabledText;\n\n  const indeterminateDotStyles: IStyle = [\n    {\n      content: '\"\"',\n      borderRadius: effects.roundedCorner2,\n      position: 'absolute',\n      width: 10,\n      height: 10,\n      top: 4,\n      left: 4,\n      boxSizing: 'border-box',\n      borderWidth: 5,\n      borderStyle: 'solid',\n      borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\n      transitionProperty: 'border-width, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n      [HighContrastSelector]: {\n        borderColor: 'WindowText',\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        display: 'flex',\n      },\n      reversed && 'reversed',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      !disabled && [\n        !checked && {\n          [`:hover .${classNames.checkbox}`]: {\n            borderColor: checkboxBorderHoveredColor,\n            [HighContrastSelector]: {\n              borderColor: 'Highlight',\n            },\n          },\n          [`:focus .${classNames.checkbox}`]: { borderColor: checkboxBorderHoveredColor },\n          [`:hover .${classNames.checkmark}`]: {\n            color: checkmarkFontColorHovered,\n            opacity: '1',\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n        checked &&\n          !indeterminate && {\n            [`:hover .${classNames.checkbox}`]: {\n              background: checkboxBackgroundCheckedHovered,\n              borderColor: checkboxBorderColorCheckedHovered,\n            },\n            [`:focus .${classNames.checkbox}`]: {\n              background: checkboxBackgroundCheckedHovered,\n              borderColor: checkboxBorderColorCheckedHovered,\n            },\n            [HighContrastSelector]: {\n              [`:hover .${classNames.checkbox}`]: {\n                background: 'Highlight',\n                borderColor: 'Highlight',\n              },\n              [`:focus .${classNames.checkbox}`]: {\n                background: 'Highlight',\n              },\n              [`:focus:hover .${classNames.checkbox}`]: {\n                background: 'Highlight',\n              },\n              [`:focus:hover .${classNames.checkmark}`]: {\n                color: 'Window',\n              },\n              [`:hover .${classNames.checkmark}`]: {\n                color: 'Window',\n              },\n            },\n          },\n        indeterminate && {\n          [`:hover .${classNames.checkbox}, :hover .${classNames.checkbox}:after`]: {\n            borderColor: checkboxBorderIndeterminateHoveredColor,\n            [HighContrastSelector]: {\n              borderColor: 'WindowText',\n            },\n          },\n          [`:focus .${classNames.checkbox}`]: {\n            borderColor: checkboxBorderIndeterminateHoveredColor,\n          },\n          [`:hover .${classNames.checkmark}`]: {\n            opacity: '0',\n          },\n        },\n        {\n          [`:hover .${classNames.text}, :focus .${classNames.text}`]: {\n            color: checkboxHoveredTextColor,\n            [HighContrastSelector]: {\n              color: disabled ? 'GrayText' : 'WindowText',\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    input: {\n      position: 'absolute',\n      background: 'none',\n\n      opacity: 0,\n      [`.${IsFocusVisibleClassName} &:focus + label::before`]: {\n        outline: '1px solid ' + theme.palette.neutralSecondary,\n        outlineOffset: '2px',\n        [HighContrastSelector]: {\n          outline: '1px solid WindowText',\n        },\n      },\n    },\n    label: [\n      classNames.label,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n        cursor: disabled ? 'default' : 'pointer',\n        position: 'relative',\n        userSelect: 'none',\n      },\n      reversed && {\n        flexDirection: 'row-reverse',\n        justifyContent: 'flex-end',\n      },\n      {\n        '&::before': {\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          content: '\"\"',\n          pointerEvents: 'none',\n        },\n      },\n    ],\n    checkbox: [\n      classNames.checkbox,\n      {\n        position: 'relative',\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: MS_CHECKBOX_LABEL_SIZE,\n        width: MS_CHECKBOX_LABEL_SIZE,\n        border: `1px solid ${checkboxBorderColor}`,\n        borderRadius: effects.roundedCorner2,\n        boxSizing: 'border-box',\n        transitionProperty: 'background, border, border-color',\n        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n\n        /* in case the icon is bigger than the box */\n        overflow: 'hidden',\n        ':after': indeterminate ? indeterminateDotStyles : null,\n        [HighContrastSelector]: {\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n      indeterminate && {\n        borderColor: checkboxBorderIndeterminateColor,\n      },\n      !reversed\n        ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\n          // is used, there will be only a 4px margin from checkbox to label. The label by default would have\n          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\n          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n          {\n            marginRight: 4,\n          }\n        : {\n            marginLeft: 4,\n          },\n      !disabled &&\n        !indeterminate &&\n        checked && {\n          background: checkboxBackgroundChecked,\n          borderColor: checkboxBorderColorChecked,\n          [HighContrastSelector]: {\n            background: 'Highlight',\n            borderColor: 'Highlight',\n          },\n        },\n      disabled && {\n        borderColor: checkboxBorderColorDisabled,\n        [HighContrastSelector]: {\n          borderColor: 'GrayText',\n        },\n      },\n      checked &&\n        disabled && {\n          background: checkboxBackgroundDisabledChecked,\n          borderColor: checkboxBorderColorDisabled,\n          [HighContrastSelector]: {\n            background: 'Window',\n          },\n        },\n    ],\n    checkmark: [\n      classNames.checkmark,\n      {\n        opacity: checked && !indeterminate ? '1' : '0',\n        color: checkmarkFontColor,\n        [HighContrastSelector]: {\n          color: disabled ? 'GrayText' : 'Window',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    ],\n    text: [\n      classNames.text,\n      {\n        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n        fontSize: fonts.medium.fontSize,\n        lineHeight: '20px',\n        [HighContrastSelector]: {\n          color: disabled ? 'GrayText' : 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n      !reversed\n        ? {\n            marginLeft: 4,\n          }\n        : {\n            marginRight: 4,\n          },\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}