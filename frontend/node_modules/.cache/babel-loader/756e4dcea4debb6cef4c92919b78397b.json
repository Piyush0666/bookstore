{"ast":null,"code":"import * as React from 'react';\nimport { FocusZone } from '../../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { Icon } from '../../../Icon';\nimport { getStyles } from './CalendarMonth.styles';\nimport { css, getRTL, classNamesFunction, KeyCodes, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { usePrevious } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from '../defaults';\nvar MONTHS_PER_ROW = 4;\nvar getClassNames = classNamesFunction();\nvar DEFAULT_PROPS = {\n  styles: getStyles,\n  strings: undefined,\n  navigationIcons: defaultCalendarNavigationIcons,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  yearPickerHidden: false\n};\n\nfunction useAnimateBackwards(_a) {\n  var navigatedDate = _a.navigatedDate;\n  var currentYear = navigatedDate.getFullYear();\n  var previousYear = usePrevious(currentYear);\n\n  if (previousYear === undefined || previousYear === currentYear) {\n    return undefined;\n  } else {\n    return previousYear > currentYear;\n  }\n}\n\nfunction useFocusLogic(_a) {\n  var componentRef = _a.componentRef;\n  var navigatedMonthRef = React.useRef(null);\n  var calendarYearRef = React.useRef(null);\n  var focusOnUpdate = React.useRef(false);\n  var focus = React.useCallback(function () {\n    if (calendarYearRef.current) {\n      calendarYearRef.current.focus();\n    } else if (navigatedMonthRef.current) {\n      navigatedMonthRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: focus\n    };\n  }, [focus]);\n  React.useEffect(function () {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  var focusOnNextUpdate = function () {\n    focusOnUpdate.current = true;\n  };\n\n  return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate];\n}\n\nexport var CalendarMonthBase = function (propsWithoutDefaults) {\n  var _a, _b;\n\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  var _c = useFocusLogic(props),\n      navigatedMonthRef = _c[0],\n      calendarYearRef = _c[1],\n      focusOnNextUpdate = _c[2];\n\n  var _d = React.useState(false),\n      isYearPickerVisible = _d[0],\n      setIsYearPickerVisible = _d[1];\n\n  var animateBackwards = useAnimateBackwards(props);\n  var navigatedDate = props.navigatedDate,\n      selectedDate = props.selectedDate,\n      strings = props.strings,\n      _e = props.today,\n      today = _e === void 0 ? new Date() : _e,\n      navigationIcons = props.navigationIcons,\n      dateTimeFormatter = props.dateTimeFormatter,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      theme = props.theme,\n      styles = props.styles,\n      className = props.className,\n      allFocusable = props.allFocusable,\n      highlightCurrentMonth = props.highlightCurrentMonth,\n      highlightSelectedMonth = props.highlightSelectedMonth,\n      animationDirection = props.animationDirection,\n      yearPickerHidden = props.yearPickerHidden,\n      onNavigateDate = props.onNavigateDate;\n\n  var selectMonthCallback = function (newMonth) {\n    return function () {\n      return onSelectMonth(newMonth);\n    };\n  };\n\n  var onSelectNextYear = function () {\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  var onSelectPrevYear = function () {\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  var onSelectMonth = function (newMonth) {\n    var _a; // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n\n\n    (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  var onHeaderSelect = function () {\n    var _a;\n\n    if (!yearPickerHidden) {\n      focusOnNextUpdate();\n      setIsYearPickerVisible(true);\n    } else {\n      (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  };\n\n  var onSelectYear = function (selectedYear) {\n    focusOnNextUpdate();\n    var navYear = navigatedDate.getFullYear();\n\n    if (navYear !== selectedYear) {\n      var newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear); // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n\n      onNavigateDate(newNavigationDate, true);\n    }\n\n    setIsYearPickerVisible(false);\n  };\n\n  var onYearPickerHeaderSelect = function (focus) {\n    focusOnNextUpdate();\n    setIsYearPickerVisible(false);\n  }; // navigationIcons has a default value in defaultProps, but typescript doesn't recognize this\n\n\n  var leftNavigationIcon = navigationIcons.leftNavigation;\n  var rightNavigationIcon = navigationIcons.rightNavigation;\n  var dateFormatter = dateTimeFormatter; // determine if previous/next years are in bounds\n\n  var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n  var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    hasHeaderClickCallback: !!props.onHeaderSelect || !yearPickerHidden,\n    highlightCurrent: highlightCurrentMonth,\n    highlightSelected: highlightSelectedMonth,\n    animateBackwards: animateBackwards,\n    animationDirection: animationDirection\n  });\n\n  if (isYearPickerVisible) {\n    var _f = getYearStrings(props),\n        onRenderYear = _f[0],\n        yearStrings = _f[1]; // use navigated date for the year picker\n\n\n    return React.createElement(CalendarYear, {\n      key: 'calendarYear',\n      minYear: minDate ? minDate.getFullYear() : undefined,\n      maxYear: maxDate ? maxDate.getFullYear() : undefined,\n      // eslint-disable-next-line react/jsx-no-bind\n      onSelectYear: onSelectYear,\n      navigationIcons: navigationIcons,\n      // eslint-disable-next-line react/jsx-no-bind\n      onHeaderSelect: onYearPickerHeaderSelect,\n      selectedYear: selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined,\n      onRenderYear: onRenderYear,\n      strings: yearStrings,\n      componentRef: calendarYearRef,\n      styles: styles,\n      highlightCurrentYear: highlightCurrentMonth,\n      highlightSelectedYear: highlightSelectedMonth,\n      animationDirection: animationDirection\n    });\n  }\n\n  var rowIndexes = [];\n\n  for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n    rowIndexes.push(i);\n  }\n\n  var yearString = dateFormatter.formatYear(navigatedDate);\n  var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n  return React.createElement(\"div\", {\n    className: classNames.root\n  }, React.createElement(\"div\", {\n    className: classNames.headerContainer\n  }, React.createElement(\"button\", {\n    className: classNames.currentItemButton,\n    onClick: onHeaderSelect,\n    onKeyDown: onButtonKeyDown(onHeaderSelect),\n    \"aria-label\": headerAriaLabel,\n    \"data-is-focusable\": !!props.onHeaderSelect || !yearPickerHidden,\n    tabIndex: !!props.onHeaderSelect || !yearPickerHidden ? 0 : -1,\n    type: \"button\"\n  }, React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, yearString)), React.createElement(\"div\", {\n    className: classNames.navigationButtonsContainer\n  }, React.createElement(\"button\", {\n    className: css(classNames.navigationButton, (_a = {}, _a[classNames.disabled] = !isPrevYearInBounds, _a)),\n    \"aria-disabled\": !isPrevYearInBounds,\n    tabIndex: isPrevYearInBounds ? undefined : allFocusable ? 0 : -1,\n    onClick: isPrevYearInBounds ? onSelectPrevYear : undefined,\n    onKeyDown: isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined,\n    title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n  })), React.createElement(\"button\", {\n    className: css(classNames.navigationButton, (_b = {}, _b[classNames.disabled] = !isNextYearInBounds, _b)),\n    \"aria-disabled\": !isNextYearInBounds,\n    tabIndex: isNextYearInBounds ? undefined : allFocusable ? 0 : -1,\n    onClick: isNextYearInBounds ? onSelectNextYear : undefined,\n    onKeyDown: isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined,\n    title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n  })))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n    className: classNames.gridContainer,\n    role: \"grid\",\n    \"aria-label\": yearString\n  }, rowIndexes.map(function (rowNum) {\n    var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n    return React.createElement(\"div\", {\n      key: 'monthRow_' + rowNum + navigatedDate.getFullYear(),\n      role: \"row\",\n      className: classNames.buttonRow\n    }, monthsForRow.map(function (month, index) {\n      var _a;\n\n      var monthIndex = rowNum * MONTHS_PER_ROW + index;\n      var indexedMonth = setMonth(navigatedDate, monthIndex);\n      var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n      var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n      var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n      var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n      return React.createElement(\"button\", {\n        ref: isNavigatedMonth ? navigatedMonthRef : undefined,\n        role: 'gridcell',\n        className: css(classNames.itemButton, (_a = {}, _a[classNames.current] = highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today), _a[classNames.selected] = highlightSelectedMonth && isSelectedMonth && isSelectedYear, _a[classNames.disabled] = !isInBounds, _a)),\n        disabled: !allFocusable && !isInBounds,\n        key: monthIndex,\n        onClick: isInBounds ? selectMonthCallback(monthIndex) : undefined,\n        onKeyDown: isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined,\n        \"aria-label\": dateFormatter.formatMonth(indexedMonth, strings),\n        \"aria-selected\": isNavigatedMonth,\n        \"data-is-focusable\": isInBounds ? true : undefined,\n        type: \"button\"\n      }, month);\n    }));\n  }))));\n};\nCalendarMonthBase.displayName = 'CalendarMonthBase';\n\nfunction getYearStrings(_a) {\n  var strings = _a.strings,\n      navigatedDate = _a.navigatedDate,\n      dateTimeFormatter = _a.dateTimeFormatter;\n\n  var yearToString = function (year) {\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      var yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n\n    return String(year);\n  };\n\n  var yearRangeToString = function (yearRange) {\n    return yearToString(yearRange.fromYear) + \" - \" + yearToString(yearRange.toYear);\n  };\n\n  var yearRangeToNextDecadeLabel = function (yearRange) {\n    return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + yearRangeToString(yearRange) : '';\n  };\n\n  var yearRangeToPrevDecadeLabel = function (yearRange) {\n    return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + yearRangeToString(yearRange) : '';\n  };\n\n  return [yearToString, {\n    rangeAriaLabel: yearRangeToString,\n    prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n    nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n    headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n  }];\n}\n\nfunction isCurrentMonth(month, year, today) {\n  return today.getFullYear() === year && today.getMonth() === month;\n}\n\nfunction onButtonKeyDown(callback) {\n  return function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback();\n        break;\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["React","FocusZone","addYears","setMonth","getYearStart","getYearEnd","getMonthStart","getMonthEnd","compareDatePart","DEFAULT_DATE_FORMATTING","Icon","getStyles","css","getRTL","classNamesFunction","KeyCodes","format","getPropsWithDefaults","CalendarYear","usePrevious","defaultCalendarNavigationIcons","MONTHS_PER_ROW","getClassNames","DEFAULT_PROPS","styles","strings","undefined","navigationIcons","dateTimeFormatter","yearPickerHidden","useAnimateBackwards","_a","navigatedDate","currentYear","getFullYear","previousYear","useFocusLogic","componentRef","navigatedMonthRef","useRef","calendarYearRef","focusOnUpdate","focus","useCallback","current","useImperativeHandle","useEffect","focusOnNextUpdate","CalendarMonthBase","props","propsWithoutDefaults","useState","isYearPickerVisible","setIsYearPickerVisible","animateBackwards","selectedDate","_e","today","Date","minDate","maxDate","theme","className","allFocusable","highlightCurrentMonth","highlightSelectedMonth","animationDirection","onNavigateDate","selectMonthCallback","newMonth","onSelectNextYear","onSelectPrevYear","onSelectMonth","onHeaderSelect","onSelectYear","selectedYear","navYear","newNavigationDate","getTime","setFullYear","getMonth","onYearPickerHeaderSelect","leftNavigationIcon","leftNavigation","rightNavigationIcon","rightNavigation","dateFormatter","isPrevYearInBounds","isNextYearInBounds","classNames","hasHeaderClickCallback","highlightCurrent","highlightSelected","getYearStrings","onRenderYear","yearStrings","key","minYear","maxYear","highlightCurrentYear","highlightSelectedYear","rowIndexes","i","shortMonths","length","push","yearString","formatYear","headerAriaLabel","monthPickerHeaderAriaLabel","root","headerContainer","currentItemButton","onClick","onKeyDown","onButtonKeyDown","tabIndex","type","navigationButtonsContainer","navigationButton","disabled","title","prevYearAriaLabel","iconName","_b","nextYearAriaLabel","gridContainer","role","map","rowNum","monthsForRow","slice","buttonRow","month","index","monthIndex","indexedMonth","isNavigatedMonth","isSelectedMonth","isSelectedYear","isInBounds","ref","itemButton","isCurrentMonth","selected","formatMonth","displayName","yearToString","year","yearFormattingDate","String","yearRangeToString","yearRange","fromYear","toYear","yearRangeToNextDecadeLabel","nextYearRangeAriaLabel","yearRangeToPrevDecadeLabel","prevYearRangeAriaLabel","rangeAriaLabel","prevRangeAriaLabel","nextRangeAriaLabel","headerAriaLabelFormatString","yearPickerHeaderAriaLabel","callback","ev","which","enter"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\Calendar\\src\\components\\Calendar\\CalendarMonth\\CalendarMonth.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusZone } from '../../../FocusZone';\nimport {\n  addYears,\n  setMonth,\n  getYearStart,\n  getYearEnd,\n  getMonthStart,\n  getMonthEnd,\n  compareDatePart,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { Icon } from '../../../Icon';\nimport { getStyles } from './CalendarMonth.styles';\nimport { css, getRTL, classNamesFunction, KeyCodes, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { usePrevious } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from '../defaults';\nimport type { ICalendarMonthProps, ICalendarMonthStyles, ICalendarMonthStyleProps } from './CalendarMonth.types';\nimport type { ICalendarYear, ICalendarYearRange } from '../CalendarYear/CalendarYear.types';\n\nconst MONTHS_PER_ROW = 4;\n\nconst getClassNames = classNamesFunction<ICalendarMonthStyleProps, ICalendarMonthStyles>();\n\nconst DEFAULT_PROPS: Readonly<Partial<ICalendarMonthProps>> = {\n  styles: getStyles,\n  strings: undefined,\n  navigationIcons: defaultCalendarNavigationIcons,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  yearPickerHidden: false,\n};\n\nfunction useAnimateBackwards({ navigatedDate }: ICalendarMonthProps) {\n  const currentYear = navigatedDate.getFullYear();\n  const previousYear = usePrevious(currentYear);\n\n  if (previousYear === undefined || previousYear === currentYear) {\n    return undefined;\n  } else {\n    return previousYear > currentYear;\n  }\n}\n\nfunction useFocusLogic({ componentRef }: ICalendarMonthProps) {\n  const navigatedMonthRef = React.useRef<HTMLButtonElement>(null);\n  const calendarYearRef = React.useRef<ICalendarYear>(null);\n  const focusOnUpdate = React.useRef(false);\n\n  const focus = React.useCallback(() => {\n    if (calendarYearRef.current) {\n      calendarYearRef.current.focus();\n    } else if (navigatedMonthRef.current) {\n      navigatedMonthRef.current.focus();\n    }\n  }, []);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] as const;\n}\n\nexport const CalendarMonthBase: React.FunctionComponent<ICalendarMonthProps> = propsWithoutDefaults => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  const [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] = useFocusLogic(props);\n  const [isYearPickerVisible, setIsYearPickerVisible] = React.useState(false);\n\n  const animateBackwards = useAnimateBackwards(props);\n\n  const {\n    navigatedDate,\n    selectedDate,\n    strings,\n    today = new Date(),\n    navigationIcons,\n    dateTimeFormatter,\n    minDate,\n    maxDate,\n    theme,\n    styles,\n    className,\n    allFocusable,\n    highlightCurrentMonth,\n    highlightSelectedMonth,\n    animationDirection,\n    yearPickerHidden,\n    onNavigateDate,\n  } = props;\n\n  const selectMonthCallback = (newMonth: number): (() => void) => {\n    return () => onSelectMonth(newMonth);\n  };\n\n  const onSelectNextYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  const onSelectMonth = (newMonth: number): void => {\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    props.onHeaderSelect?.();\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  const onHeaderSelect = (): void => {\n    if (!yearPickerHidden) {\n      focusOnNextUpdate();\n      setIsYearPickerVisible(true);\n    } else {\n      props.onHeaderSelect?.();\n    }\n  };\n\n  const onSelectYear = (selectedYear: number) => {\n    focusOnNextUpdate();\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    setIsYearPickerVisible(false);\n  };\n\n  const onYearPickerHeaderSelect = (focus: boolean): void => {\n    focusOnNextUpdate();\n    setIsYearPickerVisible(false);\n  };\n\n  // navigationIcons has a default value in defaultProps, but typescript doesn't recognize this\n  const leftNavigationIcon = navigationIcons!.leftNavigation;\n  const rightNavigationIcon = navigationIcons!.rightNavigation;\n  const dateFormatter = dateTimeFormatter!;\n\n  // determine if previous/next years are in bounds\n  const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n  const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className: className,\n    hasHeaderClickCallback: !!props.onHeaderSelect || !yearPickerHidden,\n    highlightCurrent: highlightCurrentMonth,\n    highlightSelected: highlightSelectedMonth,\n    animateBackwards: animateBackwards,\n    animationDirection: animationDirection,\n  });\n\n  if (isYearPickerVisible) {\n    const [onRenderYear, yearStrings] = getYearStrings(props);\n    // use navigated date for the year picker\n    return (\n      <CalendarYear\n        key={'calendarYear'}\n        minYear={minDate ? minDate.getFullYear() : undefined}\n        maxYear={maxDate ? maxDate.getFullYear() : undefined}\n        // eslint-disable-next-line react/jsx-no-bind\n        onSelectYear={onSelectYear}\n        navigationIcons={navigationIcons}\n        // eslint-disable-next-line react/jsx-no-bind\n        onHeaderSelect={onYearPickerHeaderSelect}\n        selectedYear={\n          selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined\n        }\n        onRenderYear={onRenderYear}\n        strings={yearStrings}\n        componentRef={calendarYearRef}\n        styles={styles}\n        highlightCurrentYear={highlightCurrentMonth}\n        highlightSelectedYear={highlightSelectedMonth}\n        animationDirection={animationDirection}\n      />\n    );\n  }\n\n  const rowIndexes = [];\n  for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n    rowIndexes.push(i);\n  }\n\n  const yearString = dateFormatter.formatYear(navigatedDate);\n  const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n    ? format(strings.monthPickerHeaderAriaLabel, yearString)\n    : yearString;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.headerContainer}>\n        <button\n          className={classNames.currentItemButton}\n          onClick={onHeaderSelect}\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          aria-label={headerAriaLabel}\n          data-is-focusable={!!props.onHeaderSelect || !yearPickerHidden}\n          tabIndex={!!props.onHeaderSelect || !yearPickerHidden ? 0 : -1}\n          type=\"button\"\n        >\n          <span aria-live=\"polite\" aria-atomic=\"true\">\n            {yearString}\n          </span>\n        </button>\n        <div className={classNames.navigationButtonsContainer}>\n          <button\n            className={css(classNames.navigationButton, {\n              [classNames.disabled]: !isPrevYearInBounds,\n            })}\n            aria-disabled={!isPrevYearInBounds}\n            tabIndex={isPrevYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isPrevYearInBounds ? onSelectPrevYear : undefined}\n            onKeyDown={isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined}\n            title={\n              strings.prevYearAriaLabel\n                ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            <Icon iconName={getRTL() ? rightNavigationIcon : leftNavigationIcon} />\n          </button>\n          <button\n            className={css(classNames.navigationButton, {\n              [classNames.disabled]: !isNextYearInBounds,\n            })}\n            aria-disabled={!isNextYearInBounds}\n            tabIndex={isNextYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isNextYearInBounds ? onSelectNextYear : undefined}\n            onKeyDown={isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined}\n            title={\n              strings.nextYearAriaLabel\n                ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            <Icon iconName={getRTL() ? leftNavigationIcon : rightNavigationIcon} />\n          </button>\n        </div>\n      </div>\n      <FocusZone>\n        <div className={classNames.gridContainer} role=\"grid\" aria-label={yearString}>\n          {rowIndexes.map((rowNum: number) => {\n            const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n            return (\n              <div key={'monthRow_' + rowNum + navigatedDate.getFullYear()} role=\"row\" className={classNames.buttonRow}>\n                {monthsForRow.map((month: string, index: number) => {\n                  const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                  const indexedMonth = setMonth(navigatedDate, monthIndex);\n                  const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                  const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                  const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                  const isInBounds =\n                    (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                    (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                  return (\n                    <button\n                      ref={isNavigatedMonth ? navigatedMonthRef : undefined}\n                      role={'gridcell'}\n                      className={css(classNames.itemButton, {\n                        [classNames.current]:\n                          highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today),\n                        [classNames.selected]: highlightSelectedMonth && isSelectedMonth && isSelectedYear,\n                        [classNames.disabled]: !isInBounds,\n                      })}\n                      disabled={!allFocusable && !isInBounds}\n                      key={monthIndex}\n                      onClick={isInBounds ? selectMonthCallback(monthIndex) : undefined}\n                      onKeyDown={isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined}\n                      aria-label={dateFormatter.formatMonth(indexedMonth, strings)}\n                      aria-selected={isNavigatedMonth}\n                      data-is-focusable={isInBounds ? true : undefined}\n                      type=\"button\"\n                    >\n                      {month}\n                    </button>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </FocusZone>\n    </div>\n  );\n};\nCalendarMonthBase.displayName = 'CalendarMonthBase';\n\nfunction getYearStrings({ strings, navigatedDate, dateTimeFormatter }: ICalendarMonthProps) {\n  const yearToString = (year: number) => {\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  const yearRangeToString = (yearRange: ICalendarYearRange) => {\n    return `${yearToString(yearRange.fromYear)} - ${yearToString(yearRange.toYear)}`;\n  };\n\n  const yearRangeToNextDecadeLabel = (yearRange: ICalendarYearRange) => {\n    return strings.nextYearRangeAriaLabel ? `${strings.nextYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  const yearRangeToPrevDecadeLabel = (yearRange: ICalendarYearRange) => {\n    return strings.prevYearRangeAriaLabel ? `${strings.prevYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  return [\n    yearToString,\n    {\n      rangeAriaLabel: yearRangeToString,\n      prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n      nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n      headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n    } as const,\n  ] as const;\n}\n\nfunction isCurrentMonth(month: number, year: number, today: Date): boolean {\n  return today.getFullYear() === year && today.getMonth() === month;\n}\n\nfunction onButtonKeyDown(callback: () => void): (ev: React.KeyboardEvent<HTMLButtonElement>) => void {\n  return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback();\n        break;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}