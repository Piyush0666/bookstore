{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, KeyCodes, getRTL, initializeComponentRef } from '@fluentui/utilities';\nimport { AnimationDirection } from '../Calendar/Calendar.types';\nimport { CalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid';\nimport { compareDatePart, getStartDateOfWeek, addDays, addMonths, compareDates, FirstWeekOfYear, DateRangeType, DayOfWeek, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { Icon } from '../../Icon';\nimport { defaultWeeklyDayPickerStrings, defaultWeeklyDayPickerNavigationIcons } from './defaults';\nvar getClassNames = classNamesFunction();\n\nvar WeeklyDayPickerBase =\n/** @class */\nfunction (_super) {\n  __extends(WeeklyDayPickerBase, _super);\n\n  function WeeklyDayPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dayGrid = React.createRef();\n\n    _this._onSelectDate = function (date) {\n      var onSelectDate = _this.props.onSelectDate; // don't set the navigated date on selection because selection never causes navigation\n\n      _this.setState({\n        selectedDate: date\n      });\n\n      _this._focusOnUpdate = true;\n\n      if (onSelectDate) {\n        onSelectDate(date);\n      }\n    };\n\n    _this._onNavigateDate = function (date, focusOnNavigatedDay) {\n      var onNavigateDate = _this.props.onNavigateDate;\n\n      _this.setState({\n        navigatedDate: date\n      });\n\n      _this._focusOnUpdate = focusOnNavigatedDay;\n\n      if (onNavigateDate) {\n        onNavigateDate(date);\n      }\n    };\n\n    _this._renderPreviousWeekNavigationButton = function (classNames) {\n      var _a;\n\n      var _b = _this.props,\n          minDate = _b.minDate,\n          firstDayOfWeek = _b.firstDayOfWeek,\n          navigationIcons = _b.navigationIcons;\n      var navigatedDate = _this.state.navigatedDate;\n      var leftNavigationIcon = getRTL() ? navigationIcons.rightNavigation : navigationIcons.leftNavigation; // determine if previous week in bounds\n\n      var prevWeekInBounds = minDate ? compareDatePart(minDate, getStartDateOfWeek(navigatedDate, firstDayOfWeek)) < 0 : true;\n      return React.createElement(\"button\", {\n        className: css(classNames.navigationIconButton, (_a = {}, _a[classNames.disabledStyle] = !prevWeekInBounds, _a)),\n        disabled: !prevWeekInBounds,\n        \"aria-disabled\": !prevWeekInBounds,\n        onClick: prevWeekInBounds ? _this._onSelectPrevDateRange : undefined,\n        onKeyDown: prevWeekInBounds ? _this._onButtonKeyDown(_this._onSelectPrevDateRange) : undefined,\n        title: _this._createPreviousWeekAriaLabel(),\n        type: \"button\"\n      }, React.createElement(Icon, {\n        iconName: leftNavigationIcon\n      }));\n    };\n\n    _this._renderNextWeekNavigationButton = function (classNames) {\n      var _a;\n\n      var _b = _this.props,\n          maxDate = _b.maxDate,\n          firstDayOfWeek = _b.firstDayOfWeek,\n          navigationIcons = _b.navigationIcons;\n      var navigatedDate = _this.state.navigatedDate;\n      var rightNavigationIcon = getRTL() ? navigationIcons.leftNavigation : navigationIcons.rightNavigation; // determine if next week in bounds\n\n      var nextWeekInBounds = maxDate ? compareDatePart(addDays(getStartDateOfWeek(navigatedDate, firstDayOfWeek), 7), maxDate) < 0 : true;\n      return React.createElement(\"button\", {\n        className: css(classNames.navigationIconButton, (_a = {}, _a[classNames.disabledStyle] = !nextWeekInBounds, _a)),\n        disabled: !nextWeekInBounds,\n        \"aria-disabled\": !nextWeekInBounds,\n        onClick: nextWeekInBounds ? _this._onSelectNextDateRange : undefined,\n        onKeyDown: nextWeekInBounds ? _this._onButtonKeyDown(_this._onSelectNextDateRange) : undefined,\n        title: _this._createNextWeekAriaLabel(),\n        type: \"button\"\n      }, React.createElement(Icon, {\n        iconName: rightNavigationIcon\n      }));\n    };\n\n    _this._onSelectPrevDateRange = function () {\n      if (_this.props.showFullMonth) {\n        _this._navigateDate(addMonths(_this.state.navigatedDate, -1));\n      } else {\n        _this._navigateDate(addDays(_this.state.navigatedDate, -7));\n      }\n    };\n\n    _this._onSelectNextDateRange = function () {\n      if (_this.props.showFullMonth) {\n        _this._navigateDate(addMonths(_this.state.navigatedDate, 1));\n      } else {\n        _this._navigateDate(addDays(_this.state.navigatedDate, 7));\n      }\n    };\n\n    _this._navigateDate = function (date) {\n      _this.setState({\n        navigatedDate: date\n      });\n\n      if (_this.props.onNavigateDate) {\n        _this.props.onNavigateDate(date);\n      }\n    };\n\n    _this._onWrapperKeyDown = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onButtonKeyDown = function (callback) {\n      return function (ev) {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.enter:\n            callback();\n            break;\n        }\n      };\n    };\n\n    _this._onTouchStart = function (ev) {\n      var touch = ev.touches[0];\n\n      if (touch) {\n        _this._initialTouchX = touch.clientX;\n      }\n    };\n\n    _this._onTouchMove = function (ev) {\n      var isRtl = getRTL();\n      var touch = ev.touches[0];\n\n      if (touch && _this._initialTouchX !== undefined && touch.clientX !== _this._initialTouchX) {\n        if ((touch.clientX - _this._initialTouchX) * (isRtl ? -1 : 1) < 0) {\n          // swipe right\n          _this._onSelectNextDateRange();\n        } else {\n          // swipe left\n          _this._onSelectPrevDateRange();\n        }\n\n        _this._initialTouchX = undefined;\n      }\n    };\n\n    _this._createPreviousWeekAriaLabel = function () {\n      var _a = _this.props,\n          strings = _a.strings,\n          showFullMonth = _a.showFullMonth,\n          firstDayOfWeek = _a.firstDayOfWeek;\n      var navigatedDate = _this.state.navigatedDate;\n      var ariaLabel = undefined;\n\n      if (showFullMonth && strings.prevMonthAriaLabel) {\n        ariaLabel = strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()];\n      } else if (!showFullMonth && strings.prevWeekAriaLabel) {\n        var firstDayOfPreviousWeek = getStartDateOfWeek(addDays(navigatedDate, -7), firstDayOfWeek);\n        var lastDayOfPreviousWeek = addDays(firstDayOfPreviousWeek, 6);\n        ariaLabel = strings.prevWeekAriaLabel + ' ' + _this._formatDateRange(firstDayOfPreviousWeek, lastDayOfPreviousWeek);\n      }\n\n      return ariaLabel;\n    };\n\n    _this._createNextWeekAriaLabel = function () {\n      var _a = _this.props,\n          strings = _a.strings,\n          showFullMonth = _a.showFullMonth,\n          firstDayOfWeek = _a.firstDayOfWeek;\n      var navigatedDate = _this.state.navigatedDate;\n      var ariaLabel = undefined;\n\n      if (showFullMonth && strings.nextMonthAriaLabel) {\n        ariaLabel = strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()];\n      } else if (!showFullMonth && strings.nextWeekAriaLabel) {\n        var firstDayOfNextWeek = getStartDateOfWeek(addDays(navigatedDate, 7), firstDayOfWeek);\n        var lastDayOfNextWeek = addDays(firstDayOfNextWeek, 6);\n        ariaLabel = strings.nextWeekAriaLabel + ' ' + _this._formatDateRange(firstDayOfNextWeek, lastDayOfNextWeek);\n      }\n\n      return ariaLabel;\n    };\n\n    _this._formatDateRange = function (startDate, endDate) {\n      var _a = _this.props,\n          dateTimeFormatter = _a.dateTimeFormatter,\n          strings = _a.strings;\n      return (dateTimeFormatter === null || dateTimeFormatter === void 0 ? void 0 : dateTimeFormatter.formatMonthDayYear(startDate, strings)) + \" - \" + (dateTimeFormatter === null || dateTimeFormatter === void 0 ? void 0 : dateTimeFormatter.formatMonthDayYear(endDate, strings));\n    };\n\n    initializeComponentRef(_this);\n    var currentDate = props.initialDate && !isNaN(props.initialDate.getTime()) ? props.initialDate : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDate: currentDate,\n      previousShowFullMonth: !!props.showFullMonth,\n      animationDirection: props.animationDirection\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n\n  WeeklyDayPickerBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var currentDate = nextProps.initialDate && !isNaN(nextProps.initialDate.getTime()) ? nextProps.initialDate : nextProps.today || new Date();\n    var showFullMonth = !!nextProps.showFullMonth;\n    var newAnimationDirection = showFullMonth !== prevState.previousShowFullMonth ? AnimationDirection.Vertical : AnimationDirection.Horizontal;\n\n    if (!compareDates(currentDate, prevState.selectedDate)) {\n      return {\n        selectedDate: currentDate,\n        navigatedDate: currentDate,\n        previousShowFullMonth: showFullMonth,\n        animationDirection: newAnimationDirection\n      };\n    }\n\n    return {\n      selectedDate: currentDate,\n      navigatedDate: prevState.navigatedDate,\n      previousShowFullMonth: showFullMonth,\n      animationDirection: newAnimationDirection\n    };\n  };\n\n  WeeklyDayPickerBase.prototype.focus = function () {\n    if (this._dayGrid && this._dayGrid.current) {\n      this._dayGrid.current.focus();\n    }\n  };\n\n  WeeklyDayPickerBase.prototype.render = function () {\n    var _a = this.props,\n        strings = _a.strings,\n        dateTimeFormatter = _a.dateTimeFormatter,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        restrictedDates = _a.restrictedDates,\n        today = _a.today,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className,\n        showFullMonth = _a.showFullMonth,\n        weeksToShow = _a.weeksToShow,\n        calendarDayGridProps = __rest(_a, [\"strings\", \"dateTimeFormatter\", \"firstDayOfWeek\", \"minDate\", \"maxDate\", \"restrictedDates\", \"today\", \"styles\", \"theme\", \"className\", \"showFullMonth\", \"weeksToShow\"]);\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      onKeyDown: this._onWrapperKeyDown,\n      onTouchStart: this._onTouchStart,\n      onTouchMove: this._onTouchMove,\n      \"aria-expanded\": showFullMonth\n    }, this._renderPreviousWeekNavigationButton(classNames), React.createElement(CalendarDayGrid, __assign({\n      styles: styles,\n      componentRef: this._dayGrid,\n      strings: strings,\n      selectedDate: this.state.selectedDate,\n      navigatedDate: this.state.navigatedDate,\n      firstDayOfWeek: firstDayOfWeek,\n      firstWeekOfYear: FirstWeekOfYear.FirstDay,\n      dateRangeType: DateRangeType.Day,\n      weeksToShow: showFullMonth ? weeksToShow : 1,\n      dateTimeFormatter: dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDate,\n      today: today,\n      lightenDaysOutsideNavigatedMonth: showFullMonth,\n      animationDirection: this.state.animationDirection\n    }, calendarDayGridProps)), this._renderNextWeekNavigationButton(classNames));\n  };\n\n  WeeklyDayPickerBase.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  WeeklyDayPickerBase.defaultProps = {\n    onSelectDate: undefined,\n    initialDate: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    strings: defaultWeeklyDayPickerStrings,\n    navigationIcons: defaultWeeklyDayPickerNavigationIcons,\n    dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n    animationDirection: AnimationDirection.Horizontal\n  };\n  return WeeklyDayPickerBase;\n}(React.Component);\n\nexport { WeeklyDayPickerBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","KeyCodes","getRTL","initializeComponentRef","AnimationDirection","CalendarDayGrid","compareDatePart","getStartDateOfWeek","addDays","addMonths","compareDates","FirstWeekOfYear","DateRangeType","DayOfWeek","DEFAULT_DATE_FORMATTING","Icon","defaultWeeklyDayPickerStrings","defaultWeeklyDayPickerNavigationIcons","getClassNames","__extends","props","_super","_this","createRef","date","onSelectDate","setState","selectedDate","_focusOnUpdate","focusOnNavigatedDay","onNavigateDate","navigatedDate","classNames","minDate","firstDayOfWeek","navigationIcons","state","leftNavigationIcon","rightNavigation","leftNavigation","prevWeekInBounds","className","navigationIconButton","_a","disabledStyle","disabled","onClick","_onSelectPrevDateRange","undefined","onKeyDown","_onButtonKeyDown","title","_createPreviousWeekAriaLabel","type","iconName","maxDate","rightNavigationIcon","nextWeekInBounds","_onSelectNextDateRange","_createNextWeekAriaLabel","showFullMonth","_navigateDate","ev","which","enter","preventDefault","backspace","callback","touch","touches","_initialTouchX","clientX","isRtl","strings","ariaLabel","prevMonthAriaLabel","months","getMonth","prevWeekAriaLabel","firstDayOfPreviousWeek","lastDayOfPreviousWeek","_formatDateRange","nextMonthAriaLabel","nextWeekAriaLabel","firstDayOfNextWeek","lastDayOfNextWeek","startDate","endDate","dateTimeFormatter","formatMonthDayYear","currentDate","initialDate","isNaN","getTime","today","Date","previousShowFullMonth","animationDirection","WeeklyDayPickerBase","nextProps","prevState","newAnimationDirection","Vertical","Horizontal","_dayGrid","current","focus","restrictedDates","styles","theme","weeksToShow","calendarDayGridProps","root","_onWrapperKeyDown","onTouchStart","_onTouchStart","onTouchMove","_onTouchMove","_renderPreviousWeekNavigationButton","__assign","componentRef","firstWeekOfYear","FirstDay","dateRangeType","Day","_onSelectDate","_onNavigateDate","lightenDaysOutsideNavigatedMonth","_renderNextWeekNavigationButton","Sunday","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\WeeklyDayPicker\\WeeklyDayPicker.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, KeyCodes, getRTL, initializeComponentRef } from '@fluentui/utilities';\nimport { AnimationDirection } from '../Calendar/Calendar.types';\nimport { CalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid';\nimport {\n  compareDatePart,\n  getStartDateOfWeek,\n  addDays,\n  addMonths,\n  compareDates,\n  FirstWeekOfYear,\n  DateRangeType,\n  DayOfWeek,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { Icon } from '../../Icon';\nimport { defaultWeeklyDayPickerStrings, defaultWeeklyDayPickerNavigationIcons } from './defaults';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type {\n  IWeeklyDayPickerProps,\n  IWeeklyDayPickerStyleProps,\n  IWeeklyDayPickerStyles,\n} from './WeeklyDayPicker.types';\nimport type { ICalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid.types';\n\nconst getClassNames = classNamesFunction<IWeeklyDayPickerStyleProps, IWeeklyDayPickerStyles>();\n\nexport interface IWeeklyDayPickerState {\n  /** The currently focused date in the week picker, but not necessarily selected */\n  navigatedDate: Date;\n\n  /** The currently selected date in the calendar */\n  selectedDate: Date;\n\n  /** Tracking whether we just toggled showFullMonth */\n  previousShowFullMonth: boolean;\n\n  /** Whether to animate veritcally or horizontally */\n  animationDirection: AnimationDirection;\n}\n\nexport class WeeklyDayPickerBase extends React.Component<IWeeklyDayPickerProps, IWeeklyDayPickerState> {\n  public static defaultProps: IWeeklyDayPickerProps = {\n    onSelectDate: undefined,\n    initialDate: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    strings: defaultWeeklyDayPickerStrings,\n    navigationIcons: defaultWeeklyDayPickerNavigationIcons,\n    dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n    animationDirection: AnimationDirection.Horizontal,\n  };\n\n  private _dayGrid = React.createRef<ICalendarDayGrid>();\n  private _focusOnUpdate: boolean;\n  private _initialTouchX: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IWeeklyDayPickerProps>,\n    prevState: Readonly<IWeeklyDayPickerState>,\n  ): Partial<IWeeklyDayPickerState> | null {\n    const currentDate =\n      nextProps.initialDate && !isNaN(nextProps.initialDate.getTime())\n        ? nextProps.initialDate\n        : nextProps.today || new Date();\n    const showFullMonth = !!nextProps.showFullMonth;\n    const newAnimationDirection =\n      showFullMonth !== prevState.previousShowFullMonth ? AnimationDirection.Vertical : AnimationDirection.Horizontal;\n\n    if (!compareDates(currentDate, prevState.selectedDate)) {\n      return {\n        selectedDate: currentDate,\n        navigatedDate: currentDate,\n        previousShowFullMonth: showFullMonth,\n        animationDirection: newAnimationDirection,\n      };\n    }\n\n    return {\n      selectedDate: currentDate,\n      navigatedDate: prevState.navigatedDate,\n      previousShowFullMonth: showFullMonth,\n      animationDirection: newAnimationDirection,\n    };\n  }\n\n  public constructor(props: IWeeklyDayPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const currentDate =\n      props.initialDate && !isNaN(props.initialDate.getTime()) ? props.initialDate : props.today || new Date();\n\n    this.state = {\n      selectedDate: currentDate,\n      navigatedDate: currentDate,\n      previousShowFullMonth: !!props.showFullMonth,\n      animationDirection: props.animationDirection!,\n    };\n    this._focusOnUpdate = false;\n  }\n\n  public focus(): void {\n    if (this._dayGrid && this._dayGrid.current) {\n      this._dayGrid.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      strings,\n      dateTimeFormatter,\n      firstDayOfWeek,\n      minDate,\n      maxDate,\n      restrictedDates,\n      today,\n      styles,\n      theme,\n      className,\n      showFullMonth,\n      weeksToShow,\n      ...calendarDayGridProps\n    } = this.props;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className: className,\n    });\n\n    return (\n      <div\n        className={classNames.root}\n        onKeyDown={this._onWrapperKeyDown}\n        onTouchStart={this._onTouchStart}\n        onTouchMove={this._onTouchMove}\n        aria-expanded={showFullMonth}\n      >\n        {this._renderPreviousWeekNavigationButton(classNames)}\n        <CalendarDayGrid\n          styles={styles}\n          componentRef={this._dayGrid}\n          strings={strings}\n          selectedDate={this.state.selectedDate!}\n          navigatedDate={this.state.navigatedDate!}\n          firstDayOfWeek={firstDayOfWeek!}\n          firstWeekOfYear={FirstWeekOfYear.FirstDay}\n          dateRangeType={DateRangeType.Day}\n          weeksToShow={showFullMonth ? weeksToShow : 1}\n          dateTimeFormatter={dateTimeFormatter!}\n          minDate={minDate}\n          maxDate={maxDate}\n          restrictedDates={restrictedDates}\n          onSelectDate={this._onSelectDate}\n          onNavigateDate={this._onNavigateDate}\n          today={today}\n          lightenDaysOutsideNavigatedMonth={showFullMonth}\n          animationDirection={this.state.animationDirection}\n          {...calendarDayGridProps}\n        />\n        {this._renderNextWeekNavigationButton(classNames)}\n      </div>\n    );\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  private _onSelectDate = (date: Date): void => {\n    const { onSelectDate } = this.props;\n\n    // don't set the navigated date on selection because selection never causes navigation\n    this.setState({\n      selectedDate: date,\n    });\n    this._focusOnUpdate = true;\n\n    if (onSelectDate) {\n      onSelectDate(date);\n    }\n  };\n\n  private _onNavigateDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    const { onNavigateDate } = this.props;\n\n    this.setState({\n      navigatedDate: date,\n    });\n    this._focusOnUpdate = focusOnNavigatedDay;\n\n    if (onNavigateDate) {\n      onNavigateDate(date);\n    }\n  };\n\n  private _renderPreviousWeekNavigationButton = (\n    classNames: IProcessedStyleSet<IWeeklyDayPickerStyles>,\n  ): JSX.Element => {\n    const { minDate, firstDayOfWeek, navigationIcons } = this.props;\n    const { navigatedDate } = this.state;\n    const leftNavigationIcon = getRTL() ? navigationIcons!.rightNavigation : navigationIcons!.leftNavigation;\n\n    // determine if previous week in bounds\n    const prevWeekInBounds = minDate\n      ? compareDatePart(minDate, getStartDateOfWeek(navigatedDate, firstDayOfWeek!)) < 0\n      : true;\n\n    return (\n      <button\n        className={css(classNames.navigationIconButton, {\n          [classNames.disabledStyle]: !prevWeekInBounds,\n        })}\n        disabled={!prevWeekInBounds}\n        aria-disabled={!prevWeekInBounds}\n        onClick={prevWeekInBounds ? this._onSelectPrevDateRange : undefined}\n        onKeyDown={prevWeekInBounds ? this._onButtonKeyDown(this._onSelectPrevDateRange) : undefined}\n        title={this._createPreviousWeekAriaLabel()}\n        type=\"button\"\n      >\n        <Icon iconName={leftNavigationIcon} />\n      </button>\n    );\n  };\n\n  private _renderNextWeekNavigationButton = (classNames: IProcessedStyleSet<IWeeklyDayPickerStyles>): JSX.Element => {\n    const { maxDate, firstDayOfWeek, navigationIcons } = this.props;\n    const { navigatedDate } = this.state;\n    const rightNavigationIcon = getRTL() ? navigationIcons!.leftNavigation : navigationIcons!.rightNavigation;\n\n    // determine if next week in bounds\n    const nextWeekInBounds = maxDate\n      ? compareDatePart(addDays(getStartDateOfWeek(navigatedDate, firstDayOfWeek!), 7), maxDate) < 0\n      : true;\n\n    return (\n      <button\n        className={css(classNames.navigationIconButton, {\n          [classNames.disabledStyle]: !nextWeekInBounds,\n        })}\n        disabled={!nextWeekInBounds}\n        aria-disabled={!nextWeekInBounds}\n        onClick={nextWeekInBounds ? this._onSelectNextDateRange : undefined}\n        onKeyDown={nextWeekInBounds ? this._onButtonKeyDown(this._onSelectNextDateRange) : undefined}\n        title={this._createNextWeekAriaLabel()}\n        type=\"button\"\n      >\n        <Icon iconName={rightNavigationIcon} />\n      </button>\n    );\n  };\n\n  private _onSelectPrevDateRange = () => {\n    if (this.props.showFullMonth) {\n      this._navigateDate(addMonths(this.state.navigatedDate, -1));\n    } else {\n      this._navigateDate(addDays(this.state.navigatedDate, -7));\n    }\n  };\n\n  private _onSelectNextDateRange = () => {\n    if (this.props.showFullMonth) {\n      this._navigateDate(addMonths(this.state.navigatedDate, 1));\n    } else {\n      this._navigateDate(addDays(this.state.navigatedDate, 7));\n    }\n  };\n\n  private _navigateDate = (date: Date) => {\n    this.setState({\n      navigatedDate: date,\n    });\n    if (this.props.onNavigateDate) {\n      this.props.onNavigateDate(date);\n    }\n  };\n\n  private _onWrapperKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _onButtonKeyDown = (callback: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement>) => void) => {\n    return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          callback();\n          break;\n      }\n    };\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLDivElement>) => {\n    const touch = ev.touches[0];\n    if (touch) {\n      this._initialTouchX = touch.clientX;\n    }\n  };\n\n  private _onTouchMove = (ev: React.TouchEvent<HTMLDivElement>) => {\n    const isRtl = getRTL();\n    const touch = ev.touches[0];\n    if (touch && this._initialTouchX !== undefined && touch.clientX !== this._initialTouchX) {\n      if ((touch.clientX - this._initialTouchX) * (isRtl ? -1 : 1) < 0) {\n        // swipe right\n        this._onSelectNextDateRange();\n      } else {\n        // swipe left\n        this._onSelectPrevDateRange();\n      }\n      this._initialTouchX = undefined;\n    }\n  };\n\n  private _createPreviousWeekAriaLabel = () => {\n    const { strings, showFullMonth, firstDayOfWeek } = this.props;\n    const { navigatedDate } = this.state;\n\n    let ariaLabel = undefined;\n    if (showFullMonth && strings.prevMonthAriaLabel) {\n      ariaLabel = strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate!, -1).getMonth()];\n    } else if (!showFullMonth && strings.prevWeekAriaLabel) {\n      const firstDayOfPreviousWeek = getStartDateOfWeek(addDays(navigatedDate!, -7), firstDayOfWeek!);\n      const lastDayOfPreviousWeek = addDays(firstDayOfPreviousWeek, 6);\n      ariaLabel =\n        strings.prevWeekAriaLabel + ' ' + this._formatDateRange(firstDayOfPreviousWeek, lastDayOfPreviousWeek);\n    }\n    return ariaLabel;\n  };\n\n  private _createNextWeekAriaLabel = () => {\n    const { strings, showFullMonth, firstDayOfWeek } = this.props;\n    const { navigatedDate } = this.state;\n\n    let ariaLabel = undefined;\n    if (showFullMonth && strings.nextMonthAriaLabel) {\n      ariaLabel = strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate!, 1).getMonth()];\n    } else if (!showFullMonth && strings.nextWeekAriaLabel) {\n      const firstDayOfNextWeek = getStartDateOfWeek(addDays(navigatedDate!, 7), firstDayOfWeek!);\n      const lastDayOfNextWeek = addDays(firstDayOfNextWeek, 6);\n      ariaLabel = strings.nextWeekAriaLabel + ' ' + this._formatDateRange(firstDayOfNextWeek, lastDayOfNextWeek);\n    }\n    return ariaLabel;\n  };\n\n  private _formatDateRange = (startDate: Date, endDate: Date) => {\n    const { dateTimeFormatter, strings } = this.props;\n    return `${dateTimeFormatter?.formatMonthDayYear(startDate, strings)} - ${dateTimeFormatter?.formatMonthDayYear(\n      endDate,\n      strings,\n    )}`;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}