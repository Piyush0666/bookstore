{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\n\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n  var _a = React.useState(getInitialResponsiveMode()),\n      lastResponsiveMode = _a[0],\n      setLastResponsiveMode = _a[1];\n\n  var onResize = React.useCallback(function () {\n    var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current)); // Setting the same value should not cause a re-render.\n\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n  var win = useWindow();\n  useOnEvent(win, 'resize', onResize); // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n\n  React.useEffect(function () {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n\n  }, [overrideResponsiveMode]);\n  return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAAyBC,iBAAzB,EAA4CC,wBAA5C,QAA4E,kCAA5E;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAEA;;;;;;AAKA,OAAO,IAAMC,iBAAiB,GAAG,UAC/BC,UAD+B,EAE/BC,sBAF+B,EAEQ;EAEjC,SAA8CR,KAAK,CAACS,QAAN,CAA+BL,wBAAwB,EAAvD,CAA9C;EAAA,IAACM,kBAAkB,QAAnB;EAAA,IAAqBC,qBAAqB,QAA1C;;EAEN,IAAMC,QAAQ,GAAGZ,KAAK,CAACa,WAAN,CAAkB;IACjC,IAAMC,iBAAiB,GAAGX,iBAAiB,CAACF,SAAS,CAACM,UAAU,CAACQ,OAAZ,CAAV,CAA3C,CADiC,CAGjC;;IACA,IAAIL,kBAAkB,KAAKI,iBAA3B,EAA8C;MAC5CH,qBAAqB,CAACG,iBAAD,CAArB;IACD;EACF,CAPgB,EAOd,CAACP,UAAD,EAAaG,kBAAb,CAPc,CAAjB;EASA,IAAMM,GAAG,GAAGX,SAAS,EAArB;EACAH,UAAU,CAACc,GAAD,EAAM,QAAN,EAAgBJ,QAAhB,CAAV,CAduC,CAgBvC;EACA;;EACAZ,KAAK,CAACiB,SAAN,CAAgB;IACd,IAAIT,sBAAsB,KAAKU,SAA/B,EAA0C;MACxCN,QAAQ;IACT,CAHa,CAId;;EACD,CALD,EAKG,CAACJ,sBAAD,CALH;EAOA,OAAOA,sBAAsB,SAAtB,0BAAsB,WAAtB,4BAA0BE,kBAAjC;AACD,CA5BM","names":["React","getWindow","useOnEvent","getResponsiveMode","getInitialResponsiveMode","useWindow","useResponsiveMode","elementRef","overrideResponsiveMode","useState","lastResponsiveMode","setLastResponsiveMode","onResize","useCallback","newResponsiveMode","current","win","useEffect","undefined"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\hooks\\useResponsiveMode.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport const useResponsiveMode = (\n  elementRef: React.RefObject<HTMLElement | null>,\n  overrideResponsiveMode?: ResponsiveMode,\n) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode());\n\n  const onResize = React.useCallback(() => {\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(() => {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n\n  return overrideResponsiveMode ?? lastResponsiveMode;\n};\n"]},"metadata":{},"sourceType":"module"}