{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { FocusZoneDirection, FocusZoneTabbableElements } from './FocusZone.types';\nimport { KeyCodes, css, elementContains, getDocument, getElementIndexPath, getFocusableByIndexPath, getId, getNativeProps, getNextElement, getParent, getPreviousElement, getRTL, htmlElementProperties, initializeComponentRef, isElementFocusSubZone, isElementFocusZone, isElementTabbable, shouldWrapFocus, warnDeprecations, portalContainsElement, getWindow, findScrollableParent, createMergedRef } from '@fluentui/utilities';\nimport { mergeStyles } from '@fluentui/merge-styles';\nimport { getTheme } from '@fluentui/style-utilities';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar focusZoneStyles;\nvar focusZoneClass = 'ms-FocusZone';\n/**\n * Raises a click on a target element based on a keyboard event.\n */\n\nfunction raiseClickFromKeyboardEvent(target, ev) {\n  var event;\n\n  if (typeof MouseEvent === 'function') {\n    event = new MouseEvent('click', {\n      ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,\n      metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,\n      shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,\n      altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,\n      bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,\n      cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable\n    });\n  } else {\n    event = document.createEvent('MouseEvents');\n    event.initMouseEvent('click', ev ? ev.bubbles : false, ev ? ev.cancelable : false, window, // not using getWindow() since this can only be run client side\n    0, // detail\n    0, // screen x\n    0, // screen y\n    0, // client x\n    0, // client y\n    ev ? ev.ctrlKey : false, ev ? ev.altKey : false, ev ? ev.shiftKey : false, ev ? ev.metaKey : false, 0, // button\n    null);\n  }\n\n  target.dispatchEvent(event);\n} // Helper function that will return a class for when the root is focused\n\n\nfunction getRootClass() {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles({\n      selectors: {\n        ':focus': {\n          outline: 'none'\n        }\n      }\n    }, focusZoneClass);\n  }\n\n  return focusZoneStyles;\n}\n\nvar _allInstances = {};\n\nvar _outerZones = new Set();\n\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search', 'textarea'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\n\nvar FocusZone =\n/** @class */\nfunction (_super) {\n  __extends(FocusZone, _super);\n\n  function FocusZone(props) {\n    var _a, _b, _c, _d;\n\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._mergedRef = createMergedRef();\n\n    _this._onFocus = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var _a = _this.props,\n          onActiveElementChanged = _a.onActiveElementChanged,\n          // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate,\n          stopFocusPropagation = _a.stopFocusPropagation,\n          // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification = _a.onFocusNotification,\n          onFocus = _a.onFocus,\n          shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus,\n          defaultTabbableElement = _a.defaultTabbableElement;\n\n      var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);\n\n      var newActiveElement;\n\n      if (isImmediateDescendant) {\n        newActiveElement = ev.target;\n      } else {\n        var parentElement = ev.target;\n\n        while (parentElement && parentElement !== _this._root.current) {\n          if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {\n            newActiveElement = parentElement;\n            break;\n          }\n\n          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n      } // If an inner focusable element should be focused when FocusZone container receives focus\n\n\n      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && _this._root.current && defaultTabbableElement(_this._root.current); // try to focus defaultTabbable element\n\n        if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n          newActiveElement = maybeElementToFocus;\n          maybeElementToFocus.focus();\n        } else {\n          // force focus on first focusable element\n          _this.focus(true);\n\n          if (_this._activeElement) {\n            // set to null as new active element was handled in method above\n            newActiveElement = null;\n          }\n        }\n      }\n\n      var initialElementFocused = !_this._activeElement; // If the new active element is a child of this zone and received focus,\n      // update alignment an immediate descendant\n\n      if (newActiveElement && newActiveElement !== _this._activeElement) {\n        if (isImmediateDescendant || initialElementFocused) {\n          _this._setFocusAlignment(newActiveElement, true, true);\n        }\n\n        _this._activeElement = newActiveElement;\n\n        if (initialElementFocused) {\n          _this._updateTabIndexes();\n        }\n      }\n\n      if (onActiveElementChanged) {\n        onActiveElementChanged(_this._activeElement, ev);\n      }\n\n      if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n        ev.stopPropagation();\n      }\n\n      if (onFocus) {\n        onFocus(ev);\n      } else if (onFocusNotification) {\n        onFocusNotification();\n      }\n    };\n\n    _this._onBlur = function () {\n      _this._setParkedFocus(false);\n    };\n\n    _this._onMouseDown = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var target = ev.target;\n      var path = [];\n\n      while (target && target !== _this._root.current) {\n        path.push(target);\n        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      while (path.length) {\n        target = path.pop();\n\n        if (target && isElementTabbable(target)) {\n          _this._setActiveElement(target, true);\n        }\n\n        if (isElementFocusZone(target)) {\n          // Stop here since the focus zone will take care of its own children.\n          break;\n        }\n      }\n    };\n    /**\n     * Handle the keystrokes.\n     */\n\n\n    _this._onKeyDown = function (ev, theme) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var _a = _this.props,\n          direction = _a.direction,\n          disabled = _a.disabled,\n          isInnerZoneKeystroke = _a.isInnerZoneKeystroke,\n          pagingSupportDisabled = _a.pagingSupportDisabled,\n          shouldEnterInnerZone = _a.shouldEnterInnerZone;\n\n      if (disabled) {\n        return;\n      }\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      } // If the default has been prevented, do not process keyboard events.\n\n\n      if (ev.isDefaultPrevented()) {\n        return;\n      }\n\n      if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {\n        // If this element has focus, it is being controlled by a parent.\n        // Ignore the keystroke.\n        return;\n      }\n\n      if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {\n        // Try to focus\n        var innerZone = _this._getFirstInnerZone();\n\n        if (innerZone) {\n          if (!innerZone.focus(true)) {\n            return;\n          }\n        } else if (isElementFocusSubZone(ev.target)) {\n          if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n            return;\n          }\n        } else {\n          return;\n        }\n      } else if (ev.altKey) {\n        return;\n      } else {\n        // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props, deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.space:\n            if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.left:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusLeft(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.right:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusRight(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.up:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusUp()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.down:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusDown()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.pageDown:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.pageUp:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.tab:\n            if ( // eslint-disable-next-line deprecation/deprecation\n            _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {\n              var focusChanged = false;\n              _this._processingTabKey = true;\n\n              if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();\n              } else {\n                var tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n                focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);\n              }\n\n              _this._processingTabKey = false;\n\n              if (focusChanged) {\n                break;\n              } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n                _this._activeElement = null;\n              }\n            }\n\n            return;\n\n          case KeyCodes.home:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n\n            var firstChild = _this._root.current && _this._root.current.firstChild;\n\n            if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.end:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {\n              return false;\n            }\n\n            var lastChild = _this._root.current && _this._root.current.lastChild;\n\n            if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.enter:\n            if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {\n              break;\n            }\n\n            return;\n\n          default:\n            return;\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {\n      // eslint-disable-next-line deprecation/deprecation\n      var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var activeRectTop = Math.floor(activeRect.top);\n      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          return 0;\n        }\n\n        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n      }\n\n      if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return LARGE_DISTANCE_FROM_CENTER;\n    }; // Manage componentRef resolution.\n\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby'\n      });\n    }\n\n    _this._id = getId('FocusZone');\n    _this._focusAlignment = {\n      left: 0,\n      top: 0\n    };\n    _this._processingTabKey = false;\n    var shouldRaiseClicksFallback = (_b = (_a = props.shouldRaiseClicks) !== null && _a !== void 0 ? _a : FocusZone.defaultProps.shouldRaiseClicks) !== null && _b !== void 0 ? _b : true;\n    _this._shouldRaiseClicksOnEnter = (_c = props.shouldRaiseClicksOnEnter) !== null && _c !== void 0 ? _c : shouldRaiseClicksFallback;\n    _this._shouldRaiseClicksOnSpace = (_d = props.shouldRaiseClicksOnSpace) !== null && _d !== void 0 ? _d : shouldRaiseClicksFallback;\n    return _this;\n  }\n  /** Used for testing purposes only. */\n\n\n  FocusZone.getOuterZones = function () {\n    return _outerZones.size;\n  };\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n\n\n  FocusZone._onKeyDownCapture = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach(function (zone) {\n        return zone._updateTabIndexes();\n      });\n    }\n  };\n\n  FocusZone.prototype.componentDidMount = function () {\n    var root = this._root.current;\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true); // Assign initial tab indexes so that we can set initial focus as appropriate.\n\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement); // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  };\n\n  FocusZone.prototype.componentDidUpdate = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument(); // If either _activeElement or _defaultFocusElement are no longer contained by _root,\n    // reset those variables (and update tab indexes) to avoid memory leaks\n\n\n    if (this._activeElement && !elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) || this._defaultFocusElement && !elementContains(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS)) {\n      this._activeElement = null;\n      this._defaultFocusElement = null;\n\n      this._updateTabIndexes();\n    }\n\n    if (!this.props.preventFocusRestoration && doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root)) {\n      // The element has been removed after the render, attempt to restore focus.\n      var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n\n        elementToFocus.focus();\n\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  };\n\n  FocusZone.prototype.componentWillUnmount = function () {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this); // If this is the last outer zone, remove the keydown listener.\n\n\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  };\n\n  FocusZone.prototype.render = function () {\n    var _this = this; // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = this.props,\n        tag = _a.as,\n        elementType = _a.elementType,\n        rootProps = _a.rootProps,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        className = _a.className;\n    var divProps = getNativeProps(this.props, htmlElementProperties);\n    var Tag = tag || elementType || 'div'; // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n\n    this._evaluateFocusBeforeRender(); // Only support RTL defined in global theme, not contextual theme/RTL.\n\n\n    var theme = getTheme();\n    return React.createElement(Tag, __assign({\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy\n    }, divProps, rootProps, {\n      // Once the getClassName correctly memoizes inputs this should\n      // be replaced so that className is passed to getRootClass and is included there so\n      // the class names will always be in the same order.\n      className: css(getRootClass(), className),\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._root),\n      \"data-focuszone-id\": this._id,\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function (ev) {\n        return _this._onKeyDown(ev, theme);\n      },\n      onFocus: this._onFocus,\n      onMouseDownCapture: this._onMouseDown\n    }), this.props.children);\n  };\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._root.current) {\n      if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {\n        var ownerZoneElement = this._getOwnerZone(this._root.current);\n\n        if (ownerZoneElement !== this._root.current) {\n          var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement)) {\n        this._activeElement.focus();\n\n        return true;\n      } else {\n        var firstChild = this._root.current.firstChild;\n        return this.focusElement(getNextElement(this._root.current, firstChild, true));\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusLast = function () {\n    if (this._root.current) {\n      var lastChild = this._root.current && this._root.current.lastChild;\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusElement = function (element, forceAlignment) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onBeforeFocus = _a.onBeforeFocus,\n        shouldReceiveFocus = _a.shouldReceiveFocus;\n\n    if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n\n\n  FocusZone.prototype.setFocusAlignment = function (point) {\n    this._focusAlignment = point;\n  };\n\n  Object.defineProperty(FocusZone.prototype, \"defaultFocusElement\", {\n    get: function () {\n      return this._defaultFocusElement;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FocusZone.prototype, \"activeElement\", {\n    get: function () {\n      return this._activeElement;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FocusZone.prototype._evaluateFocusBeforeRender = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument();\n\n    if (doc) {\n      var focusedElement = doc.activeElement; // Only update the index path if we are not parked on the root.\n\n      if (focusedElement !== root) {\n        var shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;\n      }\n    }\n  };\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n\n\n  FocusZone.prototype._setParkedFocus = function (isParked) {\n    var root = this._root.current;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  };\n\n  FocusZone.prototype._setActiveElement = function (element, forceAlignment) {\n    var previousActiveElement = this._activeElement;\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  };\n\n  FocusZone.prototype._preventDefaultWhenHandled = function (ev) {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  };\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n\n\n  FocusZone.prototype._tryInvokeClickForFocusable = function (targetElement, ev) {\n    var target = targetElement;\n\n    if (target === this._root.current) {\n      return false;\n    }\n\n    do {\n      if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n        return false;\n      }\n\n      if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {\n        raiseClickFromKeyboardEvent(target, ev);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n    } while (target !== this._root.current);\n\n    return false;\n  };\n  /**\n   * Traverse to find first child zone.\n   */\n\n\n  FocusZone.prototype._getFirstInnerZone = function (rootElement) {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n    }\n\n    var child = rootElement.firstElementChild;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n      }\n\n      var match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling;\n    }\n\n    return null;\n  };\n\n  FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var changedFocus = false;\n    var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (isBidirectional) {\n        if (element) {\n          var targetRect = element.getBoundingClientRect();\n          var elementDistance = getDistanceFromCenter(activeRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element); // Focus the closest candidate\n\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      } else {\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._moveFocusDown = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(true, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n\n      if (targetRectTop < activeRectBottom) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusUp = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(false, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectTop = Math.floor(activeRect.top);\n\n      if (targetRectBottom > activeRectTop) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusLeft = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n        // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n        // This is important, because we want to be comparing the top of the target rect\n        // with the bottom of the active rect.\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = activeRect.right - targetRect.right;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusRight = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(!getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n        // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n        // This is important, because we want to be comparing the bottom of the target rect\n        // with the top of the active rect.\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = targetRect.left - activeRect.left;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var scrollableParent = findScrollableParent(element);\n\n    if (!scrollableParent) {\n      return false;\n    }\n\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var targetTop = -1;\n    var targetBottom = -1;\n    var pagesize = scrollableParent.clientHeight;\n    var activeRect = element.getBoundingClientRect();\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (element) {\n        var targetRect = element.getBoundingClientRect();\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectBottom = Math.floor(activeRect.bottom);\n        var targetRectBottom = Math.floor(targetRect.bottom);\n        var activeRectTop = Math.floor(activeRect.top);\n\n        var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n\n        var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    var changedFocus = false; // Focus the closest candidate\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n\n      this._setFocusAlignment(candidateElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      }\n\n      return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {\n    if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {\n      var rect = element.getBoundingClientRect();\n      var left = rect.left + rect.width / 2;\n      var top_1 = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = {\n          left: left,\n          top: top_1\n        };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top_1;\n      }\n    }\n  };\n\n  FocusZone.prototype._isImmediateDescendantOfZone = function (element) {\n    return this._getOwnerZone(element) === this._root.current;\n  };\n\n  FocusZone.prototype._getOwnerZone = function (element) {\n    var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  };\n\n  FocusZone.prototype._updateTabIndexes = function (element) {\n    if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    } // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n\n\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    var childNodes = element && element.children;\n\n    for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      var child = childNodes[childIndex];\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n            this._defaultFocusElement = child;\n\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n          this._defaultFocusElement = child;\n\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  };\n\n  FocusZone.prototype._isContentEditableElement = function (element) {\n    return element && element.getAttribute('contenteditable') === 'true';\n  };\n\n  FocusZone.prototype._isElementInput = function (element) {\n    if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {\n    // If a tab was used, we want to focus on the next element.\n    if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n      var isRangeSelected = selectionStart !== selectionEnd;\n      var inputValue = element.value;\n      var isReadonly = element.readOnly; // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n\n      if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  };\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n\n\n  FocusZone.prototype._portalContainsElement = function (element) {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  };\n\n  FocusZone.prototype._getDocument = function () {\n    return getDocument(this._root.current);\n  };\n\n  FocusZone.defaultProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true\n  };\n  return FocusZone;\n}(React.Component);\n\nexport { FocusZone };","map":{"version":3,"mappings":"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","names":["React","FocusZoneDirection","FocusZoneTabbableElements","KeyCodes","css","elementContains","getDocument","getElementIndexPath","getFocusableByIndexPath","getId","getNativeProps","getNextElement","getParent","getPreviousElement","getRTL","htmlElementProperties","initializeComponentRef","isElementFocusSubZone","isElementFocusZone","isElementTabbable","shouldWrapFocus","warnDeprecations","portalContainsElement","getWindow","findScrollableParent","createMergedRef","mergeStyles","getTheme","IS_FOCUSABLE_ATTRIBUTE","IS_ENTER_DISABLED_ATTRIBUTE","FOCUSZONE_ID_ATTRIBUTE","TABINDEX","NO_VERTICAL_WRAP","NO_HORIZONTAL_WRAP","LARGE_DISTANCE_FROM_CENTER","LARGE_NEGATIVE_DISTANCE_FROM_CENTER","focusZoneStyles","focusZoneClass","raiseClickFromKeyboardEvent","target","ev","event","MouseEvent","ctrlKey","metaKey","shiftKey","altKey","bubbles","cancelable","document","createEvent","initMouseEvent","window","dispatchEvent","getRootClass","selectors","outline","_allInstances","_outerZones","Set","ALLOWED_INPUT_TYPES","ALLOW_VIRTUAL_ELEMENTS","__extends","props","_super","_this","createRef","_portalContainsElement","onActiveElementChanged","doNotAllowFocusEventToPropagate","stopFocusPropagation","onFocusNotification","onFocus","shouldFocusInnerElementWhenReceivedFocus","defaultTabbableElement","isImmediateDescendant","_isImmediateDescendantOfZone","newActiveElement","parentElement","_root","current","maybeElementToFocus","focus","_activeElement","initialElementFocused","_setFocusAlignment","_updateTabIndexes","stopPropagation","_setParkedFocus","disabled","path","push","length","pop","_setActiveElement","theme","direction","isInnerZoneKeystroke","pagingSupportDisabled","shouldEnterInnerZone","onKeyDown","isDefaultPrevented","_getDocument","activeElement","_isInnerZone","innerZone","_getFirstInnerZone","focusElement","firstChild","which","space","_shouldRaiseClicksOnSpace","_tryInvokeClickForFocusable","left","vertical","_preventDefaultWhenHandled","_moveFocusLeft","right","_moveFocusRight","up","horizontal","_moveFocusUp","down","_moveFocusDown","pageDown","_moveFocusPaging","pageUp","tab","allowTabKey","handleTabKey","all","inputOnly","_isElementInput","focusChanged","_processingTabKey","_shouldWrapFocus","tabWithDirection","shouldResetActiveElementWhenTabFromZone","home","_isContentEditableElement","_shouldInputLoseFocus","end","lastChild","enter","_shouldRaiseClicksOnEnter","preventDefault","isForward","activeRect","targetRect","leftAlignment","_focusAlignment","x","targetRectTop","Math","floor","top","activeRectBottom","bottom","targetRectBottom","activeRectTop","isValidCandidateOnpagingDown","isValidCandidateOnpagingUp","width","abs","process","env","NODE_ENV","rootProps","undefined","elementType","ariaDescribedBy","ariaLabelledBy","_id","shouldRaiseClicksFallback","shouldRaiseClicks","_a","FocusZone","defaultProps","_b","shouldRaiseClicksOnEnter","_c","shouldRaiseClicksOnSpace","_d","size","forEach","zone","root","_windowElement","body","nodeType","add","addEventListener","_onKeyDownCapture","_onBlur","querySelector","defaultActiveElement","shouldFocusOnMount","doc","_defaultFocusElement","preventFocusRestoration","_lastIndexPath","elementToFocus","delete","removeEventListener","tag","className","divProps","Tag","_evaluateFocusBeforeRender","__assign","ref","_mergedRef","elementRef","_onKeyDown","_onFocus","onMouseDownCapture","_onMouseDown","children","forceIntoFirstElement","getAttribute","ownerZoneElement","_getOwnerZone","ownerZone","element","forceAlignment","onBeforeFocus","shouldReceiveFocus","point","Object","focusedElement","shouldRestoreFocus","isParked","_isParked","allowFocusRoot","_parkedTabIndex","setAttribute","removeAttribute","previousActiveElement","tabIndex","preventDefaultWhenHandled","targetElement","tagName","rootElement","child","firstElementChild","match","nextElementSibling","getDistanceFromCenter","useDefaultWrap","candidateDistance","candidateElement","changedFocus","isBidirectional","bidirectional","getBoundingClientRect","elementDistance","isCircularNavigation","lastElementChild","targetTop","_moveFocus","distance","shouldWrap","topBottomComparison","parseFloat","toFixed","scrollableParent","targetBottom","pagesize","clientHeight","_getHorizontalDistanceFromCenter","isElementPassedPageSizeOnPagingDown","isElementPassedPageSizeOnPagingUp","isHorizontal","isVertical","rect","top_1","height","childNodes","childIndex","toLowerCase","type","indexOf","selectionStart","selectionEnd","isRangeSelected","inputValue","value","isReadonly","readOnly","shouldInputLoseFocusOnArrowKey","noWrapDataAttribute","checkForNoWrap","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react-focus\\lib\\components\\src\\components\\FocusZone\\FocusZone.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusZoneDirection, FocusZoneTabbableElements } from './FocusZone.types';\nimport {\n  KeyCodes,\n  css,\n  elementContains,\n  getDocument,\n  getElementIndexPath,\n  getFocusableByIndexPath,\n  getId,\n  getNativeProps,\n  getNextElement,\n  getParent,\n  getPreviousElement,\n  getRTL,\n  htmlElementProperties,\n  initializeComponentRef,\n  isElementFocusSubZone,\n  isElementFocusZone,\n  isElementTabbable,\n  shouldWrapFocus,\n  warnDeprecations,\n  portalContainsElement,\n  getWindow,\n  findScrollableParent,\n  createMergedRef,\n} from '@fluentui/utilities';\nimport { mergeStyles } from '@fluentui/merge-styles';\nimport { getTheme } from '@fluentui/style-utilities';\nimport type { IFocusZone, IFocusZoneProps } from './FocusZone.types';\nimport type { Point } from '@fluentui/utilities';\nimport type { ITheme } from '@fluentui/style-utilities';\n\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nconst IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nconst TABINDEX = 'tabindex';\nconst NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nconst NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nconst LARGE_DISTANCE_FROM_CENTER = 999999999;\nconst LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\n\nlet focusZoneStyles: string;\n\nconst focusZoneClass: string = 'ms-FocusZone';\n\n/**\n * Raises a click on a target element based on a keyboard event.\n */\nfunction raiseClickFromKeyboardEvent(target: Element, ev?: React.KeyboardEvent<HTMLElement>): void {\n  let event;\n  if (typeof MouseEvent === 'function') {\n    event = new MouseEvent('click', {\n      ctrlKey: ev?.ctrlKey,\n      metaKey: ev?.metaKey,\n      shiftKey: ev?.shiftKey,\n      altKey: ev?.altKey,\n      bubbles: ev?.bubbles,\n      cancelable: ev?.cancelable,\n    });\n  } else {\n    event = document.createEvent('MouseEvents');\n    event.initMouseEvent(\n      'click',\n      ev ? ev.bubbles : false,\n      ev ? ev.cancelable : false,\n      window, // not using getWindow() since this can only be run client side\n      0, // detail\n      0, // screen x\n      0, // screen y\n      0, // client x\n      0, // client y\n      ev ? ev.ctrlKey : false,\n      ev ? ev.altKey : false,\n      ev ? ev.shiftKey : false,\n      ev ? ev.metaKey : false,\n      0, // button\n      null, // relatedTarget\n    );\n  }\n\n  target.dispatchEvent(event);\n}\n\n// Helper function that will return a class for when the root is focused\nfunction getRootClass(): string {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles(\n      {\n        selectors: {\n          ':focus': {\n            outline: 'none',\n          },\n        },\n      },\n      focusZoneClass,\n    );\n  }\n  return focusZoneStyles;\n}\n\nconst _allInstances: {\n  [key: string]: FocusZone;\n} = {};\nconst _outerZones: Set<FocusZone> = new Set();\n\nconst ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search', 'textarea'];\n\nconst ALLOW_VIRTUAL_ELEMENTS = false;\n\nexport class FocusZone extends React.Component<IFocusZoneProps> implements IFocusZone {\n  public static defaultProps: IFocusZoneProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true,\n  };\n\n  private _root: React.RefObject<HTMLElement> = React.createRef();\n  private _mergedRef = createMergedRef<HTMLElement>();\n\n  private _id: string;\n\n  /** The most recently focused child element. */\n  private _activeElement: HTMLElement | null;\n\n  /**\n   * The index path to the last focused child element.\n   */\n  private _lastIndexPath: number[] | undefined;\n\n  /**\n   * Flag to define when we've intentionally parked focus on the root element to temporarily\n   * hold focus until items appear within the zone.\n   */\n  private _isParked: boolean;\n\n  /** The child element with tabindex=0. */\n  private _defaultFocusElement: HTMLElement | null;\n  private _focusAlignment: Point;\n  private _isInnerZone: boolean;\n  private _parkedTabIndex: string | null | undefined;\n\n  /** Used to allow moving to next focusable element even when we're focusing on a input element when pressing tab */\n  private _processingTabKey: boolean;\n\n  /** Provides granular control over `shouldRaiseClicks` and should be preferred over `props.shouldRaiseClicks`. */\n  private _shouldRaiseClicksOnEnter: boolean;\n  private _shouldRaiseClicksOnSpace: boolean;\n\n  private _windowElement: Window | undefined;\n\n  /** Used for testing purposes only. */\n  public static getOuterZones(): number {\n    return _outerZones.size;\n  }\n\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n  private static _onKeyDownCapture(ev: KeyboardEvent): void {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach((zone: FocusZone) => zone._updateTabIndexes());\n    }\n  }\n\n  constructor(props: IFocusZoneProps) {\n    super(props);\n    // Manage componentRef resolution.\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby',\n      });\n    }\n\n    this._id = getId('FocusZone');\n\n    this._focusAlignment = {\n      left: 0,\n      top: 0,\n    };\n\n    this._processingTabKey = false;\n\n    const shouldRaiseClicksFallback = props.shouldRaiseClicks ?? FocusZone.defaultProps.shouldRaiseClicks ?? true;\n    this._shouldRaiseClicksOnEnter = props.shouldRaiseClicksOnEnter ?? shouldRaiseClicksFallback;\n    this._shouldRaiseClicksOnSpace = props.shouldRaiseClicksOnSpace ?? shouldRaiseClicksFallback;\n  }\n\n  public componentDidMount(): void {\n    const { current: root } = this._root;\n\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      let parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);\n\n      // Assign initial tab indexes so that we can set initial focus as appropriate.\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement) as HTMLElement;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement) as HTMLElement;\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  }\n\n  public componentDidUpdate(): void {\n    const { current: root } = this._root;\n    const doc = this._getDocument();\n\n    // If either _activeElement or _defaultFocusElement are no longer contained by _root,\n    // reset those variables (and update tab indexes) to avoid memory leaks\n    if (\n      (this._activeElement && !elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS)) ||\n      (this._defaultFocusElement &&\n        !elementContains(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS))\n    ) {\n      this._activeElement = null;\n      this._defaultFocusElement = null;\n      this._updateTabIndexes();\n    }\n\n    if (\n      !this.props.preventFocusRestoration &&\n      doc &&\n      this._lastIndexPath &&\n      (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root)\n    ) {\n      // The element has been removed after the render, attempt to restore focus.\n      const elementToFocus = getFocusableByIndexPath(root as HTMLElement, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n\n      // If this is the last outer zone, remove the keydown listener.\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  }\n\n  public render(): React.ReactNode {\n    // eslint-disable-next-line deprecation/deprecation\n    const { as: tag, elementType, rootProps, ariaDescribedBy, ariaLabelledBy, className } = this.props;\n    const divProps = getNativeProps(this.props, htmlElementProperties);\n\n    const Tag = tag || elementType || 'div';\n\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this._evaluateFocusBeforeRender();\n\n    // Only support RTL defined in global theme, not contextual theme/RTL.\n    const theme: ITheme = getTheme();\n\n    return (\n      <Tag\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...divProps}\n        {\n          // root props has been deprecated and should get removed.\n          // it needs to be marked as \"any\" since root props expects a div element, but really Tag can\n          // be any native element so typescript rightly flags this as a problem.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          ...(rootProps as any)\n        }\n        // Once the getClassName correctly memoizes inputs this should\n        // be replaced so that className is passed to getRootClass and is included there so\n        // the class names will always be in the same order.\n        className={css(getRootClass(), className)}\n        // eslint-disable-next-line deprecation/deprecation\n        ref={this._mergedRef(this.props.elementRef, this._root)}\n        data-focuszone-id={this._id}\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(ev, theme)}\n        onFocus={this._onFocus}\n        onMouseDownCapture={this._onMouseDown}\n      >\n        {this.props.children}\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._root.current) {\n      if (\n        !forceIntoFirstElement &&\n        this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        this._isInnerZone\n      ) {\n        const ownerZoneElement = this._getOwnerZone(this._root.current) as HTMLElement;\n\n        if (ownerZoneElement !== this._root.current) {\n          const ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (\n        !forceIntoFirstElement &&\n        this._activeElement &&\n        elementContains(this._root.current, this._activeElement) &&\n        isElementTabbable(this._activeElement)\n      ) {\n        this._activeElement.focus();\n        return true;\n      } else {\n        const firstChild = this._root.current.firstChild as HTMLElement;\n\n        return this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusLast(): boolean {\n    if (this._root.current) {\n      const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement);\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(element: HTMLElement, forceAlignment?: boolean): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onBeforeFocus, shouldReceiveFocus } = this.props;\n\n    if ((shouldReceiveFocus && !shouldReceiveFocus(element)) || (onBeforeFocus && !onBeforeFocus(element))) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n  public setFocusAlignment(point: Point): void {\n    this._focusAlignment = point;\n  }\n\n  public get defaultFocusElement() {\n    return this._defaultFocusElement;\n  }\n\n  public get activeElement() {\n    return this._activeElement;\n  }\n\n  private _evaluateFocusBeforeRender(): void {\n    const { current: root } = this._root;\n\n    const doc = this._getDocument();\n    if (doc) {\n      const focusedElement = doc.activeElement as HTMLElement;\n\n      // Only update the index path if we are not parked on the root.\n      if (focusedElement !== root) {\n        const shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root as HTMLElement, focusedElement) : undefined;\n      }\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const {\n      onActiveElementChanged,\n      // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate,\n      stopFocusPropagation,\n      // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification,\n      onFocus,\n      shouldFocusInnerElementWhenReceivedFocus,\n      defaultTabbableElement,\n    } = this.props;\n    const isImmediateDescendant = this._isImmediateDescendantOfZone(ev.target as HTMLElement);\n    let newActiveElement: HTMLElement | null | undefined;\n\n    if (isImmediateDescendant) {\n      newActiveElement = ev.target as HTMLElement;\n    } else {\n      let parentElement = ev.target as HTMLElement;\n\n      while (parentElement && parentElement !== this._root.current) {\n        if (isElementTabbable(parentElement) && this._isImmediateDescendantOfZone(parentElement)) {\n          newActiveElement = parentElement;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n      }\n    }\n\n    // If an inner focusable element should be focused when FocusZone container receives focus\n    if (shouldFocusInnerElementWhenReceivedFocus && ev.target === this._root.current) {\n      const maybeElementToFocus =\n        defaultTabbableElement &&\n        typeof defaultTabbableElement === 'function' &&\n        this._root.current &&\n        defaultTabbableElement(this._root.current);\n\n      // try to focus defaultTabbable element\n      if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n        newActiveElement = maybeElementToFocus;\n        maybeElementToFocus.focus();\n      } else {\n        // force focus on first focusable element\n        this.focus(true);\n        if (this._activeElement) {\n          // set to null as new active element was handled in method above\n          newActiveElement = null;\n        }\n      }\n    }\n\n    const initialElementFocused = !this._activeElement;\n\n    // If the new active element is a child of this zone and received focus,\n    // update alignment an immediate descendant\n    if (newActiveElement && newActiveElement !== this._activeElement) {\n      if (isImmediateDescendant || initialElementFocused) {\n        this._setFocusAlignment(newActiveElement, true, true);\n      }\n\n      this._activeElement = newActiveElement;\n\n      if (initialElementFocused) {\n        this._updateTabIndexes();\n      }\n    }\n\n    if (onActiveElementChanged) {\n      onActiveElementChanged(this._activeElement as HTMLElement, ev);\n    }\n\n    if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n      ev.stopPropagation();\n    }\n\n    if (onFocus) {\n      onFocus(ev);\n    } else if (onFocusNotification) {\n      onFocusNotification();\n    }\n  };\n\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  private _setParkedFocus(isParked: boolean): void {\n    const { current: root } = this._root;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  }\n\n  private _onBlur = (): void => {\n    this._setParkedFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const { disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    const path = [];\n\n    while (target && target !== this._root.current) {\n      path.push(target);\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    }\n\n    while (path.length) {\n      target = path.pop() as HTMLElement;\n\n      if (target && isElementTabbable(target)) {\n        this._setActiveElement(target, true);\n      }\n\n      if (isElementFocusZone(target)) {\n        // Stop here since the focus zone will take care of its own children.\n        break;\n      }\n    }\n  };\n\n  private _setActiveElement(element: HTMLElement, forceAlignment?: boolean): void {\n    const previousActiveElement = this._activeElement;\n\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  }\n\n  private _preventDefaultWhenHandled(ev: React.KeyboardEvent<HTMLElement>): void {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  }\n\n  /**\n   * Handle the keystrokes.\n   */\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>, theme: ITheme): boolean | undefined => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { direction, disabled, isInnerZoneKeystroke, pagingSupportDisabled, shouldEnterInnerZone } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the default has been prevented, do not process keyboard events.\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    if (this._getDocument().activeElement === this._root.current && this._isInnerZone) {\n      // If this element has focus, it is being controlled by a parent.\n      // Ignore the keystroke.\n      return;\n    }\n\n    if (\n      ((shouldEnterInnerZone && shouldEnterInnerZone(ev)) || (isInnerZoneKeystroke && isInnerZoneKeystroke(ev))) &&\n      this._isImmediateDescendantOfZone(ev.target as HTMLElement)\n    ) {\n      // Try to focus\n      const innerZone = this._getFirstInnerZone();\n\n      if (innerZone) {\n        if (!innerZone.focus(true)) {\n          return;\n        }\n      } else if (isElementFocusSubZone(ev.target as HTMLElement)) {\n        if (\n          !this.focusElement(\n            getNextElement(\n              ev.target as HTMLElement,\n              (ev.target as HTMLElement).firstChild as HTMLElement,\n              true,\n            ) as HTMLElement,\n          )\n        ) {\n          return;\n        }\n      } else {\n        return;\n      }\n    } else if (ev.altKey) {\n      return;\n    } else {\n      // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props, deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.space:\n          if (this._shouldRaiseClicksOnSpace && this._tryInvokeClickForFocusable(ev.target as HTMLElement, ev)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.left:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusLeft(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.right:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusRight(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.up:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusUp()) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.down:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusDown()) {\n              break;\n            }\n          }\n          return;\n        case KeyCodes.pageDown:\n          if (!pagingSupportDisabled && this._moveFocusPaging(true)) {\n            break;\n          }\n          return;\n        case KeyCodes.pageUp:\n          if (!pagingSupportDisabled && this._moveFocusPaging(false)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.tab:\n          if (\n            // eslint-disable-next-line deprecation/deprecation\n            this.props.allowTabKey ||\n            this.props.handleTabKey === FocusZoneTabbableElements.all ||\n            (this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n              this._isElementInput(ev.target as HTMLElement))\n          ) {\n            let focusChanged = false;\n            this._processingTabKey = true;\n            if (\n              direction === FocusZoneDirection.vertical ||\n              !this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP)\n            ) {\n              focusChanged = ev.shiftKey ? this._moveFocusUp() : this._moveFocusDown();\n            } else {\n              const tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n              focusChanged = tabWithDirection ? this._moveFocusLeft(theme) : this._moveFocusRight(theme);\n            }\n            this._processingTabKey = false;\n            if (focusChanged) {\n              break;\n            } else if (this.props.shouldResetActiveElementWhenTabFromZone) {\n              this._activeElement = null;\n            }\n          }\n          return;\n\n        case KeyCodes.home:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n          const firstChild = this._root.current && (this._root.current.firstChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            firstChild &&\n            this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.end:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, true))\n          ) {\n            return false;\n          }\n\n          const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.enter:\n          if (this._shouldRaiseClicksOnEnter && this._tryInvokeClickForFocusable(ev.target as HTMLElement, ev)) {\n            break;\n          }\n          return;\n\n        default:\n          return;\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n  private _tryInvokeClickForFocusable(targetElement: HTMLElement, ev?: React.KeyboardEvent<HTMLElement>): boolean {\n    let target = targetElement;\n    if (target === this._root.current) {\n      return false;\n    }\n\n    do {\n      if (\n        target.tagName === 'BUTTON' ||\n        target.tagName === 'A' ||\n        target.tagName === 'INPUT' ||\n        target.tagName === 'TEXTAREA'\n      ) {\n        return false;\n      }\n\n      if (\n        this._isImmediateDescendantOfZone(target) &&\n        target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true'\n      ) {\n        raiseClickFromKeyboardEvent(target, ev);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    } while (target !== this._root.current);\n\n    return false;\n  }\n\n  /**\n   * Traverse to find first child zone.\n   */\n  private _getFirstInnerZone(rootElement?: HTMLElement | null): FocusZone | null {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n    }\n\n    let child = rootElement.firstElementChild as HTMLElement | null;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n      }\n      const match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling as HTMLElement | null;\n    }\n\n    return null;\n  }\n\n  private _moveFocus(\n    isForward: boolean,\n    getDistanceFromCenter: (activeRect: ClientRect, targetRect: ClientRect) => number,\n    ev?: Event,\n    useDefaultWrap: boolean = true,\n  ): boolean {\n    let element = this._activeElement;\n    let candidateDistance = -1;\n    let candidateElement: HTMLElement | undefined = undefined;\n    let changedFocus = false;\n    const isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n\n    const activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = (isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element)) as HTMLElement;\n\n      if (isBidirectional) {\n        if (element) {\n          const targetRect = element.getBoundingClientRect();\n          const elementDistance = getDistanceFromCenter(activeRect as ClientRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      } else {\n        return this.focusElement(\n          getPreviousElement(\n            this._root.current,\n            this._root.current.lastElementChild as HTMLElement,\n            true,\n            true,\n            true,\n          ) as HTMLElement,\n        );\n      }\n    }\n\n    return changedFocus;\n  }\n\n  private _moveFocusDown(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(true, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusUp(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(false, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusLeft(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n            // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n            // This is important, because we want to be comparing the top of the target rect\n            // with the bottom of the active rect.\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.right <= activeRect.right &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = activeRect.right - targetRect.right;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusRight(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        !getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n            // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n            // This is important, because we want to be comparing the bottom of the target rect\n            // with the top of the active rect.\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.left >= activeRect.left &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = targetRect.left - activeRect.left;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getHorizontalDistanceFromCenter = (\n    isForward: boolean,\n    activeRect: ClientRect,\n    targetRect: ClientRect,\n  ): number => {\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n    // ClientRect values can be floats that differ by very small fractions of a decimal.\n    // If the difference between top and bottom are within a pixel then we should treat\n    // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n    // but without Math.Floor they will be handled incorrectly.\n    const targetRectTop = Math.floor(targetRect.top);\n    const activeRectBottom = Math.floor(activeRect.bottom);\n    const targetRectBottom = Math.floor(targetRect.bottom);\n    const activeRectTop = Math.floor(activeRect.top);\n    const isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n    const isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n    if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n      if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n        return 0;\n      }\n      return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n    }\n\n    if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n      return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n    }\n    return LARGE_DISTANCE_FROM_CENTER;\n  };\n\n  private _moveFocusPaging(isForward: boolean, useDefaultWrap: boolean = true): boolean {\n    let element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n    const scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    let candidateDistance = -1;\n    let candidateElement = undefined;\n    let targetTop = -1;\n    let targetBottom = -1;\n    const pagesize = (scrollableParent as HTMLElement).clientHeight;\n    const activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element);\n      if (element) {\n        const targetRect = element.getBoundingClientRect();\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const activeRectTop = Math.floor(activeRect.top);\n        const elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        const isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        const isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    let changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this._setFocusAlignment(candidateElement as HTMLElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n    return changedFocus;\n  }\n\n  private _setFocusAlignment(element: HTMLElement, isHorizontal?: boolean, isVertical?: boolean): void {\n    if (\n      this.props.direction === FocusZoneDirection.bidirectional &&\n      (!this._focusAlignment || isHorizontal || isVertical)\n    ) {\n      const rect = element.getBoundingClientRect();\n      const left = rect.left + rect.width / 2;\n      const top = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = { left, top };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top;\n      }\n    }\n  }\n\n  private _isImmediateDescendantOfZone(element?: HTMLElement): boolean {\n    return this._getOwnerZone(element) === this._root.current;\n  }\n\n  private _getOwnerZone(element?: HTMLElement): HTMLElement | null {\n    let parentElement = getParent(element as HTMLElement, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  }\n\n  private _updateTabIndexes(element?: HTMLElement): void {\n    if (\n      !this._activeElement &&\n      this.props.defaultTabbableElement &&\n      typeof this.props.defaultTabbableElement === 'function'\n    ) {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current as HTMLElement);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    }\n\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    const childNodes = element && element.children;\n\n    for (let childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      const child = childNodes[childIndex] as HTMLElement;\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (\n            !this._isInnerZone &&\n            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n          ) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (\n          !this._isInnerZone &&\n          ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n        ) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  }\n\n  private _isContentEditableElement(element: HTMLElement): boolean {\n    return element && element.getAttribute('contenteditable') === 'true';\n  }\n\n  private _isElementInput(element: HTMLElement): boolean {\n    if (\n      element &&\n      element.tagName &&\n      (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _shouldInputLoseFocus(element: HTMLInputElement | HTMLTextAreaElement, isForward?: boolean): boolean {\n    // If a tab was used, we want to focus on the next element.\n    if (\n      !this._processingTabKey &&\n      element &&\n      element.type &&\n      ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1\n    ) {\n      const selectionStart = element.selectionStart;\n      const selectionEnd = element.selectionEnd;\n      const isRangeSelected = selectionStart !== selectionEnd;\n      const inputValue = element.value;\n      const isReadonly = element.readOnly;\n\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n      if (\n        isRangeSelected ||\n        (selectionStart! > 0 && !isForward && !isReadonly) ||\n        (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n        (!!this.props.handleTabKey &&\n          !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private _shouldWrapFocus(\n    element: HTMLElement,\n    noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n  ): boolean {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  }\n\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n  private _portalContainsElement(element: HTMLElement): boolean {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  }\n\n  private _getDocument(): Document {\n    return getDocument(this._root.current)!;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}