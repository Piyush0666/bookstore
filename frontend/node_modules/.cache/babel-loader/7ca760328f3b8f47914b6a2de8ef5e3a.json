{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = function (props) {\n  var _a, _b;\n\n  var theme = props.theme,\n      className = props.className,\n      labelPosition = props.labelPosition,\n      disabled = props.disabled,\n      isFocused = props.isFocused;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  return {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }, className],\n    labelWrapper: [{\n      display: 'inline-flex',\n      alignItems: 'center'\n    }, labelPosition === Position.start && {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    }, labelPosition === Position.end && {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    }, labelPosition === Position.top && {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    }],\n    icon: [{\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    }, disabled && {\n      color: SpinButtonIconDisabledColor\n    }],\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    spinButtonWrapper: [{\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }, (labelPosition === Position.top || labelPosition === Position.bottom) && {\n      width: '100%'\n    }, !disabled && [{\n      selectors: {\n        ':hover': {\n          selectors: (_a = {\n            ':after': {\n              borderColor: SpinButtonRootBorderColorHovered\n            }\n          }, _a[HighContrastSelector] = {\n            selectors: {\n              ':after': {\n                borderColor: 'Highlight'\n              }\n            }\n          }, _a)\n        }\n      }\n    }, isFocused && {\n      selectors: {\n        '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2)\n      }\n    }], disabled && getDisabledStyles(theme)],\n    input: ['ms-spinButton-input', {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    }, !disabled && {\n      selectors: {\n        '::selection': {\n          backgroundColor: SpinButtonInputBackgroundColorSelected,\n          color: SpinButtonInputTextColorSelected,\n          selectors: (_b = {}, _b[HighContrastSelector] = {\n            backgroundColor: 'Highlight',\n            borderColor: 'Highlight',\n            color: 'HighlightText'\n          }, _b)\n        }\n      }\n    }, disabled && getDisabledStyles(theme)],\n    arrowButtonsContainer: [{\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    }, disabled && getDisabledStyles(theme)]\n  };\n};","map":{"version":3,"mappings":"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","names":["concatStyleSets","HighContrastSelector","IconFontSizes","getInputFocusStyle","memoizeFunction","Position","ARROW_BUTTON_WIDTH","ARROW_BUTTON_ICON_SIZE","DEFAULT_HEIGHT","DEFAULT_MIN_WIDTH","LABEL_MARGIN","getDisabledStyles","theme","SpinButtonTextColorDisabled","semanticColors","disabledText","SpinButtonBackgroundColorDisabled","disabledBackground","backgroundColor","pointerEvents","cursor","color","selectors","borderColor","_a","getArrowButtonStyles","isUpArrow","customSpecificArrowStyles","effects","ArrowButtonTextColor","palette","neutralSecondary","ArrowButtonTextColorHovered","buttonText","ArrowButtonTextColorPressed","ArrowButtonBackgroundHovered","buttonBackgroundHovered","ArrowButtonBackgroundPressed","buttonBackgroundPressed","defaultArrowButtonStyles","root","outline","display","height","width","padding","textAlign","borderRadius","roundedCorner2","rootHovered","rootChecked","rootPressed","_b","rootDisabled","opacity","_c","icon","fontSize","marginTop","marginRight","marginBottom","marginLeft","defaultUpArrowButtonStyles","defaultDownArrowButtonStyles","getStyles","props","className","labelPosition","disabled","isFocused","fonts","SpinButtonRootBorderColor","inputBorder","SpinButtonRootBackgroundColor","inputBackground","SpinButtonRootBorderColorHovered","inputBorderHovered","SpinButtonRootBorderColorFocused","inputFocusBorderAlt","SpinButtonInputTextColor","inputText","SpinButtonInputTextColorSelected","white","SpinButtonInputBackgroundColorSelected","inputBackgroundChecked","SpinButtonIconDisabledColor","medium","minWidth","labelWrapper","alignItems","start","float","end","top","large","label","lineHeight","spinButtonWrapper","position","boxSizing","content","left","bottom","right","borderWidth","borderStyle","input","boxShadow","flex","margin","fontFamily","whiteSpace","textOverflow","overflow","userSelect","arrowButtonsContainer"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\SpinButton\\SpinButton.styles.ts"],"sourcesContent":["import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\nimport type { IRawStyle, ITheme } from '../../Styling';\nimport type { IButtonStyles } from '../../Button';\nimport type { ISpinButtonStyles, ISpinButtonStyleProps } from './SpinButton.types';\n\nconst ARROW_BUTTON_WIDTH = 23;\nconst ARROW_BUTTON_ICON_SIZE = 8;\nconst DEFAULT_HEIGHT = 32;\nconst DEFAULT_MIN_WIDTH = 86;\nconst LABEL_MARGIN = 10;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n\n    return {\n      backgroundColor: SpinButtonBackgroundColorDisabled,\n      pointerEvents: 'none',\n      cursor: 'default',\n      color: SpinButtonTextColorDisabled,\n      selectors: {\n        ':after': {\n          borderColor: SpinButtonBackgroundColorDisabled,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n  },\n);\n\nexport const getArrowButtonStyles = memoizeFunction(\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { palette, semanticColors, effects } = theme;\n\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\n    const ArrowButtonTextColor = palette.neutralSecondary;\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\n\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n\n    const defaultArrowButtonStyles: IButtonStyles = {\n      root: {\n        outline: 'none',\n        display: 'block',\n        height: '50%',\n        width: ARROW_BUTTON_WIDTH,\n        padding: 0,\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        cursor: 'default',\n        color: ArrowButtonTextColor,\n        selectors: {\n          '&.ms-DownButton': {\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\n          },\n          '&.ms-UpButton': {\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\n          },\n        },\n      },\n      rootHovered: {\n        backgroundColor: ArrowButtonBackgroundHovered,\n        color: ArrowButtonTextColorHovered,\n      },\n      rootChecked: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootPressed: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootDisabled: {\n        opacity: 0.5,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            opacity: 1,\n          },\n        },\n      },\n      icon: {\n        fontSize: ARROW_BUTTON_ICON_SIZE,\n        marginTop: 0,\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n      },\n    };\n\n    // No specific styles needed as of now.\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    return concatStyleSets(\n      defaultArrowButtonStyles,\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\n      customSpecificArrowStyles,\n    ) as IButtonStyles;\n  },\n);\n\nexport const getStyles = (props: ISpinButtonStyleProps): ISpinButtonStyles => {\n  const { theme, className, labelPosition, disabled, isFocused } = props;\n  const { palette, semanticColors, effects, fonts } = theme;\n  const SpinButtonRootBorderColor = semanticColors.inputBorder;\n  const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  const SpinButtonInputTextColor = semanticColors.inputText;\n  const SpinButtonInputTextColorSelected = palette.white;\n  const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  const SpinButtonIconDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      fonts.medium,\n      {\n        outline: 'none',\n        width: '100%',\n        minWidth: DEFAULT_MIN_WIDTH,\n      },\n      className,\n    ],\n\n    labelWrapper: [\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n      },\n      labelPosition === Position.start && {\n        height: DEFAULT_HEIGHT,\n        float: 'left',\n        marginRight: LABEL_MARGIN,\n      },\n      labelPosition === Position.end && {\n        height: DEFAULT_HEIGHT,\n        float: 'right',\n        marginLeft: LABEL_MARGIN,\n      },\n      labelPosition === Position.top && {\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n        // the SpinButton is displayed with the label on top next to other form fields.\n        // Decrease the wrapper's effective height slightly to compensate.\n        marginBottom: -1,\n      },\n    ],\n\n    icon: [\n      {\n        padding: '0 5px',\n        fontSize: IconFontSizes.large,\n      },\n      disabled && {\n        color: SpinButtonIconDisabledColor,\n      },\n    ],\n\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large,\n    },\n\n    spinButtonWrapper: [\n      {\n        display: 'flex',\n        position: 'relative',\n        boxSizing: 'border-box',\n        height: DEFAULT_HEIGHT,\n        minWidth: DEFAULT_MIN_WIDTH,\n        selectors: {\n          // setting border using pseudo-element here in order to prevent:\n          // input and chevron buttons to overlap border under certain resolutions\n          ':after': {\n            pointerEvents: 'none',\n            content: \"''\",\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: SpinButtonRootBorderColor,\n            borderRadius: effects.roundedCorner2,\n          },\n        },\n      },\n      (labelPosition === Position.top || labelPosition === Position.bottom) && {\n        width: '100%',\n      },\n      !disabled && [\n        {\n          selectors: {\n            ':hover': {\n              selectors: {\n                ':after': {\n                  borderColor: SpinButtonRootBorderColorHovered,\n                },\n                [HighContrastSelector]: {\n                  selectors: {\n                    ':after': {\n                      borderColor: 'Highlight',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        isFocused && {\n          selectors: {\n            '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n          },\n        },\n      ],\n      disabled && getDisabledStyles(theme),\n    ],\n\n    input: [\n      'ms-spinButton-input',\n      {\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        borderStyle: 'none',\n        flex: 1,\n        margin: 0,\n        fontSize: fonts.medium.fontSize,\n        fontFamily: 'inherit',\n        color: SpinButtonInputTextColor,\n        backgroundColor: SpinButtonRootBackgroundColor,\n        height: '100%',\n        padding: '0 8px 0 9px',\n        outline: 0,\n        display: 'block',\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        cursor: 'text',\n        userSelect: 'text',\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\n      },\n      !disabled && {\n        selectors: {\n          '::selection': {\n            backgroundColor: SpinButtonInputBackgroundColorSelected,\n            color: SpinButtonInputTextColorSelected,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                borderColor: 'Highlight',\n                color: 'HighlightText',\n              },\n            },\n          },\n        },\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n\n    arrowButtonsContainer: [\n      {\n        display: 'block',\n        height: '100%',\n        cursor: 'default',\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}