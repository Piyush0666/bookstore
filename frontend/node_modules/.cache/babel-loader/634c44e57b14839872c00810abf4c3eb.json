{"ast":null,"code":"import { elementContainsAttribute } from './dom/elementContainsAttribute';\nimport { elementContains } from './dom/elementContains';\nimport { getParent } from './dom/getParent';\nimport { getWindow } from './dom/getWindow';\nimport { getDocument } from './dom/getDocument';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\n/**\n * Gets the first focusable element.\n *\n * @public\n */\n\nexport function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n  return getNextElement(rootElement, currentElement, true\n  /*checkNode*/\n  , false\n  /*suppressParentTraversal*/\n  , false\n  /*suppressChildTraversal*/\n  , includeElementsInFocusZones);\n}\n/**\n * Gets the last focusable element.\n *\n * @public\n */\n\nexport function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n  return getPreviousElement(rootElement, currentElement, true\n  /*checkNode*/\n  , false\n  /*suppressParentTraversal*/\n  , true\n  /*traverseChildren*/\n  , includeElementsInFocusZones);\n}\n/**\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\n\nexport function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n  if (checkNode === void 0) {\n    checkNode = true;\n  }\n\n  return getNextElement(rootElement, currentElement, checkNode, false\n  /*suppressParentTraversal*/\n  , false\n  /*suppressChildTraversal*/\n  , includeElementsInFocusZones, false\n  /*allowFocusRoot*/\n  , true\n  /*tabbable*/\n  );\n}\n/**\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\n\nexport function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n  if (checkNode === void 0) {\n    checkNode = true;\n  }\n\n  return getPreviousElement(rootElement, currentElement, checkNode, false\n  /*suppressParentTraversal*/\n  , true\n  /*traverseChildren*/\n  , includeElementsInFocusZones, false\n  /*allowFocusRoot*/\n  , true\n  /*tabbable*/\n  );\n}\n/**\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\n *\n * @public\n * @param rootElement - Element to start the search for a focusable child.\n * @returns True if focus was set, false if it was not.\n */\n\nexport function focusFirstChild(rootElement) {\n  var element = getNextElement(rootElement, rootElement, true, false, false, true);\n\n  if (element) {\n    focusAsync(element);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Traverse to find the previous element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n */\n\nexport function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {\n  if (!currentElement || !allowFocusRoot && currentElement === rootElement) {\n    return null;\n  }\n\n  var isCurrentElementVisible = isElementVisible(currentElement); // Check its children.\n\n  if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n    var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n    if (childMatch) {\n      if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {\n        return childMatch;\n      }\n\n      var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n      if (childMatchSiblingMatch) {\n        return childMatchSiblingMatch;\n      }\n\n      var childMatchParent = childMatch.parentElement; // At this point if we have not found any potential matches\n      // start looking at the rest of the subtree under the currentParent.\n      // NOTE: We do not want to recurse here because doing so could\n      // cause elements to get skipped.\n\n      while (childMatchParent && childMatchParent !== currentElement) {\n        var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n        if (childMatchParentMatch) {\n          return childMatchParentMatch;\n        }\n\n        childMatchParent = childMatchParent.parentElement;\n      }\n    }\n  } // Check the current node, if it's not the first traversal.\n\n\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  } // Check its previous sibling.\n\n\n  var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n  if (siblingMatch) {\n    return siblingMatch;\n  } // Check its parent.\n\n\n  if (!suppressParentTraversal) {\n    return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n  }\n\n  return null;\n}\n/**\n * Traverse to find the next focusable element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n * @param checkNode - Include currentElement in search when true.\n */\n\nexport function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable) {\n  if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {\n    return null;\n  }\n\n  var isCurrentElementVisible = isElementVisible(currentElement); // Check the current node, if it's not the first traversal.\n\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  } // Check its children.\n\n\n  if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n    var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n    if (childMatch) {\n      return childMatch;\n    }\n  }\n\n  if (currentElement === rootElement) {\n    return null;\n  } // Check its sibling.\n\n\n  var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n\n  if (!suppressParentTraversal) {\n    return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n  }\n\n  return null;\n}\n/**\n * Determines if an element is visible.\n *\n * @public\n */\n\nexport function isElementVisible(element) {\n  // If the element is not valid, return false.\n  if (!element || !element.getAttribute) {\n    return false;\n  }\n\n  var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE); // If the element is explicitly marked with the visibility attribute, return that value as boolean.\n\n  if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\n    return visibilityAttribute === 'true';\n  } // Fallback to other methods of determining actual visibility.\n\n\n  return element.offsetHeight !== 0 || element.offsetParent !== null || // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  element.isVisible === true; // used as a workaround for testing.\n}\n/**\n * Determines if an element is visible and not hidden\n * @param element - Element to check\n * @returns Returns true if the given element is visible and not hidden\n *\n * @public\n */\n\nexport function isElementVisibleAndNotHidden(element) {\n  return !!element && isElementVisible(element) && !element.hidden && window.getComputedStyle(element).visibility !== 'hidden';\n}\n/**\n * Determines if an element can receive focus programmatically or via a mouse click.\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\n * meaning tabIndex != -1.\n *\n * @public\n */\n\nexport function isElementTabbable(element, checkTabIndex) {\n  // If this element is null or is disabled, it is not considered tabbable.\n  if (!element || element.disabled) {\n    return false;\n  }\n\n  var tabIndex = 0;\n  var tabIndexAttributeValue = null;\n\n  if (element && element.getAttribute) {\n    tabIndexAttributeValue = element.getAttribute('tabIndex');\n\n    if (tabIndexAttributeValue) {\n      tabIndex = parseInt(tabIndexAttributeValue, 10);\n    }\n  }\n\n  var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\n  var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\n  var result = !!element && isFocusableAttribute !== 'false' && (element.tagName === 'A' || element.tagName === 'BUTTON' || element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT' || isFocusableAttribute === 'true' || isTabIndexSet);\n  return checkTabIndex ? tabIndex !== -1 && result : result;\n}\n/**\n * Determines if a given element is a focus zone.\n *\n * @public\n */\n\nexport function isElementFocusZone(element) {\n  return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\n}\n/**\n * Determines if a given element is a focus sub zone.\n *\n * @public\n */\n\nexport function isElementFocusSubZone(element) {\n  return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\n}\n/**\n * Determines if an element, or any of its children, contain focus.\n *\n * @public\n */\n\nexport function doesElementContainFocus(element) {\n  var document = getDocument(element);\n  var currentActiveElement = document && document.activeElement;\n\n  if (currentActiveElement && elementContains(element, currentActiveElement)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\n * @param element - element to start searching from\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\n * @returns true if focus should wrap, false otherwise\n */\n\nexport function shouldWrapFocus(element, noWrapDataAttribute) {\n  return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\n}\nvar targetToFocusOnNextRepaint = undefined;\n/**\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\n * only the latest called focusAsync element will actually be focused\n * @param element - The element to focus\n */\n\nexport function focusAsync(element) {\n  if (element) {\n    // An element was already queued to be focused, so replace that one with the new element\n    if (targetToFocusOnNextRepaint) {\n      targetToFocusOnNextRepaint = element;\n      return;\n    }\n\n    targetToFocusOnNextRepaint = element;\n    var win = getWindow(element);\n\n    if (win) {\n      // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe\n      win.requestAnimationFrame(function () {\n        targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus(); // We are done focusing for this frame, so reset the queued focus element\n\n        targetToFocusOnNextRepaint = undefined;\n      });\n    }\n  }\n}\n/**\n * Finds the closest focusable element via an index path from a parent. See\n * `getElementIndexPath` for getting an index path from an element to a child.\n */\n\nexport function getFocusableByIndexPath(parent, path) {\n  var element = parent;\n\n  for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n    var index = path_1[_i];\n    var nextChild = element.children[Math.min(index, element.children.length - 1)];\n\n    if (!nextChild) {\n      break;\n    }\n\n    element = nextChild;\n  }\n\n  element = isElementTabbable(element) && isElementVisible(element) ? element : getNextElement(parent, element, true) || getPreviousElement(parent, element);\n  return element;\n}\n/**\n * Finds the element index path from a parent element to a child element.\n *\n * If you had this node structure: \"A has children [B, C] and C has child D\",\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\n */\n\nexport function getElementIndexPath(fromElement, toElement) {\n  var path = [];\n\n  while (toElement && fromElement && toElement !== fromElement) {\n    var parent_1 = getParent(toElement, true);\n\n    if (parent_1 === null) {\n      return [];\n    }\n\n    path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));\n    toElement = parent_1;\n  }\n\n  return path;\n}","map":{"version":3,"mappings":"AAAA,SAASA,wBAAT,QAAyC,gCAAzC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,IAAMC,sBAAsB,GAAG,mBAA/B;AACA,IAAMC,oBAAoB,GAAG,iBAA7B;AACA,IAAMC,sBAAsB,GAAG,mBAA/B;AACA,IAAMC,uBAAuB,GAAG,uBAAhC;AAEA;;;;;;AAKA,OAAM,SAAUC,iBAAV,CACJC,WADI,EAEJC,cAFI,EAGJC,2BAHI,EAGiC;EAErC,OAAOC,cAAc,CACnBH,WADmB,EAEnBC,cAFmB,EAGnB;EAAK;EAHc,EAInB;EAAM;EAJa,EAKnB;EAAM;EALa,EAMnBC,2BANmB,CAArB;AAQD;AAED;;;;;;AAKA,OAAM,SAAUE,gBAAV,CACJJ,WADI,EAEJC,cAFI,EAGJC,2BAHI,EAGiC;EAErC,OAAOG,kBAAkB,CACvBL,WADuB,EAEvBC,cAFuB,EAGvB;EAAK;EAHkB,EAIvB;EAAM;EAJiB,EAKvB;EAAK;EALkB,EAMvBC,2BANuB,CAAzB;AAQD;AAED;;;;;;;;;;;AAUA,OAAM,SAAUI,gBAAV,CACJN,WADI,EAEJC,cAFI,EAGJC,2BAHI,EAIJK,SAJI,EAIqB;EAAzB;IAAAA;EAAyB;;EAEzB,OAAOJ,cAAc,CACnBH,WADmB,EAEnBC,cAFmB,EAGnBM,SAHmB,EAInB;EAAM;EAJa,EAKnB;EAAM;EALa,EAMnBL,2BANmB,EAOnB;EAAM;EAPa,EAQnB;EAAK;EARc,CAArB;AAUD;AAED;;;;;;;;;;;AAUA,OAAM,SAAUM,eAAV,CACJR,WADI,EAEJC,cAFI,EAGJC,2BAHI,EAIJK,SAJI,EAIqB;EAAzB;IAAAA;EAAyB;;EAEzB,OAAOF,kBAAkB,CACvBL,WADuB,EAEvBC,cAFuB,EAGvBM,SAHuB,EAIvB;EAAM;EAJiB,EAKvB;EAAK;EALkB,EAMvBL,2BANuB,EAOvB;EAAM;EAPiB,EAQvB;EAAK;EARkB,CAAzB;AAUD;AAED;;;;;;;;AAOA,OAAM,SAAUO,eAAV,CAA0BT,WAA1B,EAAkD;EACtD,IAAIU,OAAO,GAAuBP,cAAc,CAACH,WAAD,EAAcA,WAAd,EAA2B,IAA3B,EAAiC,KAAjC,EAAwC,KAAxC,EAA+C,IAA/C,CAAhD;;EAEA,IAAIU,OAAJ,EAAa;IACXC,UAAU,CAACD,OAAD,CAAV;IACA,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUL,kBAAV,CACJL,WADI,EAEJC,cAFI,EAGJM,SAHI,EAIJK,uBAJI,EAKJC,gBALI,EAMJX,2BANI,EAOJY,cAPI,EAQJC,QARI,EAQc;EAElB,IAAI,CAACd,cAAD,IAAoB,CAACa,cAAD,IAAmBb,cAAc,KAAKD,WAA9D,EAA4E;IAC1E,OAAO,IAAP;EACD;;EAED,IAAIgB,uBAAuB,GAAGC,gBAAgB,CAAChB,cAAD,CAA9C,CANkB,CAQlB;;EACA,IACEY,gBAAgB,IAChBG,uBADA,KAECd,2BAA2B,IAAI,EAAEgB,kBAAkB,CAACjB,cAAD,CAAlB,IAAsCkB,qBAAqB,CAAClB,cAAD,CAA7D,CAFhC,CADF,EAIE;IACA,IAAMmB,UAAU,GAAGf,kBAAkB,CACnCL,WADmC,EAEnCC,cAAc,CAACoB,gBAFoB,EAGnC,IAHmC,EAInC,IAJmC,EAKnC,IALmC,EAMnCnB,2BANmC,EAOnCY,cAPmC,EAQnCC,QARmC,CAArC;;IAWA,IAAIK,UAAJ,EAAgB;MACd,IAAKL,QAAQ,IAAIO,iBAAiB,CAACF,UAAD,EAAa,IAAb,CAA9B,IAAqD,CAACL,QAA1D,EAAoE;QAClE,OAAOK,UAAP;MACD;;MAED,IAAMG,sBAAsB,GAAGlB,kBAAkB,CAC/CL,WAD+C,EAE/CoB,UAAU,CAACI,sBAFoC,EAG/C,IAH+C,EAI/C,IAJ+C,EAK/C,IAL+C,EAM/CtB,2BAN+C,EAO/CY,cAP+C,EAQ/CC,QAR+C,CAAjD;;MAUA,IAAIQ,sBAAJ,EAA4B;QAC1B,OAAOA,sBAAP;MACD;;MAED,IAAIE,gBAAgB,GAAGL,UAAU,CAACM,aAAlC,CAnBc,CAqBd;MACA;MACA;MACA;;MACA,OAAOD,gBAAgB,IAAIA,gBAAgB,KAAKxB,cAAhD,EAAgE;QAC9D,IAAM0B,qBAAqB,GAAGtB,kBAAkB,CAC9CL,WAD8C,EAE9CyB,gBAAgB,CAACD,sBAF6B,EAG9C,IAH8C,EAI9C,IAJ8C,EAK9C,IAL8C,EAM9CtB,2BAN8C,EAO9CY,cAP8C,EAQ9CC,QAR8C,CAAhD;;QAWA,IAAIY,qBAAJ,EAA2B;UACzB,OAAOA,qBAAP;QACD;;QAEDF,gBAAgB,GAAGA,gBAAgB,CAACC,aAApC;MACD;IACF;EACF,CArEiB,CAuElB;;;EACA,IAAInB,SAAS,IAAIS,uBAAb,IAAwCM,iBAAiB,CAACrB,cAAD,EAAiBc,QAAjB,CAA7D,EAAyF;IACvF,OAAOd,cAAP;EACD,CA1EiB,CA4ElB;;;EACA,IAAM2B,YAAY,GAAGvB,kBAAkB,CACrCL,WADqC,EAErCC,cAAc,CAACuB,sBAFsB,EAGrC,IAHqC,EAIrC,IAJqC,EAKrC,IALqC,EAMrCtB,2BANqC,EAOrCY,cAPqC,EAQrCC,QARqC,CAAvC;;EAWA,IAAIa,YAAJ,EAAkB;IAChB,OAAOA,YAAP;EACD,CA1FiB,CA4FlB;;;EACA,IAAI,CAAChB,uBAAL,EAA8B;IAC5B,OAAOP,kBAAkB,CACvBL,WADuB,EAEvBC,cAAc,CAACyB,aAFQ,EAGvB,IAHuB,EAIvB,KAJuB,EAKvB,KALuB,EAMvBxB,2BANuB,EAOvBY,cAPuB,EAQvBC,QARuB,CAAzB;EAUD;;EAED,OAAO,IAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUZ,cAAV,CACJH,WADI,EAEJC,cAFI,EAGJM,SAHI,EAIJK,uBAJI,EAKJiB,sBALI,EAMJ3B,2BANI,EAOJY,cAPI,EAQJC,QARI,EAQc;EAElB,IAAI,CAACd,cAAD,IAAoBA,cAAc,KAAKD,WAAnB,IAAkC6B,sBAAlC,IAA4D,CAACf,cAArF,EAAsG;IACpG,OAAO,IAAP;EACD;;EAED,IAAIE,uBAAuB,GAAGC,gBAAgB,CAAChB,cAAD,CAA9C,CANkB,CAQlB;;EACA,IAAIM,SAAS,IAAIS,uBAAb,IAAwCM,iBAAiB,CAACrB,cAAD,EAAiBc,QAAjB,CAA7D,EAAyF;IACvF,OAAOd,cAAP;EACD,CAXiB,CAalB;;;EACA,IACE,CAAC4B,sBAAD,IACAb,uBADA,KAECd,2BAA2B,IAAI,EAAEgB,kBAAkB,CAACjB,cAAD,CAAlB,IAAsCkB,qBAAqB,CAAClB,cAAD,CAA7D,CAFhC,CADF,EAIE;IACA,IAAMmB,UAAU,GAAGjB,cAAc,CAC/BH,WAD+B,EAE/BC,cAAc,CAAC6B,iBAFgB,EAG/B,IAH+B,EAI/B,IAJ+B,EAK/B,KAL+B,EAM/B5B,2BAN+B,EAO/BY,cAP+B,EAQ/BC,QAR+B,CAAjC;;IAWA,IAAIK,UAAJ,EAAgB;MACd,OAAOA,UAAP;IACD;EACF;;EAED,IAAInB,cAAc,KAAKD,WAAvB,EAAoC;IAClC,OAAO,IAAP;EACD,CArCiB,CAuClB;;;EACA,IAAM4B,YAAY,GAAGzB,cAAc,CACjCH,WADiC,EAEjCC,cAAc,CAAC8B,kBAFkB,EAGjC,IAHiC,EAIjC,IAJiC,EAKjC,KALiC,EAMjC7B,2BANiC,EAOjCY,cAPiC,EAQjCC,QARiC,CAAnC;;EAWA,IAAIa,YAAJ,EAAkB;IAChB,OAAOA,YAAP;EACD;;EAED,IAAI,CAAChB,uBAAL,EAA8B;IAC5B,OAAOT,cAAc,CACnBH,WADmB,EAEnBC,cAAc,CAACyB,aAFI,EAGnB,KAHmB,EAInB,KAJmB,EAKnB,IALmB,EAMnBxB,2BANmB,EAOnBY,cAPmB,EAQnBC,QARmB,CAArB;EAUD;;EAED,OAAO,IAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUE,gBAAV,CAA2BP,OAA3B,EAAkE;EACtE;EACA,IAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACsB,YAAzB,EAAuC;IACrC,OAAO,KAAP;EACD;;EAED,IAAMC,mBAAmB,GAAGvB,OAAO,CAACsB,YAAR,CAAqBpC,oBAArB,CAA5B,CANsE,CAQtE;;EACA,IAAIqC,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAKC,SAA5D,EAAuE;IACrE,OAAOD,mBAAmB,KAAK,MAA/B;EACD,CAXqE,CAatE;;;EACA,OACEvB,OAAO,CAACyB,YAAR,KAAyB,CAAzB,IACAzB,OAAO,CAAC0B,YAAR,KAAyB,IADzB,IAEA;EACC1B,OAAe,CAAC2B,SAAhB,KAA8B,IAJjC,CAdsE,CAmBnE;AACJ;AAED;;;;;;;;AAOA,OAAM,SAAUC,4BAAV,CAAuC5B,OAAvC,EAA8E;EAClF,OACE,CAAC,CAACA,OAAF,IACAO,gBAAgB,CAACP,OAAD,CADhB,IAEA,CAACA,OAAO,CAAC6B,MAFT,IAGAC,MAAM,CAACC,gBAAP,CAAwB/B,OAAxB,EAAiCgC,UAAjC,KAAgD,QAJlD;AAMD;AAED;;;;;;;;AAOA,OAAM,SAAUpB,iBAAV,CAA4BZ,OAA5B,EAAkDiC,aAAlD,EAAyE;EAC7E;EACA,IAAI,CAACjC,OAAD,IAAaA,OAA6B,CAACkC,QAA/C,EAAyD;IACvD,OAAO,KAAP;EACD;;EAED,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,sBAAsB,GAAG,IAA7B;;EAEA,IAAIpC,OAAO,IAAIA,OAAO,CAACsB,YAAvB,EAAqC;IACnCc,sBAAsB,GAAGpC,OAAO,CAACsB,YAAR,CAAqB,UAArB,CAAzB;;IAEA,IAAIc,sBAAJ,EAA4B;MAC1BD,QAAQ,GAAGE,QAAQ,CAACD,sBAAD,EAAyB,EAAzB,CAAnB;IACD;EACF;;EAED,IAAIE,oBAAoB,GAAGtC,OAAO,CAACsB,YAAR,GAAuBtB,OAAO,CAACsB,YAAR,CAAqBrC,sBAArB,CAAvB,GAAsE,IAAjG;EACA,IAAIsD,aAAa,GAAGH,sBAAsB,KAAK,IAA3B,IAAmCD,QAAQ,IAAI,CAAnE;EAEA,IAAMK,MAAM,GACV,CAAC,CAACxC,OAAF,IACAsC,oBAAoB,KAAK,OADzB,KAECtC,OAAO,CAACyC,OAAR,KAAoB,GAApB,IACCzC,OAAO,CAACyC,OAAR,KAAoB,QADrB,IAECzC,OAAO,CAACyC,OAAR,KAAoB,OAFrB,IAGCzC,OAAO,CAACyC,OAAR,KAAoB,UAHrB,IAICzC,OAAO,CAACyC,OAAR,KAAoB,QAJrB,IAKCH,oBAAoB,KAAK,MAL1B,IAMCC,aARF,CADF;EAWA,OAAON,aAAa,GAAGE,QAAQ,KAAK,CAAC,CAAd,IAAmBK,MAAtB,GAA+BA,MAAnD;AACD;AAED;;;;;;AAKA,OAAM,SAAUhC,kBAAV,CAA6BR,OAA7B,EAAkD;EACtD,OAAO,CAAC,EAAEA,OAAO,IAAIA,OAAO,CAACsB,YAAnB,IAAmC,CAAC,CAACtB,OAAO,CAACsB,YAAR,CAAqBnC,sBAArB,CAAvC,CAAR;AACD;AAED;;;;;;AAKA,OAAM,SAAUsB,qBAAV,CAAgCT,OAAhC,EAAqD;EACzD,OAAO,CAAC,EAAEA,OAAO,IAAIA,OAAO,CAACsB,YAAnB,IAAmCtB,OAAO,CAACsB,YAAR,CAAqBlC,uBAArB,MAAkD,MAAvF,CAAR;AACD;AAED;;;;;;AAKA,OAAM,SAAUsD,uBAAV,CAAkC1C,OAAlC,EAAsD;EAC1D,IAAI2C,QAAQ,GAAG3D,WAAW,CAACgB,OAAD,CAA1B;EACA,IAAI4C,oBAAoB,GAA4BD,QAAQ,IAAKA,QAAQ,CAACE,aAA1E;;EACA,IAAID,oBAAoB,IAAI/D,eAAe,CAACmB,OAAD,EAAU4C,oBAAV,CAA3C,EAA4E;IAC1E,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUE,eAAV,CACJ9C,OADI,EAEJ+C,mBAFI,EAEoE;EAExE,OAAOnE,wBAAwB,CAACoB,OAAD,EAAU+C,mBAAV,CAAxB,KAA2D,MAA3D,GAAoE,KAApE,GAA4E,IAAnF;AACD;AAED,IAAIC,0BAA0B,GAA2DxB,SAAzF;AAEA;;;;;;;AAMA,OAAM,SAAUvB,UAAV,CAAqBD,OAArB,EAAoF;EACxF,IAAIA,OAAJ,EAAa;IACX;IACA,IAAIgD,0BAAJ,EAAgC;MAC9BA,0BAA0B,GAAGhD,OAA7B;MACA;IACD;;IAEDgD,0BAA0B,GAAGhD,OAA7B;IAEA,IAAMiD,GAAG,GAAGlE,SAAS,CAACiB,OAAD,CAArB;;IAEA,IAAIiD,GAAJ,EAAS;MACP;MACAA,GAAG,CAACC,qBAAJ,CAA0B;QACxBF,0BAA0B,IAAIA,0BAA0B,CAACG,KAA3B,EAA9B,CADwB,CAGxB;;QACAH,0BAA0B,GAAGxB,SAA7B;MACD,CALD;IAMD;EACF;AACF;AAED;;;;;AAIA,OAAM,SAAU4B,uBAAV,CAAkCC,MAAlC,EAAuDC,IAAvD,EAAqE;EACzE,IAAItD,OAAO,GAAGqD,MAAd;;EAEA,KAAoB,yBAApB,EAAoBE,kBAApB,EAAoBA,IAApB,EAA0B;IAArB,IAAMC,KAAK,aAAX;IACH,IAAMC,SAAS,GAAGzD,OAAO,CAAC0D,QAAR,CAAiBC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBxD,OAAO,CAAC0D,QAAR,CAAiBG,MAAjB,GAA0B,CAA1C,CAAjB,CAAlB;;IAEA,IAAI,CAACJ,SAAL,EAAgB;MACd;IACD;;IACDzD,OAAO,GAAGyD,SAAV;EACD;;EAEDzD,OAAO,GACLY,iBAAiB,CAACZ,OAAD,CAAjB,IAA8BO,gBAAgB,CAACP,OAAD,CAA9C,GACIA,OADJ,GAEIP,cAAc,CAAC4D,MAAD,EAASrD,OAAT,EAAkB,IAAlB,CAAd,IAAyCL,kBAAkB,CAAC0D,MAAD,EAASrD,OAAT,CAHjE;EAKA,OAAOA,OAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAU8D,mBAAV,CAA8BC,WAA9B,EAAwDC,SAAxD,EAA8E;EAClF,IAAMV,IAAI,GAAa,EAAvB;;EAEA,OAAOU,SAAS,IAAID,WAAb,IAA4BC,SAAS,KAAKD,WAAjD,EAA8D;IAC5D,IAAME,QAAM,GAAGnF,SAAS,CAACkF,SAAD,EAAY,IAAZ,CAAxB;;IAEA,IAAIC,QAAM,KAAK,IAAf,EAAqB;MACnB,OAAO,EAAP;IACD;;IAEDX,IAAI,CAACY,OAAL,CAAaC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,QAAM,CAACP,QAApC,EAA8CM,SAA9C,CAAb;IACAA,SAAS,GAAGC,QAAZ;EACD;;EAED,OAAOX,IAAP;AACD","names":["elementContainsAttribute","elementContains","getParent","getWindow","getDocument","IS_FOCUSABLE_ATTRIBUTE","IS_VISIBLE_ATTRIBUTE","FOCUSZONE_ID_ATTRIBUTE","FOCUSZONE_SUB_ATTRIBUTE","getFirstFocusable","rootElement","currentElement","includeElementsInFocusZones","getNextElement","getLastFocusable","getPreviousElement","getFirstTabbable","checkNode","getLastTabbable","focusFirstChild","element","focusAsync","suppressParentTraversal","traverseChildren","allowFocusRoot","tabbable","isCurrentElementVisible","isElementVisible","isElementFocusZone","isElementFocusSubZone","childMatch","lastElementChild","isElementTabbable","childMatchSiblingMatch","previousElementSibling","childMatchParent","parentElement","childMatchParentMatch","siblingMatch","suppressChildTraversal","firstElementChild","nextElementSibling","getAttribute","visibilityAttribute","undefined","offsetHeight","offsetParent","isVisible","isElementVisibleAndNotHidden","hidden","window","getComputedStyle","visibility","checkTabIndex","disabled","tabIndex","tabIndexAttributeValue","parseInt","isFocusableAttribute","isTabIndexSet","result","tagName","doesElementContainFocus","document","currentActiveElement","activeElement","shouldWrapFocus","noWrapDataAttribute","targetToFocusOnNextRepaint","win","requestAnimationFrame","focus","getFocusableByIndexPath","parent","path","_i","index","nextChild","children","Math","min","length","getElementIndexPath","fromElement","toElement","parent_1","unshift","Array","prototype","indexOf","call"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\utilities\\src\\focus.ts"],"sourcesContent":["import { elementContainsAttribute } from './dom/elementContainsAttribute';\nimport { elementContains } from './dom/elementContains';\nimport { getParent } from './dom/getParent';\nimport { getWindow } from './dom/getWindow';\nimport { getDocument } from './dom/getDocument';\n\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nconst IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nconst FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\n\n/**\n * Gets the first focusable element.\n *\n * @public\n */\nexport function getFirstFocusable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n): HTMLElement | null {\n  return getNextElement(\n    rootElement,\n    currentElement,\n    true /*checkNode*/,\n    false /*suppressParentTraversal*/,\n    false /*suppressChildTraversal*/,\n    includeElementsInFocusZones,\n  );\n}\n\n/**\n * Gets the last focusable element.\n *\n * @public\n */\nexport function getLastFocusable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n): HTMLElement | null {\n  return getPreviousElement(\n    rootElement,\n    currentElement,\n    true /*checkNode*/,\n    false /*suppressParentTraversal*/,\n    true /*traverseChildren*/,\n    includeElementsInFocusZones,\n  );\n}\n\n/**\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getFirstTabbable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n  checkNode: boolean = true,\n): HTMLElement | null {\n  return getNextElement(\n    rootElement,\n    currentElement,\n    checkNode,\n    false /*suppressParentTraversal*/,\n    false /*suppressChildTraversal*/,\n    includeElementsInFocusZones,\n    false /*allowFocusRoot*/,\n    true /*tabbable*/,\n  );\n}\n\n/**\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getLastTabbable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n  checkNode: boolean = true,\n): HTMLElement | null {\n  return getPreviousElement(\n    rootElement,\n    currentElement,\n    checkNode,\n    false /*suppressParentTraversal*/,\n    true /*traverseChildren*/,\n    includeElementsInFocusZones,\n    false /*allowFocusRoot*/,\n    true /*tabbable*/,\n  );\n}\n\n/**\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\n *\n * @public\n * @param rootElement - Element to start the search for a focusable child.\n * @returns True if focus was set, false if it was not.\n */\nexport function focusFirstChild(rootElement: HTMLElement): boolean {\n  let element: HTMLElement | null = getNextElement(rootElement, rootElement, true, false, false, true);\n\n  if (element) {\n    focusAsync(element);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Traverse to find the previous element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n */\nexport function getPreviousElement(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement | null,\n  checkNode?: boolean,\n  suppressParentTraversal?: boolean,\n  traverseChildren?: boolean,\n  includeElementsInFocusZones?: boolean,\n  allowFocusRoot?: boolean,\n  tabbable?: boolean,\n): HTMLElement | null {\n  if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {\n    return null;\n  }\n\n  let isCurrentElementVisible = isElementVisible(currentElement);\n\n  // Check its children.\n  if (\n    traverseChildren &&\n    isCurrentElementVisible &&\n    (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))\n  ) {\n    const childMatch = getPreviousElement(\n      rootElement,\n      currentElement.lastElementChild as HTMLElement,\n      true,\n      true,\n      true,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n\n    if (childMatch) {\n      if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {\n        return childMatch;\n      }\n\n      const childMatchSiblingMatch = getPreviousElement(\n        rootElement,\n        childMatch.previousElementSibling as HTMLElement,\n        true,\n        true,\n        true,\n        includeElementsInFocusZones,\n        allowFocusRoot,\n        tabbable,\n      );\n      if (childMatchSiblingMatch) {\n        return childMatchSiblingMatch;\n      }\n\n      let childMatchParent = childMatch.parentElement;\n\n      // At this point if we have not found any potential matches\n      // start looking at the rest of the subtree under the currentParent.\n      // NOTE: We do not want to recurse here because doing so could\n      // cause elements to get skipped.\n      while (childMatchParent && childMatchParent !== currentElement) {\n        const childMatchParentMatch = getPreviousElement(\n          rootElement,\n          childMatchParent.previousElementSibling as HTMLElement,\n          true,\n          true,\n          true,\n          includeElementsInFocusZones,\n          allowFocusRoot,\n          tabbable,\n        );\n\n        if (childMatchParentMatch) {\n          return childMatchParentMatch;\n        }\n\n        childMatchParent = childMatchParent.parentElement;\n      }\n    }\n  }\n\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n\n  // Check its previous sibling.\n  const siblingMatch = getPreviousElement(\n    rootElement,\n    currentElement.previousElementSibling as HTMLElement,\n    true,\n    true,\n    true,\n    includeElementsInFocusZones,\n    allowFocusRoot,\n    tabbable,\n  );\n\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n\n  // Check its parent.\n  if (!suppressParentTraversal) {\n    return getPreviousElement(\n      rootElement,\n      currentElement.parentElement,\n      true,\n      false,\n      false,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n  }\n\n  return null;\n}\n\n/**\n * Traverse to find the next focusable element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n * @param checkNode - Include currentElement in search when true.\n */\nexport function getNextElement(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement | null,\n  checkNode?: boolean,\n  suppressParentTraversal?: boolean,\n  suppressChildTraversal?: boolean,\n  includeElementsInFocusZones?: boolean,\n  allowFocusRoot?: boolean,\n  tabbable?: boolean,\n): HTMLElement | null {\n  if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {\n    return null;\n  }\n\n  let isCurrentElementVisible = isElementVisible(currentElement);\n\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n\n  // Check its children.\n  if (\n    !suppressChildTraversal &&\n    isCurrentElementVisible &&\n    (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))\n  ) {\n    const childMatch = getNextElement(\n      rootElement,\n      currentElement.firstElementChild as HTMLElement,\n      true,\n      true,\n      false,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n\n    if (childMatch) {\n      return childMatch;\n    }\n  }\n\n  if (currentElement === rootElement) {\n    return null;\n  }\n\n  // Check its sibling.\n  const siblingMatch = getNextElement(\n    rootElement,\n    currentElement.nextElementSibling as HTMLElement,\n    true,\n    true,\n    false,\n    includeElementsInFocusZones,\n    allowFocusRoot,\n    tabbable,\n  );\n\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n\n  if (!suppressParentTraversal) {\n    return getNextElement(\n      rootElement,\n      currentElement.parentElement,\n      false,\n      false,\n      true,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n  }\n\n  return null;\n}\n\n/**\n * Determines if an element is visible.\n *\n * @public\n */\nexport function isElementVisible(element: HTMLElement | undefined | null): boolean {\n  // If the element is not valid, return false.\n  if (!element || !element.getAttribute) {\n    return false;\n  }\n\n  const visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);\n\n  // If the element is explicitly marked with the visibility attribute, return that value as boolean.\n  if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\n    return visibilityAttribute === 'true';\n  }\n\n  // Fallback to other methods of determining actual visibility.\n  return (\n    element.offsetHeight !== 0 ||\n    element.offsetParent !== null ||\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (element as any).isVisible === true\n  ); // used as a workaround for testing.\n}\n\n/**\n * Determines if an element is visible and not hidden\n * @param element - Element to check\n * @returns Returns true if the given element is visible and not hidden\n *\n * @public\n */\nexport function isElementVisibleAndNotHidden(element: HTMLElement | undefined | null): boolean {\n  return (\n    !!element &&\n    isElementVisible(element) &&\n    !element.hidden &&\n    window.getComputedStyle(element).visibility !== 'hidden'\n  );\n}\n\n/**\n * Determines if an element can receive focus programmatically or via a mouse click.\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\n * meaning tabIndex != -1.\n *\n * @public\n */\nexport function isElementTabbable(element: HTMLElement, checkTabIndex?: boolean): boolean {\n  // If this element is null or is disabled, it is not considered tabbable.\n  if (!element || (element as HTMLButtonElement).disabled) {\n    return false;\n  }\n\n  let tabIndex = 0;\n  let tabIndexAttributeValue = null;\n\n  if (element && element.getAttribute) {\n    tabIndexAttributeValue = element.getAttribute('tabIndex');\n\n    if (tabIndexAttributeValue) {\n      tabIndex = parseInt(tabIndexAttributeValue, 10);\n    }\n  }\n\n  let isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\n  let isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\n\n  const result =\n    !!element &&\n    isFocusableAttribute !== 'false' &&\n    (element.tagName === 'A' ||\n      element.tagName === 'BUTTON' ||\n      element.tagName === 'INPUT' ||\n      element.tagName === 'TEXTAREA' ||\n      element.tagName === 'SELECT' ||\n      isFocusableAttribute === 'true' ||\n      isTabIndexSet);\n\n  return checkTabIndex ? tabIndex !== -1 && result : result;\n}\n\n/**\n * Determines if a given element is a focus zone.\n *\n * @public\n */\nexport function isElementFocusZone(element?: HTMLElement): boolean {\n  return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\n}\n\n/**\n * Determines if a given element is a focus sub zone.\n *\n * @public\n */\nexport function isElementFocusSubZone(element?: HTMLElement): boolean {\n  return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\n}\n\n/**\n * Determines if an element, or any of its children, contain focus.\n *\n * @public\n */\nexport function doesElementContainFocus(element: HTMLElement): boolean {\n  let document = getDocument(element);\n  let currentActiveElement: HTMLElement | undefined = document && (document.activeElement as HTMLElement);\n  if (currentActiveElement && elementContains(element, currentActiveElement)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\n * @param element - element to start searching from\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\n * @returns true if focus should wrap, false otherwise\n */\nexport function shouldWrapFocus(\n  element: HTMLElement,\n  noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n): boolean {\n  return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\n}\n\nlet targetToFocusOnNextRepaint: HTMLElement | { focus: () => void } | null | undefined = undefined;\n\n/**\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\n * only the latest called focusAsync element will actually be focused\n * @param element - The element to focus\n */\nexport function focusAsync(element: HTMLElement | { focus: () => void } | undefined | null): void {\n  if (element) {\n    // An element was already queued to be focused, so replace that one with the new element\n    if (targetToFocusOnNextRepaint) {\n      targetToFocusOnNextRepaint = element;\n      return;\n    }\n\n    targetToFocusOnNextRepaint = element;\n\n    const win = getWindow(element as Element);\n\n    if (win) {\n      // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe\n      win.requestAnimationFrame(() => {\n        targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();\n\n        // We are done focusing for this frame, so reset the queued focus element\n        targetToFocusOnNextRepaint = undefined;\n      });\n    }\n  }\n}\n\n/**\n * Finds the closest focusable element via an index path from a parent. See\n * `getElementIndexPath` for getting an index path from an element to a child.\n */\nexport function getFocusableByIndexPath(parent: HTMLElement, path: number[]): HTMLElement | undefined {\n  let element = parent;\n\n  for (const index of path) {\n    const nextChild = element.children[Math.min(index, element.children.length - 1)] as HTMLElement;\n\n    if (!nextChild) {\n      break;\n    }\n    element = nextChild;\n  }\n\n  element =\n    isElementTabbable(element) && isElementVisible(element)\n      ? element\n      : getNextElement(parent, element, true) || getPreviousElement(parent, element)!;\n\n  return element as HTMLElement;\n}\n\n/**\n * Finds the element index path from a parent element to a child element.\n *\n * If you had this node structure: \"A has children [B, C] and C has child D\",\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\n */\nexport function getElementIndexPath(fromElement: HTMLElement, toElement: HTMLElement): number[] {\n  const path: number[] = [];\n\n  while (toElement && fromElement && toElement !== fromElement) {\n    const parent = getParent(toElement, true);\n\n    if (parent === null) {\n      return [];\n    }\n\n    path.unshift(Array.prototype.indexOf.call(parent.children, toElement));\n    toElement = parent;\n  }\n\n  return path;\n}\n"]},"metadata":{},"sourceType":"module"}