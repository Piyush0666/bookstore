{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\n\nvar StackView = function (props) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      disableShrink = props.disableShrink,\n      wrap = props.wrap,\n      rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  }); // React.Fragment needs to be ignored before checking for Stack's children\n\n  var stackChildren = React.Children.toArray(props.children);\n\n  if (stackChildren.length === 1 && React.isValidElement(stackChildren[0]) && stackChildren[0].type === React.Fragment) {\n    stackChildren = stackChildren[0].props.children;\n  }\n\n  stackChildren = React.Children.map(stackChildren, function (child, index) {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, __assign(__assign({}, defaultItemProps), child.props));\n    }\n\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\n\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\n\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"mappings":"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","names":["React","withSlots","createComponent","getSlots","getNativeProps","htmlElementProperties","warnDeprecations","styles","StackItem","StackView","props","RootType","_a","disableShrink","wrap","rest","gap","maxHeight","maxWidth","padding","stackChildren","Children","toArray","children","length","isValidElement","type","Fragment","map","child","index","_isStackItem","defaultItemProps","shrink","cloneElement","__assign","nativeProps","Slots","root","inner","item","displayName","StackStatics","Item","Stack","statics"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Stack\\Stack.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  // React.Fragment needs to be ignored before checking for Stack's children\n  let stackChildren = React.Children.toArray(props.children);\n  if (\n    stackChildren.length === 1 &&\n    React.isValidElement(stackChildren[0]) &&\n    stackChildren[0].type === React.Fragment\n  ) {\n    stackChildren = stackChildren[0].props.children;\n  }\n\n  stackChildren = React.Children.map(stackChildren, (child: React.ReactElement<IStackItemProps>, index: number) => {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      const defaultItemProps: IStackItemProps = {\n        shrink: !disableShrink,\n      };\n\n      return React.cloneElement(child, {\n        ...defaultItemProps,\n        ...child.props,\n      });\n    }\n\n    return child;\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"]},"metadata":{},"sourceType":"module"}