{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\nvar RESIZE_DELAY = 500;\nvar MAX_RESIZE_ATTEMPTS = 3;\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\n\nexport function withViewport(ComposedComponent) {\n  return (\n    /** @class */\n    function (_super) {\n      __extends(WithViewportComponent, _super);\n\n      function WithViewportComponent(props) {\n        var _this = _super.call(this, props) || this;\n\n        _this._root = React.createRef();\n\n        _this._registerResizeObserver = function () {\n          var win = getWindow(_this._root.current);\n          _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);\n\n          _this._viewportResizeObserver.observe(_this._root.current);\n        };\n\n        _this._unregisterResizeObserver = function () {\n          if (_this._viewportResizeObserver) {\n            _this._viewportResizeObserver.disconnect();\n\n            delete _this._viewportResizeObserver;\n          }\n        };\n        /* Note: using lambda here because decorators don't seem to work in decorators. */\n\n\n        _this._updateViewport = function (withForceUpdate) {\n          var viewport = _this.state.viewport;\n          var viewportElement = _this._root.current;\n          var scrollElement = findScrollableParent(viewportElement);\n          var scrollRect = getRect(scrollElement);\n          var clientRect = getRect(viewportElement);\n\n          var updateComponent = function () {\n            if (withForceUpdate && _this._composedComponentInstance) {\n              _this._composedComponentInstance.forceUpdate();\n            }\n          };\n\n          var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;\n\n          if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n            _this._resizeAttempts++;\n\n            _this.setState({\n              viewport: {\n                width: clientRect.width,\n                height: scrollRect.height\n              }\n            }, function () {\n              _this._updateViewport(withForceUpdate);\n            });\n          } else {\n            _this._resizeAttempts = 0;\n            updateComponent();\n          }\n        };\n\n        _this._async = new Async(_this);\n        _this._events = new EventGroup(_this);\n        _this._resizeAttempts = 0;\n        _this.state = {\n          viewport: {\n            width: 0,\n            height: 0\n          }\n        };\n        return _this;\n      }\n\n      WithViewportComponent.prototype.componentDidMount = function () {\n        var _this = this;\n\n        var _a = this.props,\n            delayFirstMeasure = _a.delayFirstMeasure,\n            disableResizeObserver = _a.disableResizeObserver,\n            skipViewportMeasures = _a.skipViewportMeasures;\n        var win = getWindow(this._root.current);\n        this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n          leading: false\n        });\n\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            this._registerResizeObserver();\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          if (delayFirstMeasure) {\n            this._async.setTimeout(function () {\n              _this._updateViewport();\n            }, RESIZE_DELAY);\n          } else {\n            this._updateViewport();\n          }\n        }\n      };\n\n      WithViewportComponent.prototype.componentDidUpdate = function (previousProps) {\n        var previousSkipViewportMeasures = previousProps.skipViewportMeasures;\n        var _a = this.props,\n            disableResizeObserver = _a.disableResizeObserver,\n            skipViewportMeasures = _a.skipViewportMeasures;\n        var win = getWindow(this._root.current);\n\n        if (skipViewportMeasures !== previousSkipViewportMeasures) {\n          if (!skipViewportMeasures) {\n            if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n              if (!this._viewportResizeObserver) {\n                this._registerResizeObserver();\n              }\n            } else {\n              this._events.on(win, 'resize', this._onAsyncResize);\n            }\n\n            this._updateViewport();\n          } else {\n            this._unregisterResizeObserver();\n\n            this._events.off(win, 'resize', this._onAsyncResize);\n          }\n        }\n      };\n\n      WithViewportComponent.prototype.componentWillUnmount = function () {\n        this._events.dispose();\n\n        this._async.dispose();\n\n        this._unregisterResizeObserver();\n      };\n\n      WithViewportComponent.prototype.render = function () {\n        var viewport = this.state.viewport;\n        var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : undefined;\n        return React.createElement(\"div\", {\n          className: \"ms-Viewport\",\n          ref: this._root,\n          style: {\n            minWidth: 1,\n            minHeight: 1\n          }\n        }, React.createElement(ComposedComponent, __assign({\n          ref: this._updateComposedComponentRef,\n          viewport: newViewport\n        }, this.props)));\n      };\n\n      WithViewportComponent.prototype.forceUpdate = function () {\n        this._updateViewport(true);\n      };\n\n      WithViewportComponent.prototype._onAsyncResize = function () {\n        this._updateViewport();\n      };\n\n      WithViewportComponent.prototype._isResizeObserverAvailable = function () {\n        var win = getWindow(this._root.current);\n        return win && win.ResizeObserver;\n      };\n\n      return WithViewportComponent;\n    }(BaseDecorator)\n  );\n}","map":{"version":3,"mappings":"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","names":["React","BaseDecorator","findScrollableParent","getRect","getWindow","Async","EventGroup","RESIZE_DELAY","MAX_RESIZE_ATTEMPTS","withViewport","ComposedComponent","__extends","props","_super","_this","createRef","win","_root","current","_viewportResizeObserver","ResizeObserver","_onAsyncResize","observe","disconnect","withForceUpdate","state","viewport","viewportElement","scrollElement","scrollRect","clientRect","updateComponent","_composedComponentInstance","forceUpdate","isSizeChanged","width","height","_resizeAttempts","setState","_updateViewport","_async","_events","WithViewportComponent","delayFirstMeasure","disableResizeObserver","skipViewportMeasures","debounce","leading","_isResizeObserverAvailable","_registerResizeObserver","on","setTimeout","previousProps","previousSkipViewportMeasures","_unregisterResizeObserver","off","dispose","newViewport","undefined","className","ref","style","minWidth","minHeight","__assign","_updateComposedComponentRef"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\decorators\\withViewport.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}