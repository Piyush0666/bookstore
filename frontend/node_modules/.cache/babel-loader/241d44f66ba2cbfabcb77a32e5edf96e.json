{"ast":null,"code":"import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\n\nexport var getDayGrid = function (options) {\n  var selectedDate = options.selectedDate,\n      dateRangeType = options.dateRangeType,\n      firstDayOfWeek = options.firstDayOfWeek,\n      today = options.today,\n      minDate = options.minDate,\n      maxDate = options.maxDate,\n      weeksToShow = options.weeksToShow,\n      workWeekDays = options.workWeekDays,\n      daysToSelectInDayView = options.daysToSelectInDayView,\n      restrictedDates = options.restrictedDates,\n      markedDays = options.markedDays;\n  var restrictedDateOptions = {\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates\n  };\n  var todaysDate = today || new Date();\n  var navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n  var date;\n\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n\n  var weeks = []; // Cycle the date backwards to get to the first day of the week.\n\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  } // add the transition week as last week of previous range\n\n\n  date = addDays(date, -DAYS_IN_WEEK); // a flag to indicate whether all days of the week are outside the month\n\n  var isAllDaysOfWeekOutOfMonth = false; // in work week view if the days aren't contiguous we use week view instead\n\n  var selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n  var selectedDates = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  var shouldGetWeeks = true;\n\n  for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    var week = [];\n    isAllDaysOfWeekOutOfMonth = true;\n\n    var _loop_1 = function (dayIndex) {\n      var originalDate = new Date(date.getTime());\n      var dayInfo = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some(function (markedDay) {\n          return compareDates(originalDate, markedDay);\n        })) || false\n      };\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    };\n\n    for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      _loop_1(dayIndex);\n    } // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n\n\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0; // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n\n    weeks.push(week);\n  }\n\n  return weeks;\n};","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,iBAAhC,EAAmDC,kBAAnD,QAA6E,sBAA7E;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;;;;;;;AAMA,OAAO,IAAMC,UAAU,GAAG,UAACC,OAAD,EAAyB;EAE/C,gBAAY,GAWVA,OAAO,aAXT;EAAA,IACAC,aAAa,GAUXD,OAAO,cAXT;EAAA,IAEAE,cAAc,GASZF,OAAO,eAXT;EAAA,IAGAG,KAAK,GAQHH,OAAO,MAXT;EAAA,IAIAI,OAAO,GAOLJ,OAAO,QAXT;EAAA,IAKAK,OAAO,GAMLL,OAAO,QAXT;EAAA,IAMAM,WAAW,GAKTN,OAAO,YAXT;EAAA,IAOAO,YAAY,GAIVP,OAAO,aAXT;EAAA,IAQAQ,qBAAqB,GAGnBR,OAAO,sBAXT;EAAA,IASAS,eAAe,GAEbT,OAAO,gBAXT;EAAA,IAUAU,UAAU,GACRV,OAAO,WAXT;EAYF,IAAMW,qBAAqB,GAAG;IAAEP,OAAO,SAAT;IAAWC,OAAO,SAAlB;IAAoBI,eAAe;EAAnC,CAA9B;EAEA,IAAMG,UAAU,GAAGT,KAAK,IAAI,IAAIU,IAAJ,EAA5B;EAEA,IAAMC,aAAa,GAAGd,OAAO,CAACc,aAAR,GAAwBd,OAAO,CAACc,aAAhC,GAAgDF,UAAtE;EAEA,IAAIG,IAAJ;;EACA,IAAIT,WAAW,IAAIA,WAAW,IAAI,CAAlC,EAAqC;IACnC;IACAS,IAAI,GAAG,IAAIF,IAAJ,CAASC,aAAa,CAACE,WAAd,EAAT,EAAsCF,aAAa,CAACG,QAAd,EAAtC,EAAgEH,aAAa,CAACI,OAAd,EAAhE,CAAP;EACD,CAHD,MAGO;IACLH,IAAI,GAAG,IAAIF,IAAJ,CAASC,aAAa,CAACE,WAAd,EAAT,EAAsCF,aAAa,CAACG,QAAd,EAAtC,EAAgE,CAAhE,CAAP;EACD;;EACD,IAAME,KAAK,GAAa,EAAxB,CA3BiD,CA6BjD;;EACA,OAAOJ,IAAI,CAACK,MAAL,OAAkBlB,cAAzB,EAAyC;IACvCa,IAAI,CAACM,OAAL,CAAaN,IAAI,CAACG,OAAL,KAAiB,CAA9B;EACD,CAhCgD,CAkCjD;;;EACAH,IAAI,GAAGxB,OAAO,CAACwB,IAAD,EAAO,CAACpB,YAAR,CAAd,CAnCiD,CAqCjD;;EACA,IAAI2B,yBAAyB,GAAG,KAAhC,CAtCiD,CAwCjD;;EACA,IAAMC,qBAAqB,GAAG3B,qBAAqB,CAACK,aAAD,EAAgBM,YAAhB,EAA8BL,cAA9B,CAAnD;EAEA,IAAIsB,aAAa,GAAW,EAA5B;;EAEA,IAAIC,YAAJ,EAAkB;IAChBD,aAAa,GAAG/B,iBAAiB,CAC/BgC,YAD+B,EAE/BF,qBAF+B,EAG/BrB,cAH+B,EAI/BK,YAJ+B,EAK/BC,qBAL+B,CAAjC;IAOAgB,aAAa,GAAG3B,mBAAmB,CAAC2B,aAAD,EAAgBpB,OAAhB,EAAyBC,OAAzB,CAAnC;EACD;;EAED,IAAIqB,cAAc,GAAG,IAArB;;EAEA,KAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBD,cAAxB,EAAwCC,SAAS,EAAjD,EAAqD;IACnD,IAAMC,IAAI,GAAW,EAArB;IAEAN,yBAAyB,GAAG,IAA5B;;4BAESO,UAAQ;MACf,IAAMC,YAAY,GAAG,IAAIjB,IAAJ,CAASE,IAAI,CAACgB,OAAL,EAAT,CAArB;MACA,IAAMC,OAAO,GAAS;QACpBC,GAAG,EAAElB,IAAI,CAACmB,QAAL,EADe;QAEpBnB,IAAI,EAAEA,IAAI,CAACG,OAAL,GAAegB,QAAf,EAFc;QAGpBJ,YAAY,EAAEA,YAHM;QAIpBK,SAAS,EAAEpB,IAAI,CAACE,QAAL,OAAoBH,aAAa,CAACG,QAAd,EAJX;QAKpBmB,OAAO,EAAE5C,YAAY,CAACoB,UAAD,EAAaG,IAAb,CALD;QAMpBsB,UAAU,EAAE3C,kBAAkB,CAACqB,IAAD,EAAOS,aAAP,CANV;QAOpBc,UAAU,EAAE,CAACxC,gBAAgB,CAACiB,IAAD,EAAOJ,qBAAP,CAPT;QAQpB4B,QAAQ,EAAE,WAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEC,IAAZ,CAAiB,qBAAS;UAAI,mBAAY,CAACV,YAAD,EAAeW,SAAf,CAAZ;QAAqC,CAAnE,MAAwE;MAR9D,CAAtB;MAWAb,IAAI,CAACc,IAAL,CAAUV,OAAV;;MAEA,IAAIA,OAAO,CAACG,SAAZ,EAAuB;QACrBb,yBAAyB,GAAG,KAA5B;MACD;;MAEDP,IAAI,CAACM,OAAL,CAAaN,IAAI,CAACG,OAAL,KAAiB,CAA9B;;;IAnBF,KAAK,IAAIW,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGlC,YAAlC,EAAgDkC,QAAQ,EAAxD,EAA0D;cAAjDA;IAoBR,CAzBkD,CA2BnD;;;IACAH,cAAc,GAAGpB,WAAW,GAAGqB,SAAS,GAAGrB,WAAW,GAAG,CAA7B,GAAiC,CAACgB,yBAAD,IAA8BK,SAAS,KAAK,CAAzG,CA5BmD,CA8BnD;;IACAR,KAAK,CAACuB,IAAN,CAAWd,IAAX;EACD;;EAED,OAAOT,KAAP;AACD,CA7FM","names":["addDays","compareDates","getDateRangeArray","isInDateRangeArray","DAYS_IN_WEEK","getDateRangeTypeToUse","getBoundedDateRange","isRestrictedDate","getDayGrid","options","dateRangeType","firstDayOfWeek","today","minDate","maxDate","weeksToShow","workWeekDays","daysToSelectInDayView","restrictedDates","markedDays","restrictedDateOptions","todaysDate","Date","navigatedDate","date","getFullYear","getMonth","getDate","weeks","getDay","setDate","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","selectedDates","selectedDate","shouldGetWeeks","weekIndex","week","dayIndex","originalDate","getTime","dayInfo","key","toString","isInMonth","isToday","isSelected","isInBounds","isMarked","some","markedDay","push"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\dateGrid\\getDayGrid.ts"],"sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"]},"metadata":{},"sourceType":"module"}