{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuAnchor =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuAnchor, _super);\n\n  function ContextualMenuAnchor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._anchor = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._getSubmenuTarget = function () {\n      return _this._anchor.current ? _this._anchor.current : undefined;\n    };\n\n    _this._onItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClick = _a.onItemClick;\n\n      if (onItemClick) {\n        onItemClick(item, ev);\n      }\n    };\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuAnchor.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var anchorRel = item.rel;\n\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    var itemHasSubmenu = hasSubmenu(item);\n    var nativeProps = getNativeProps(item, anchorProperties);\n    var disabled = isItemDisabled(item);\n    var itemProps = item.itemProps,\n        ariaDescription = item.ariaDescription;\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    } // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : undefined, nativeProps['aria-describedby']);\n    var additionalItemProperties = {\n      'aria-describedby': ariaDescribedByIds\n    };\n    return React.createElement(\"div\", null, React.createElement(KeytipData, {\n      keytipProps: item.keytipProps,\n      ariaDescribedBy: ariaDescribedByIds,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"a\", __assign({}, additionalItemProperties, nativeProps, keytipAttributes, {\n        ref: _this._anchor,\n        href: item.href,\n        target: item.target,\n        rel: anchorRel,\n        className: classNames.root,\n        role: \"menuitem\",\n        \"aria-haspopup\": itemHasSubmenu || undefined,\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        \"aria-disabled\": isItemDisabled(item),\n        // eslint-disable-next-line deprecation/deprecation\n        style: item.style,\n        onClick: _this._onItemClick,\n        onMouseEnter: _this._onItemMouseEnter,\n        onMouseLeave: _this._onItemMouseLeave,\n        onMouseMove: _this._onItemMouseMove,\n        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    }));\n  };\n\n  return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuAnchor };","map":{"version":3,"mappings":"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","names":["React","anchorProperties","getNativeProps","memoizeFunction","getId","mergeAriaAttributeValues","ContextualMenuItemWrapper","KeytipData","isItemDisabled","hasSubmenu","ContextualMenuItem","__extends","_this","createRef","keytipProps","hasMenu","_anchor","current","undefined","ev","props","item","onItemClick","ariaDescription","className","id","_ariaDescriptionId","ContextualMenuAnchor","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","_b","ChildrenRenderer","expandedMenuItemKey","openSubMenu","dismissSubMenu","dismissMenu","anchorRel","rel","target","toLowerCase","itemHasSubmenu","nativeProps","disabled","_getMemoizedMenuButtonKeytipProps","ariaDescribedByIds","ariaDescribedBy","additionalItemProperties","keytipAttributes","ref","href","root","role","key","style","onClick","_onItemClick","onMouseEnter","_onItemMouseEnter","onMouseLeave","_onItemMouseLeave","onMouseMove","_onItemMouseMove","onKeyDown","_onItemKeyDown","__assign","componentRef","onCheckmarkClick","getSubmenuTarget","_getSubmenuTarget","itemProps","_renderAriaDescription","screenReaderText"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuAnchor.tsx"],"sourcesContent":["import * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuAnchor extends ContextualMenuItemWrapper {\n  private _anchor = React.createRef<HTMLAnchorElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    let anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    const itemHasSubmenu = hasSubmenu(item);\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLAnchorElement>>(item, anchorProperties);\n    const disabled = isItemDisabled(item);\n    const { itemProps, ariaDescription } = item;\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      nativeProps['aria-describedby'],\n    );\n\n    const additionalItemProperties = {\n      'aria-describedby': ariaDescribedByIds,\n    };\n\n    return (\n      <div>\n        <KeytipData keytipProps={item.keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={disabled}>\n          {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n            <a\n              {...additionalItemProperties}\n              {...nativeProps}\n              {...keytipAttributes}\n              ref={this._anchor}\n              href={item.href}\n              target={item.target}\n              rel={anchorRel}\n              className={classNames.root}\n              role=\"menuitem\"\n              aria-haspopup={itemHasSubmenu || undefined}\n              aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n              aria-posinset={focusableElementIndex + 1}\n              aria-setsize={totalItemCount}\n              aria-disabled={isItemDisabled(item)}\n              // eslint-disable-next-line deprecation/deprecation\n              style={item.style}\n              onClick={this._onItemClick}\n              onMouseEnter={this._onItemMouseEnter}\n              onMouseLeave={this._onItemMouseLeave}\n              onMouseMove={this._onItemMouseMove}\n              onKeyDown={itemHasSubmenu ? this._onItemKeyDown : undefined}\n            >\n              <ChildrenRenderer\n                componentRef={item.componentRef}\n                item={item}\n                classNames={classNames}\n                index={index}\n                onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n                hasIcons={hasIcons}\n                openSubMenu={openSubMenu}\n                dismissSubMenu={dismissSubMenu}\n                dismissMenu={dismissMenu}\n                getSubmenuTarget={this._getSubmenuTarget}\n                {...itemProps}\n              />\n              {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n            </a>\n          )}\n        </KeytipData>\n      </div>\n    );\n  }\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._anchor.current ? this._anchor.current : undefined;\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClick } = this.props;\n    if (onItemClick) {\n      onItemClick(item, ev);\n    }\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}