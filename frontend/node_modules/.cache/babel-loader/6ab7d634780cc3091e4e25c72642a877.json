{"ast":null,"code":"import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\n/**\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\n * It will trigger component state update on settings change observed.\n */\n\nexport function useCustomizationSettings(properties, scopeName) {\n  var forceUpdate = useForceUpdate();\n  var customizations = React.useContext(CustomizerContext).customizations;\n  var inCustomizerContext = customizations.inCustomizerContext;\n  React.useEffect(function () {\n    if (!inCustomizerContext) {\n      Customizations.observe(forceUpdate);\n    }\n\n    return function () {\n      if (!inCustomizerContext) {\n        Customizations.unobserve(forceUpdate);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate\n  }, [inCustomizerContext]);\n  return Customizations.getSettings(properties, scopeName, customizations);\n}\n\nfunction useForceUpdate() {\n  var _a = React.useState(0),\n      setValue = _a[1];\n\n  return function () {\n    return setValue(function (value) {\n      return ++value;\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAGA;;;;;AAIA,OAAM,SAAUC,wBAAV,CAAmCC,UAAnC,EAAyDC,SAAzD,EAA2E;EAC/E,IAAMC,WAAW,GAAGC,cAAc,EAAlC;EACQ,kBAAc,GAAKP,KAAK,CAACQ,UAAN,CAAiBN,iBAAjB,EAAmCO,cAAtD;EACA,uBAAmB,GAAKA,cAAc,oBAAtC;EACRT,KAAK,CAACU,SAAN,CAAgB;IACd,IAAI,CAACC,mBAAL,EAA0B;MACxBV,cAAc,CAACW,OAAf,CAAuBN,WAAvB;IACD;;IACD,OAAO;MACL,IAAI,CAACK,mBAAL,EAA0B;QACxBV,cAAc,CAACY,SAAf,CAAyBP,WAAzB;MACD;IACF,CAJD,CAJc,CASd;EACD,CAVD,EAUG,CAACK,mBAAD,CAVH;EAYA,OAAOV,cAAc,CAACa,WAAf,CAA2BV,UAA3B,EAAuCC,SAAvC,EAAkDI,cAAlD,CAAP;AACD;;AAED,SAASF,cAAT,GAAuB;EACf,SAAeP,KAAK,CAACe,QAAN,CAAe,CAAf,CAAf;EAAA,IAAGC,QAAQ,QAAX;;EACN,OAAO;IAAM,eAAQ,CAAC,iBAAK;MAAI,SAAEC,KAAF;IAAO,CAAjB,CAAR;EAA0B,CAAvC;AACD","names":["React","Customizations","CustomizerContext","useCustomizationSettings","properties","scopeName","forceUpdate","useForceUpdate","useContext","customizations","useEffect","inCustomizerContext","observe","unobserve","getSettings","useState","setValue","value"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\utilities\\lib\\src\\customizations\\useCustomizationSettings.ts"],"sourcesContent":["import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport type { ISettings } from './Customizations';\n\n/**\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\n * It will trigger component state update on settings change observed.\n */\nexport function useCustomizationSettings(properties: string[], scopeName?: string): ISettings {\n  const forceUpdate = useForceUpdate();\n  const { customizations } = React.useContext(CustomizerContext);\n  const { inCustomizerContext } = customizations;\n  React.useEffect(() => {\n    if (!inCustomizerContext) {\n      Customizations.observe(forceUpdate);\n    }\n    return () => {\n      if (!inCustomizerContext) {\n        Customizations.unobserve(forceUpdate);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate\n  }, [inCustomizerContext]);\n\n  return Customizations.getSettings(properties, scopeName, customizations);\n}\n\nfunction useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n"]},"metadata":{},"sourceType":"module"}