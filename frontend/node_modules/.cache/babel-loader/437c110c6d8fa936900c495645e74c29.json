{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nvar splitButtonDividerBaseStyles = function () {\n  return {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8\n  };\n};\n\nexport function standardStyles(theme) {\n  var _a, _b, _c, _d, _e;\n\n  var s = theme.semanticColors,\n      p = theme.palette;\n  var buttonBackground = s.buttonBackground;\n  var buttonBackgroundPressed = s.buttonBackgroundPressed;\n  var buttonBackgroundHovered = s.buttonBackgroundHovered;\n  var buttonBackgroundDisabled = s.buttonBackgroundDisabled;\n  var buttonText = s.buttonText;\n  var buttonTextHovered = s.buttonTextHovered;\n  var buttonTextDisabled = s.buttonTextDisabled;\n  var buttonTextChecked = s.buttonTextChecked;\n  var buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n  return {\n    root: {\n      backgroundColor: buttonBackground,\n      color: buttonText\n    },\n    rootHovered: {\n      backgroundColor: buttonBackgroundHovered,\n      color: buttonTextHovered,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderColor: 'Highlight',\n        color: 'Highlight'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked\n    },\n    rootExpanded: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked\n    },\n    rootChecked: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked\n    },\n    rootCheckedHovered: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextCheckedHovered\n    },\n    rootDisabled: {\n      color: buttonTextDisabled,\n      backgroundColor: buttonBackgroundDisabled,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'GrayText',\n        borderColor: 'GrayText',\n        backgroundColor: 'Window'\n      }, _b)\n    },\n    // Split button styles\n    splitButtonContainer: {\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        border: 'none'\n      }, _c)\n    },\n    splitButtonMenuButton: {\n      color: p.white,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralLight,\n          selectors: (_d = {}, _d[HighContrastSelector] = {\n            color: 'Highlight'\n          }, _d)\n        }\n      }\n    },\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.buttonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.buttonBackgroundDisabled\n        }\n      }\n    },\n    splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), {\n      backgroundColor: p.neutralTertiaryAlt,\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        backgroundColor: 'WindowText'\n      }, _e)\n    }),\n    splitButtonDividerDisabled: {\n      backgroundColor: theme.palette.neutralTertiaryAlt\n    },\n    splitButtonMenuButtonChecked: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt\n        }\n      }\n    },\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt\n        }\n      }\n    },\n    splitButtonMenuIcon: {\n      color: s.buttonText\n    },\n    splitButtonMenuIconDisabled: {\n      color: s.buttonTextDisabled\n    }\n  };\n}\nexport function primaryStyles(theme) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var p = theme.palette,\n      s = theme.semanticColors;\n  return {\n    root: {\n      backgroundColor: s.primaryButtonBackground,\n      border: \"1px solid \" + s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n        color: 'Window',\n        backgroundColor: 'WindowText',\n        borderColor: 'WindowText'\n      }, getHighContrastNoAdjustStyle()), _a[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n        selectors: {\n          ':after': {\n            border: \"none\",\n            outlineColor: p.white\n          }\n        }\n      }, _a)\n    },\n    rootHovered: {\n      backgroundColor: s.primaryButtonBackgroundHovered,\n      border: \"1px solid \" + s.primaryButtonBackgroundHovered,\n      color: s.primaryButtonTextHovered,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'Window',\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight'\n      }, _b)\n    },\n    rootPressed: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      border: \"1px solid \" + s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign({\n        color: 'Window',\n        backgroundColor: 'WindowText',\n        borderColor: 'WindowText'\n      }, getHighContrastNoAdjustStyle()), _c)\n    },\n    rootExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed\n    },\n    rootChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed\n    },\n    rootCheckedHovered: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed\n    },\n    rootDisabled: {\n      color: s.primaryButtonTextDisabled,\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        color: 'GrayText',\n        borderColor: 'GrayText',\n        backgroundColor: 'Window'\n      }, _d)\n    },\n    // Split button styles\n    splitButtonContainer: {\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        border: 'none'\n      }, _e)\n    },\n    splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), {\n      backgroundColor: p.white,\n      selectors: (_f = {}, _f[HighContrastSelector] = {\n        backgroundColor: 'Window'\n      }, _f)\n    }),\n    splitButtonMenuButton: {\n      backgroundColor: s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: (_g = {}, _g[HighContrastSelector] = {\n        backgroundColor: 'WindowText'\n      }, _g[':hover'] = {\n        backgroundColor: s.primaryButtonBackgroundHovered,\n        selectors: (_h = {}, _h[HighContrastSelector] = {\n          color: 'Highlight'\n        }, _h)\n      }, _g)\n    },\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundDisabled\n        }\n      }\n    },\n    splitButtonMenuButtonChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed\n        }\n      }\n    },\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed\n        }\n      }\n    },\n    splitButtonMenuIcon: {\n      color: s.primaryButtonText\n    },\n    splitButtonMenuIconDisabled: {\n      color: p.neutralTertiary,\n      selectors: (_j = {}, _j[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _j)\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["HighContrastSelector","getHighContrastNoAdjustStyle","IsFocusVisibleClassName","splitButtonDividerBaseStyles","position","width","right","top","bottom","standardStyles","theme","s","p","buttonBackground","buttonBackgroundPressed","buttonBackgroundHovered","buttonBackgroundDisabled","buttonText","buttonTextHovered","buttonTextDisabled","buttonTextChecked","buttonTextCheckedHovered","root","backgroundColor","color","rootHovered","selectors","_a","borderColor","rootPressed","rootExpanded","rootChecked","rootCheckedHovered","rootDisabled","_b","splitButtonContainer","_c","border","splitButtonMenuButton","white","neutralLight","_d","splitButtonMenuButtonDisabled","splitButtonDivider","neutralTertiaryAlt","_e","splitButtonDividerDisabled","palette","splitButtonMenuButtonChecked","neutralQuaternaryAlt","splitButtonMenuButtonExpanded","splitButtonMenuIcon","splitButtonMenuIconDisabled","primaryStyles","primaryButtonBackground","primaryButtonText","__assign","outlineColor","primaryButtonBackgroundHovered","primaryButtonTextHovered","primaryButtonBackgroundPressed","primaryButtonTextPressed","primaryButtonTextDisabled","primaryButtonBackgroundDisabled","_f","_g","_h","neutralTertiary","_j"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Button\\ButtonThemes.ts"],"sourcesContent":["import { HighContrastSelector, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IButtonStyles } from './Button.types';\nimport type { ITheme, IRawStyle } from '../../Styling';\n\nconst splitButtonDividerBaseStyles = (): IRawStyle => {\n  return {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8,\n  };\n};\n\nexport function standardStyles(theme: ITheme): IButtonStyles {\n  const { semanticColors: s, palette: p } = theme;\n\n  const buttonBackground = s.buttonBackground;\n  const buttonBackgroundPressed = s.buttonBackgroundPressed;\n  const buttonBackgroundHovered = s.buttonBackgroundHovered;\n  const buttonBackgroundDisabled = s.buttonBackgroundDisabled;\n\n  const buttonText = s.buttonText;\n  const buttonTextHovered = s.buttonTextHovered;\n  const buttonTextDisabled = s.buttonTextDisabled;\n  const buttonTextChecked = s.buttonTextChecked;\n  const buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n\n  return {\n    root: {\n      backgroundColor: buttonBackground,\n      color: buttonText,\n    },\n\n    rootHovered: {\n      backgroundColor: buttonBackgroundHovered,\n      color: buttonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootExpanded: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootChecked: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextCheckedHovered,\n    },\n\n    rootDisabled: {\n      color: buttonTextDisabled,\n      backgroundColor: buttonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      color: p.white,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralLight,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.buttonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.buttonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.neutralTertiaryAlt,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n      },\n    },\n\n    splitButtonDividerDisabled: {\n      backgroundColor: theme.palette.neutralTertiaryAlt,\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.buttonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: s.buttonTextDisabled,\n    },\n  };\n}\n\nexport function primaryStyles(theme: ITheme): IButtonStyles {\n  const { palette: p, semanticColors: s } = theme;\n\n  return {\n    root: {\n      backgroundColor: s.primaryButtonBackground,\n      border: `1px solid ${s.primaryButtonBackground}`,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n        [`.${IsFocusVisibleClassName} &:focus`]: {\n          selectors: {\n            ':after': {\n              border: `none`,\n              outlineColor: p.white,\n            },\n          },\n        },\n      },\n    },\n\n    rootHovered: {\n      backgroundColor: s.primaryButtonBackgroundHovered,\n      border: `1px solid ${s.primaryButtonBackgroundHovered}`,\n      color: s.primaryButtonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      border: `1px solid ${s.primaryButtonBackgroundPressed}`,\n      color: s.primaryButtonTextPressed,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    rootExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootDisabled: {\n      color: s.primaryButtonTextDisabled,\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.white,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      backgroundColor: s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundHovered,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.primaryButtonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: p.neutralTertiary,\n\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}