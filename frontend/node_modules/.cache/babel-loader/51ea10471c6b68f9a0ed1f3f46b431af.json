{"ast":null,"code":"import { TimeConstants } from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\n\nexport var addMinutes = function (date, minutes) {\n  var result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\n\nexport var ceilMinuteToIncrement = function (date, increments) {\n  var result = new Date(date.getTime());\n  var minute = result.getMinutes();\n\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    var times = TimeConstants.MinutesInOneHour / increments;\n\n    for (var i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n\n    result.setMinutes(minute);\n  }\n\n  return result;\n};\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param baseDate - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\n\nexport var getDateFromTimeSelection = function (useHour12, baseDate, selectedTime) {\n  var _a = TimeConstants.TimeFormatRegex.exec(selectedTime) || [],\n      selectedHours = _a[1],\n      selectedMinutes = _a[2],\n      selectedSeconds = _a[3],\n      selectedAp = _a[4];\n\n  var hours = +selectedHours;\n  var minutes = +selectedMinutes;\n  var seconds = selectedSeconds ? +selectedSeconds : 0;\n\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n\n  var hoursOffset;\n\n  if (baseDate.getHours() > hours || baseDate.getHours() === hours && baseDate.getMinutes() > minutes) {\n    hoursOffset = TimeConstants.HoursInOneDay - baseDate.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(baseDate.getHours() - hours);\n  }\n\n  var offset = TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute + seconds * TimeConstants.MillisecondsIn1Sec;\n  var date = new Date(baseDate.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n  return date;\n};","map":{"version":3,"mappings":"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","names":["TimeConstants","addMinutes","date","minutes","result","Date","getTime","setTime","MinutesInOneHour","MillisecondsIn1Sec","ceilMinuteToIncrement","increments","minute","getMinutes","setMinutes","times","i","getDateFromTimeSelection","useHour12","baseDate","selectedTime","TimeFormatRegex","exec","selectedHours","selectedMinutes","selectedSeconds","selectedAp","hours","seconds","toLowerCase","OffsetTo24HourFormat","hoursOffset","getHours","HoursInOneDay","Math","abs","offset","SecondsInOneMinute","setSeconds"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\timeMath\\timeMath.ts"],"sourcesContent":["import { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  const result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport const ceilMinuteToIncrement = (date: Date, increments: number) => {\n  const result = new Date(date.getTime());\n  let minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    const times = TimeConstants.MinutesInOneHour / increments;\n    for (let i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param baseDate - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\nexport const getDateFromTimeSelection = (useHour12: boolean, baseDate: Date, selectedTime: string): Date => {\n  const [, selectedHours, selectedMinutes, selectedSeconds, selectedAp] =\n    TimeConstants.TimeFormatRegex.exec(selectedTime) || [];\n\n  let hours = +selectedHours;\n  const minutes = +selectedMinutes;\n  const seconds = selectedSeconds ? +selectedSeconds : 0;\n\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n\n  let hoursOffset;\n  if (baseDate.getHours() > hours || (baseDate.getHours() === hours && baseDate.getMinutes() > minutes)) {\n    hoursOffset = TimeConstants.HoursInOneDay - baseDate.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(baseDate.getHours() - hours);\n  }\n\n  const offset =\n    TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute +\n    seconds * TimeConstants.MillisecondsIn1Sec;\n\n  const date = new Date(baseDate.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n\n  return date;\n};\n"]},"metadata":{},"sourceType":"module"}