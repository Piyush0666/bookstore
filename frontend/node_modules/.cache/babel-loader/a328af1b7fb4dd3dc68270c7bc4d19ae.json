{"ast":null,"code":"export var TextStyles = function (props, theme) {\n  var as = props.as,\n      className = props.className,\n      block = props.block,\n      nowrap = props.nowrap,\n      variant = props.variant;\n  var fonts = theme.fonts,\n      semanticColors = theme.semanticColors;\n  var variantObject = fonts[variant || 'medium'];\n  return {\n    root: [variantObject, {\n      color: variantObject.color || semanticColors.bodyText,\n      display: block ? as === 'td' ? 'table-cell' : 'block' : 'inline',\n      mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n      webkitFontSmoothing: variantObject.WebkitFontSmoothing\n    }, nowrap && {\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    }, className]\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,UAAU,GAA6B,UAACC,KAAD,EAAoBC,KAApB,EAAiC;EAC3E,MAAE,GAAwCD,KAAK,GAA/C;EAAA,IAAIE,SAAS,GAA6BF,KAAK,UAA/C;EAAA,IAAeG,KAAK,GAAsBH,KAAK,MAA/C;EAAA,IAAsBI,MAAM,GAAcJ,KAAK,OAA/C;EAAA,IAA8BK,OAAO,GAAKL,KAAK,QAA/C;EACA,SAAK,GAAqBC,KAAK,MAA/B;EAAA,IAAOK,cAAc,GAAKL,KAAK,eAA/B;EACR,IAAMM,aAAa,GAAGC,KAAK,CAACH,OAAO,IAAI,QAAZ,CAA3B;EAEA,OAAO;IACLI,IAAI,EAAE,CACJF,aADI,EAEJ;MACEG,KAAK,EAAEH,aAAa,CAACG,KAAd,IAAuBJ,cAAc,CAACK,QAD/C;MAEEC,OAAO,EAAET,KAAK,GAAIU,EAAE,KAAK,IAAP,GAAc,YAAd,GAA6B,OAAjC,GAA4C,QAF5D;MAGEC,mBAAmB,EAAEP,aAAa,CAACQ,mBAHrC;MAIEC,mBAAmB,EAAET,aAAa,CAACU;IAJrC,CAFI,EAQJb,MAAM,IAAI;MACRc,UAAU,EAAE,QADJ;MAERC,QAAQ,EAAE,QAFF;MAGRC,YAAY,EAAE;IAHN,CARN,EAaJlB,SAbI;EADD,CAAP;AAiBD,CAtBM","names":["TextStyles","props","theme","className","block","nowrap","variant","semanticColors","variantObject","fonts","root","color","bodyText","display","as","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","whiteSpace","overflow","textOverflow"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Text\\Text.styles.ts"],"sourcesContent":["import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n"]},"metadata":{},"sourceType":"module"}