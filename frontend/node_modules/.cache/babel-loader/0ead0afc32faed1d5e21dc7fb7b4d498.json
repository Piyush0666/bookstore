{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport { clearNext, clearPrev, clearRange, DEFAULT_MASK_FORMAT_CHARS, getLeftFormatIndex, getMaskDisplay, getRightFormatIndex, insertString, parseMask } from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nvar COMPONENT_NAME = 'MaskedTextField';\n\nvar useComponentRef = function (componentRef, internalState, textField) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get value() {\n        var value = '';\n\n        for (var i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n\n          value += internalState.maskCharData[i].value;\n        }\n\n        return value;\n      },\n\n      get selectionStart() {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd() {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus: function () {\n        textField.current && textField.current.focus();\n      },\n      blur: function () {\n        textField.current && textField.current.blur();\n      },\n      select: function () {\n        textField.current && textField.current.select();\n      },\n      setSelectionStart: function (value) {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n      setSelectionEnd: function (value) {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n      setSelectionRange: function (start, end) {\n        textField.current && textField.current.setSelectionRange(start, end);\n      }\n    };\n  }, [internalState, textField]);\n};\n\nexport var DEFAULT_MASK_CHAR = '_';\nexport var MaskedTextField = React.forwardRef(function (props, ref) {\n  var textField = React.useRef(null);\n  var componentRef = props.componentRef,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onMouseDown = props.onMouseDown,\n      onMouseUp = props.onMouseUp,\n      onChange = props.onChange,\n      onPaste = props.onPaste,\n      onKeyDown = props.onKeyDown,\n      mask = props.mask,\n      _a = props.maskChar,\n      maskChar = _a === void 0 ? DEFAULT_MASK_CHAR : _a,\n      _b = props.maskFormat,\n      maskFormat = _b === void 0 ? DEFAULT_MASK_FORMAT_CHARS : _b,\n      value = props.value;\n  var internalState = useConst(function () {\n    return {\n      maskCharData: parseMask(mask, maskFormat),\n      isFocused: false,\n      moveCursorOnMouseUp: false,\n      changeSelectionData: null\n    };\n  });\n  /** The index into the rendered value of the first unfilled format character */\n\n  var _c = React.useState(),\n      maskCursorPosition = _c[0],\n      setMaskCursorPosition = _c[1];\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n\n\n  var _d = React.useState(function () {\n    return getMaskDisplay(mask, internalState.maskCharData, maskChar);\n  }),\n      displayValue = _d[0],\n      setDisplayValue = _d[1];\n\n  var setValue = React.useCallback(function (newValue) {\n    var valueIndex = 0;\n    var charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      var testVal = newValue[valueIndex];\n\n      if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n        internalState.maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n\n      valueIndex++;\n    }\n  }, [internalState]);\n  var handleFocus = React.useCallback(function (ev) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);\n    internalState.isFocused = true; // Move the cursor position to the leftmost unfilled position\n\n    for (var i = 0; i < internalState.maskCharData.length; i++) {\n      if (!internalState.maskCharData[i].value) {\n        setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n        break;\n      }\n    }\n  }, [internalState, onFocus]);\n  var handleBlur = React.useCallback(function (ev) {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);\n    internalState.isFocused = false;\n    internalState.moveCursorOnMouseUp = true;\n  }, [internalState, onBlur]);\n  var handleMouseDown = React.useCallback(function (ev) {\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(ev);\n\n    if (!internalState.isFocused) {\n      internalState.moveCursorOnMouseUp = true;\n    }\n  }, [internalState, onMouseDown]);\n  var handleMouseUp = React.useCallback(function (ev) {\n    onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(ev); // Move the cursor on mouseUp after focusing the textField\n\n    if (internalState.moveCursorOnMouseUp) {\n      internalState.moveCursorOnMouseUp = false; // Move the cursor position to the rightmost unfilled position\n\n      for (var i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    }\n  }, [internalState, onMouseUp]);\n  var handleInputChange = React.useCallback(function (ev, inputValue) {\n    if (internalState.changeSelectionData === null && textField.current) {\n      internalState.changeSelectionData = {\n        changeType: 'default',\n        selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n        selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1\n      };\n    }\n\n    if (!internalState.changeSelectionData) {\n      return;\n    } // The initial value of cursorPos does not matter\n\n\n    var cursorPos = 0;\n    var _a = internalState.changeSelectionData,\n        changeType = _a.changeType,\n        selectionStart = _a.selectionStart,\n        selectionEnd = _a.selectionEnd;\n\n    if (changeType === 'textPasted') {\n      var charsSelected = selectionEnd - selectionStart;\n      var charCount = inputValue.length + charsSelected - displayValue.length;\n      var startPos = selectionStart;\n      var pastedString = inputValue.substr(startPos, charCount); // Clear any selected characters\n\n      if (charsSelected) {\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n      }\n\n      cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n    } else if (changeType === 'delete' || changeType === 'backspace') {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      var isDel = changeType === 'delete';\n      var charCount = selectionEnd - selectionStart;\n\n      if (charCount) {\n        // charCount is > 0 if range was deleted\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n      } else {\n        // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n        }\n      }\n    } else if (inputValue.length > displayValue.length) {\n      // This case is if the user added characters\n      var charCount = inputValue.length - displayValue.length;\n      var startPos = selectionEnd - charCount;\n      var enteredString = inputValue.substr(startPos, charCount);\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    } else if (inputValue.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      var charCount = 1;\n      var selectCount = displayValue.length + charCount - inputValue.length;\n      var startPos = selectionEnd - charCount;\n      var enteredString = inputValue.substr(startPos, charCount); // Clear the selected range\n\n      internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount); // Insert the printed character\n\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    }\n\n    internalState.changeSelectionData = null;\n    var newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n    setDisplayValue(newValue);\n    setMaskCursorPosition(cursorPos); // Perform onChange after input has been processed. Return value is expected to be the displayed text\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);\n  }, [displayValue.length, internalState, mask, maskChar, onChange]);\n  var handleKeyDown = React.useCallback(function (ev) {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);\n    internalState.changeSelectionData = null;\n\n    if (textField.current && textField.current.value) {\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = ev.keyCode,\n          ctrlKey = ev.ctrlKey,\n          metaKey = ev.metaKey; // Ignore ctrl and meta keydown\n\n      if (ctrlKey || metaKey) {\n        return;\n      } // On backspace or delete, store the selection and the keyCode\n\n\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        var selectionStart = ev.target.selectionStart;\n        var selectionEnd = ev.target.selectionEnd; // Check if backspace or delete press is valid.\n\n        if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)) {\n          return;\n        }\n\n        internalState.changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1\n        };\n      }\n    }\n  }, [internalState, onKeyDown]);\n  var handlePaste = React.useCallback(function (ev) {\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(ev);\n    var selectionStart = ev.target.selectionStart;\n    var selectionEnd = ev.target.selectionEnd; // Store the paste selection range\n\n    internalState.changeSelectionData = {\n      changeType: 'textPasted',\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1\n    };\n  }, [internalState, onPaste]); // Updates the display value if mask or value props change.\n\n  React.useEffect(function () {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar)); // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]); // Run before browser paint to avoid flickering from selection reset.\n\n  useIsomorphicLayoutEffect(function () {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]); // Run after browser paint.\n\n  React.useEffect(function () {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n  useComponentRef(componentRef, internalState, textField);\n  return React.createElement(TextField, __assign({}, props, {\n    elementRef: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onPaste: handlePaste,\n    value: displayValue || '',\n    componentRef: textField\n  }));\n});\nMaskedTextField.displayName = COMPONENT_NAME;","map":{"version":3,"mappings":"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","names":["React","TextField","KeyCodes","clearNext","clearPrev","clearRange","DEFAULT_MASK_FORMAT_CHARS","getLeftFormatIndex","getMaskDisplay","getRightFormatIndex","insertString","parseMask","useConst","useIsomorphicLayoutEffect","COMPONENT_NAME","useComponentRef","componentRef","internalState","textField","useImperativeHandle","value","i","maskCharData","length","undefined","selectionStart","current","selectionEnd","focus","blur","select","setSelectionStart","setSelectionEnd","setSelectionRange","start","end","DEFAULT_MASK_CHAR","MaskedTextField","forwardRef","props","ref","useRef","onFocus","onBlur","onMouseDown","onMouseUp","onChange","onPaste","onKeyDown","mask","_a","maskChar","_b","maskFormat","isFocused","moveCursorOnMouseUp","changeSelectionData","useState","maskCursorPosition","setMaskCursorPosition","displayValue","setDisplayValue","setValue","useCallback","newValue","valueIndex","charDataIndex","testVal","format","test","handleFocus","ev","displayIndex","handleBlur","handleMouseDown","handleMouseUp","handleInputChange","inputValue","changeType","cursorPos","charsSelected","charCount","startPos","pastedString","substr","isDel","enteredString","selectCount","handleKeyDown","ctrlKey","metaKey","keyCode","backspace","del","target","handlePaste","useEffect","__assign","elementRef","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\TextField\\src\\components\\TextField\\MaskedTextField\\MaskedTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}