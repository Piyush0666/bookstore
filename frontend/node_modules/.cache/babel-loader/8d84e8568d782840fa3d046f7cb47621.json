{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var ButtonGridBase = React.forwardRef(function (props, forwardedRef) {\n  var id = useId(undefined, props.id);\n  var items = props.items,\n      columnCount = props.columnCount,\n      onRenderItem = props.onRenderItem,\n      isSemanticRadio = props.isSemanticRadio,\n      // eslint-disable-next-line deprecation/deprecation\n  _a = props.ariaPosInSet,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.ariaSetSize,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaSetSize = _b === void 0 ? props.setSize : _b,\n      styles = props.styles,\n      doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n  var htmlProps = getNativeProps(props, htmlElementProperties, // avoid applying onBlur on the table if it's being used in the FocusZone\n  doNotContainWithinFocusZone ? [] : ['onBlur']);\n  var classNames = getClassNames(styles, {\n    theme: props.theme\n  }); // Array to store the cells in the correct row index\n\n  var rowsOfItems = toMatrix(items, columnCount);\n  var content = React.createElement(\"table\", __assign({\n    \"aria-posinset\": ariaPosInSet,\n    \"aria-setsize\": ariaSetSize,\n    id: id,\n    role: isSemanticRadio ? 'radiogroup' : 'grid'\n  }, htmlProps, {\n    className: classNames.root\n  }), React.createElement(\"tbody\", {\n    role: isSemanticRadio ? 'presentation' : 'rowgroup'\n  }, rowsOfItems.map(function (rows, rowIndex) {\n    return React.createElement(\"tr\", {\n      role: isSemanticRadio ? 'presentation' : 'row',\n      key: rowIndex\n    }, rows.map(function (cell, cellIndex) {\n      return React.createElement(\"td\", {\n        role: \"presentation\",\n        key: cellIndex + '-cell',\n        className: classNames.tableCell\n      }, onRenderItem(cell, cellIndex));\n    }));\n  })));\n  return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n    elementRef: forwardedRef,\n    isCircularNavigation: props.shouldFocusCircularNavigate,\n    className: classNames.focusedContainer,\n    onBlur: props.onBlur\n  }, content);\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,EAAuCC,cAAvC,EAAuDC,qBAAvD,QAAoF,iBAApF;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,KAAT,QAAsB,uBAAtB;AAGA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;AAEA,OAAO,IAAMM,cAAc,GAA8CR,KAAK,CAACS,UAAN,CAGvE,UAACC,KAAD,EAAQC,YAAR,EAAoB;EACpB,IAAMC,EAAE,GAAGN,KAAK,CAACO,SAAD,EAAYH,KAAK,CAACE,EAAlB,CAAhB;EAGE,SAAK,GAUHF,KAAK,MAVP;EAAA,IACAI,WAAW,GASTJ,KAAK,YAVP;EAAA,IAEAK,YAAY,GAQVL,KAAK,aAVP;EAAA,IAGAM,eAAe,GAObN,KAAK,gBAVP;EAAA,IAIA;EACAO,KAKEP,KAAK,aAVP;EAAA,IAIA;EACAQ,YAAY,mBAAGR,KAAK,CAACS,aAAT,GAAsBF,EALlC;EAAA,IAMA;EACAG,KAGEV,KAAK,YAVP;EAAA,IAMA;EACAW,WAAW,mBAAGX,KAAK,CAACY,OAAT,GAAgBF,EAP3B;EAAA,IAQAG,MAAM,GAEJb,KAAK,OAVP;EAAA,IASAc,2BAA2B,GACzBd,KAAK,4BAVP;EAYF,IAAMe,SAAS,GAAGtB,cAAc,CAC9BO,KAD8B,EAE9BN,qBAF8B,EAG9B;EACAoB,2BAA2B,GAAG,EAAH,GAAQ,CAAC,QAAD,CAJL,CAAhC;EAOA,IAAME,UAAU,GAAGnB,aAAa,CAACgB,MAAD,EAAU;IAAEI,KAAK,EAAEjB,KAAK,CAACiB;EAAf,CAAV,CAAhC,CAvBoB,CAyBpB;;EACA,IAAMC,WAAW,GAAY3B,QAAQ,CAAC4B,KAAD,EAAQf,WAAR,CAArC;EAEA,IAAMgB,OAAO,GACX9B;IAAA,iBACiBkB,YADjB;IAC6B,gBACbG,WAFhB;IAGET,EAAE,EAAEA,EAHN;IAIEmB,IAAI,EAAEf,eAAe,GAAG,YAAH,GAAkB;EAJzC,GAKMS,SALN,EAKe;IACbO,SAAS,EAAEN,UAAU,CAACO;EADT,CALf,GAQEjC;IAAO+B,IAAI,EAAEf,eAAe,GAAG,cAAH,GAAoB;EAAhD,GACGY,WAAW,CAACM,GAAZ,CAAgB,UAACC,IAAD,EAAOC,QAAP,EAAe;IAC9B,OACEpC;MAAI+B,IAAI,EAAEf,eAAe,GAAG,cAAH,GAAoB,KAA7C;MAAoDqB,GAAG,EAAED;IAAzD,GACGD,IAAI,CAACD,GAAL,CAAS,UAACI,IAAD,EAAOC,SAAP,EAAwB;MAChC,OACEvC;QAAI+B,IAAI,EAAC,cAAT;QAAwBM,GAAG,EAAEE,SAAS,GAAG,OAAzC;QAAkDP,SAAS,EAAEN,UAAU,CAACc;MAAxE,GACGzB,YAAY,CAACuB,IAAD,EAAOC,SAAP,CADf,CADF;IAKD,CANA,CADH,CADF;EAWD,CAZA,CADH,CARF,CADF;EA2BA,OAAOf,2BAA2B,GAChCM,OADgC,GAGhC9B,oBAACK,SAAD,EAAU;IACRoC,UAAU,EAAE9B,YADJ;IAER+B,oBAAoB,EAAEhC,KAAK,CAACiC,2BAFpB;IAGRX,SAAS,EAAEN,UAAU,CAACkB,gBAHd;IAIRC,MAAM,EAAEnC,KAAK,CAACmC;EAJN,CAAV,EAMGf,OANH,CAHF;AAYD,CAtEwE,CAAlE","names":["React","toMatrix","classNamesFunction","getNativeProps","htmlElementProperties","FocusZone","useId","getClassNames","ButtonGridBase","forwardRef","props","forwardedRef","id","undefined","columnCount","onRenderItem","isSemanticRadio","_a","ariaPosInSet","positionInSet","_b","ariaSetSize","setSize","styles","doNotContainWithinFocusZone","htmlProps","classNames","theme","rowsOfItems","items","content","role","className","root","map","rows","rowIndex","key","cell","cellIndex","tableCell","elementRef","isCircularNavigation","shouldFocusCircularNavigate","focusedContainer","onBlur"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\utilities\\src\\utilities\\ButtonGrid\\ButtonGrid.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { useId } from '@fluentui/react-hooks';\nimport type { IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport const ButtonGridBase: React.FunctionComponent<IButtonGridProps> = React.forwardRef<\n  HTMLElement,\n  IButtonGridProps\n>((props, forwardedRef) => {\n  const id = useId(undefined, props.id);\n\n  const {\n    items,\n    columnCount,\n    onRenderItem,\n    isSemanticRadio,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaPosInSet = props.positionInSet,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaSetSize = props.setSize,\n    styles,\n    doNotContainWithinFocusZone,\n  } = props;\n\n  const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n    props,\n    htmlElementProperties,\n    // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur'],\n  );\n\n  const classNames = getClassNames(styles!, { theme: props.theme! });\n\n  // Array to store the cells in the correct row index\n  const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n  const content = (\n    <table\n      aria-posinset={ariaPosInSet}\n      aria-setsize={ariaSetSize}\n      id={id}\n      role={isSemanticRadio ? 'radiogroup' : 'grid'}\n      {...htmlProps}\n      className={classNames.root}\n    >\n      <tbody role={isSemanticRadio ? 'presentation' : 'rowgroup'}>\n        {rowsOfItems.map((rows, rowIndex) => {\n          return (\n            <tr role={isSemanticRadio ? 'presentation' : 'row'} key={rowIndex}>\n              {rows.map((cell, cellIndex: number) => {\n                return (\n                  <td role=\"presentation\" key={cellIndex + '-cell'} className={classNames.tableCell}>\n                    {onRenderItem(cell, cellIndex)}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n\n  return doNotContainWithinFocusZone ? (\n    content\n  ) : (\n    <FocusZone\n      elementRef={forwardedRef}\n      isCircularNavigation={props.shouldFocusCircularNavigate}\n      className={classNames.focusedContainer}\n      onBlur={props.onBlur}\n    >\n      {content}\n    </FocusZone>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}