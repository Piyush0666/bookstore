{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, KeyCodes, css, elementContains, format, getId, classNamesFunction, styled, initializeComponentRef } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport { ValidationState } from './BasePicker.types';\nimport { Autofill } from '../Autofill/index';\nimport * as stylesImport from './BasePicker.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * Should be removed once new picker without inheritance is created\n */\n\nfunction getStyledSuggestions(suggestionsType) {\n  return styled(suggestionsType, suggestionsStyles, undefined, {\n    scope: 'Suggestions'\n  });\n}\n/**\n * {@docCategory Pickers}\n */\n\n\nvar BasePicker =\n/** @class */\nfunction (_super) {\n  __extends(BasePicker, _super);\n\n  function BasePicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this; // Refs\n\n\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n    _this.suggestionElement = React.createRef();\n    /**\n     * @deprecated this is no longer necessary as typescript now supports generic elements\n     */\n\n    _this.SuggestionOfProperType = Suggestions; // eslint-disable-next-line deprecation/deprecation\n\n    _this._styledSuggestions = getStyledSuggestions(_this.SuggestionOfProperType);\n\n    _this.dismissSuggestions = function (ev) {\n      var selectItemFunction = function () {\n        var addItemOnDismiss = true;\n\n        if (_this.props.onDismiss) {\n          addItemOnDismiss = _this.props.onDismiss(ev, _this.suggestionStore.currentSuggestion ? _this.suggestionStore.currentSuggestion.item : undefined);\n        }\n\n        if (!ev || ev && !ev.defaultPrevented) {\n          // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n          if (addItemOnDismiss !== false && _this.canAddItems() && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestedDisplayValue) {\n            _this.addItemByIndex(0);\n          }\n        }\n      };\n\n      if (_this.currentPromise) {\n        _this.currentPromise.then(function () {\n          return selectItemFunction();\n        });\n      } else {\n        selectItemFunction();\n      }\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n\n    _this.refocusSuggestions = function (keyCode) {\n      _this.resetFocus();\n\n      if (_this.suggestionStore.suggestions && _this.suggestionStore.suggestions.length > 0) {\n        if (keyCode === KeyCodes.up) {\n          _this.suggestionStore.setSelectedSuggestion(_this.suggestionStore.suggestions.length - 1);\n        } else if (keyCode === KeyCodes.down) {\n          _this.suggestionStore.setSelectedSuggestion(0);\n        }\n      }\n    };\n\n    _this.onInputChange = function (value) {\n      _this.updateValue(value);\n\n      _this.setState({\n        moreSuggestionsAvailable: true,\n        isMostRecentlyUsedVisible: false\n      });\n    };\n\n    _this.onSuggestionClick = function (ev, item, index) {\n      _this.addItemByIndex(index);\n    };\n\n    _this.onSuggestionRemove = function (ev, item, index) {\n      if (_this.props.onRemoveSuggestion) {\n        _this.props.onRemoveSuggestion(item);\n      }\n\n      _this.suggestionStore.removeSuggestion(index);\n    };\n\n    _this.onInputFocus = function (ev) {\n      _this.selection.setAllSelected(false); // Only trigger all of the focus if this component isn't already focused.\n      // For example when an item is selected or removed from the selected list it should be treated\n      // as though the input is still focused.\n\n\n      if (!_this.state.isFocused) {\n        _this._userTriggeredSuggestions();\n\n        if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n          _this.props.inputProps.onFocus(ev);\n        }\n      }\n    };\n\n    _this.onInputBlur = function (ev) {\n      if (_this.props.inputProps && _this.props.inputProps.onBlur) {\n        _this.props.inputProps.onBlur(ev);\n      }\n    };\n\n    _this.onBlur = function (ev) {\n      if (_this.state.isFocused) {\n        // Only blur the entire component if an unrelated element gets focus.\n        // Otherwise treat it as though it still has focus.\n        // Do nothing if the blur is coming from something\n        // inside the comboBox root or the comboBox menu since\n        // it we are not really bluring from the whole comboBox\n        var relatedTarget = ev.relatedTarget;\n\n        if (ev.relatedTarget === null) {\n          // In IE11, due to lack of support, event.relatedTarget is always\n          // null making every onBlur call to be \"outside\" of the ComboBox\n          // even when it's not. Using document.activeElement is another way\n          // for us to be able to get what the relatedTarget without relying\n          // on the event\n          relatedTarget = document.activeElement;\n        }\n\n        if (relatedTarget && !elementContains(_this.root.current, relatedTarget)) {\n          _this.setState({\n            isFocused: false\n          });\n\n          if (_this.props.onBlur) {\n            _this.props.onBlur(ev);\n          }\n        }\n      }\n    };\n    /**\n     * Resets focus to last element in wrapper div if clicking back into Picker that has hit item limit\n     */\n\n\n    _this.onWrapperClick = function (ev) {\n      if (!_this.canAddItems()) {\n        _this.resetFocus(_this.state.items.length - 1);\n      }\n    };\n    /**\n     * Reveals suggestions any time the user clicks on the input element\n     * without shifting focus.\n     */\n\n\n    _this.onClick = function (ev) {\n      if (_this.props.inputProps !== undefined && _this.props.inputProps.onClick !== undefined) {\n        _this.props.inputProps.onClick(ev);\n      } // Only primary (left) clicks show suggestions.\n\n\n      if (ev.button === 0) {\n        _this._userTriggeredSuggestions();\n      }\n    };\n\n    _this.onFocus = function () {\n      if (!_this.state.isFocused) {\n        _this.setState({\n          isFocused: true\n        });\n      }\n    };\n\n    _this.onKeyDown = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = ev.which;\n\n      switch (keyCode) {\n        case KeyCodes.escape:\n          if (_this.state.suggestionsVisible) {\n            _this.setState({\n              suggestionsVisible: false\n            });\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n\n        case KeyCodes.tab:\n        case KeyCodes.enter:\n          if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedActionSelected()) {\n            _this.suggestionElement.current.executeSelectedAction();\n          } else if (!ev.shiftKey && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestionsVisible) {\n            _this.completeSuggestion();\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          } else {\n            _this._completeGenericSuggestion();\n          }\n\n          break;\n\n        case KeyCodes.backspace:\n          if (!_this.props.disabled) {\n            _this.onBackspace(ev);\n          }\n\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.del:\n          if (!_this.props.disabled) {\n            if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible && _this.suggestionStore.currentIndex !== -1) {\n              if (_this.props.onRemoveSuggestion) {\n                _this.props.onRemoveSuggestion(_this.suggestionStore.currentSuggestion.item);\n              }\n\n              _this.suggestionStore.removeSuggestion(_this.suggestionStore.currentIndex);\n\n              _this.forceUpdate();\n            } else {\n              _this.onBackspace(ev);\n            }\n          }\n\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.up:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex === 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                _this.suggestionElement.current.focusAboveSuggestions();\n\n                _this.suggestionStore.deselectAllSuggestions();\n\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.previousSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n\n          break;\n\n        case KeyCodes.down:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex + 1 === _this.suggestionStore.suggestions.length) {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                _this.suggestionElement.current.focusBelowSuggestions();\n\n                _this.suggestionStore.deselectAllSuggestions();\n\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.nextSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n\n          break;\n      }\n    };\n\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n\n        _this._updateSelectedItems(newItems);\n      }\n    };\n\n    _this.onGetMoreResults = function () {\n      _this.setState({\n        isSearching: true\n      }, function () {\n        if (_this.props.onGetMoreResults && _this.input.current) {\n          var suggestions = _this.props.onGetMoreResults(_this.input.current.value, _this.state.items);\n\n          var suggestionsArray = suggestions;\n          var suggestionsPromiseLike = suggestions;\n\n          if (Array.isArray(suggestionsArray)) {\n            _this.updateSuggestions(suggestionsArray);\n\n            _this.setState({\n              isSearching: false\n            });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then(function (newSuggestions) {\n              _this.updateSuggestions(newSuggestions);\n\n              _this.setState({\n                isSearching: false\n              });\n            });\n          }\n        } else {\n          _this.setState({\n            isSearching: false\n          });\n        }\n\n        if (_this.input.current) {\n          _this.input.current.focus();\n        }\n\n        _this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true\n        });\n      });\n    };\n\n    _this.completeSelection = function (item) {\n      _this.addItem(item);\n\n      _this.updateValue('');\n\n      if (_this.input.current) {\n        _this.input.current.clear();\n      }\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n\n    _this.addItemByIndex = function (index) {\n      _this.completeSelection(_this.suggestionStore.getSuggestionAtIndex(index).item);\n    };\n\n    _this.addItem = function (item) {\n      var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      var processedItemObject = processedItem;\n      var processedItemPromiseLike = processedItem;\n\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then(function (resolvedProcessedItem) {\n          var newItems = _this.state.items.concat([resolvedProcessedItem]);\n\n          _this._updateSelectedItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat([processedItemObject]);\n\n        _this._updateSelectedItems(newItems);\n      }\n\n      _this.setState({\n        suggestedDisplayValue: '',\n        selectionRemoved: undefined\n      });\n    };\n\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n\n      if (index >= 0) {\n        var newItems = items.slice(0, index).concat(items.slice(index + 1));\n\n        _this.setState({\n          selectionRemoved: item\n        });\n\n        _this._updateSelectedItems(newItems);\n      }\n    };\n\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var newItems = items.filter(function (item) {\n        return itemsToRemove.indexOf(item) === -1;\n      });\n\n      _this._updateSelectedItems(newItems);\n    };\n    /**\n     * @deprecated this is no longer necessary as focuszone has been removed\n     */\n\n\n    _this._shouldFocusZoneEnterInnerZone = function (ev) {\n      // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n      if (_this.state.suggestionsVisible) {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.up:\n          case KeyCodes.down:\n            return true;\n        }\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      if (ev.which === KeyCodes.enter) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this._onResolveSuggestions = function (updatedValue) {\n      var suggestions = _this.props.onResolveSuggestions(updatedValue, _this.state.items);\n\n      if (suggestions !== null) {\n        _this.updateSuggestionsList(suggestions, updatedValue);\n      }\n    };\n\n    _this._completeGenericSuggestion = function () {\n      if (_this.props.onValidateInput && _this.input.current && _this.props.onValidateInput(_this.input.current.value) !== ValidationState.invalid && _this.props.createGenericItem) {\n        var itemToConvert = _this.props.createGenericItem(_this.input.current.value, _this.props.onValidateInput(_this.input.current.value));\n\n        _this.suggestionStore.createGenericSuggestion(itemToConvert);\n\n        _this.completeSuggestion();\n      }\n    };\n    /**\n     * This should be called when the user does something other than use text entry to trigger suggestions.\n     *\n     */\n\n\n    _this._userTriggeredSuggestions = function () {\n      if (!_this.state.suggestionsVisible) {\n        var input = _this.input.current ? _this.input.current.value : '';\n\n        if (!input) {\n          _this.onEmptyInputFocus();\n        } else {\n          if (_this.suggestionStore.suggestions.length === 0) {\n            _this._onResolveSuggestions(input);\n          } else {\n            _this.setState({\n              isMostRecentlyUsedVisible: false,\n              suggestionsVisible: true\n            });\n          }\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this._id = getId();\n    _this._ariaMap = {\n      selectedItems: \"selected-items-\" + _this._id,\n      selectedSuggestionAlert: \"selected-suggestion-alert-\" + _this._id,\n      suggestionList: \"suggestion-list-\" + _this._id,\n      combobox: \"combobox-\" + _this._id\n    };\n    _this.suggestionStore = new SuggestionsController();\n    _this.selection = new Selection({\n      onSelectionChanged: function () {\n        return _this.onSelectionChange();\n      }\n    });\n\n    _this.selection.setItems(items);\n\n    _this.state = {\n      items: items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: [],\n      selectionRemoved: undefined\n    };\n    return _this;\n  }\n\n  BasePicker.getDerivedStateFromProps = function (newProps) {\n    if (newProps.selectedItems) {\n      return {\n        items: newProps.selectedItems\n      };\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(BasePicker.prototype, \"items\", {\n    get: function () {\n      return this.state.items;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BasePicker.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  };\n\n  BasePicker.prototype.componentDidUpdate = function (oldProps, oldState) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      var currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, false, true);\n          this.resetFocus(currentSelectedIndex);\n        } // Reset focus to last item if the input is removed\n        else if (this.state.items.length > oldState.items.length && !this.canAddItems()) {\n          this.resetFocus(this.state.items.length - 1);\n        }\n      }\n    }\n  };\n\n  BasePicker.prototype.componentWillUnmount = function () {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n\n    this._async.dispose();\n  };\n\n  BasePicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BasePicker.prototype.focusInput = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BasePicker.prototype.completeSuggestion = function (forceComplete) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  };\n\n  BasePicker.prototype.render = function () {\n    var _a = this.state,\n        suggestedDisplayValue = _a.suggestedDisplayValue,\n        isFocused = _a.isFocused,\n        items = _a.items;\n    var _b = this.props,\n        className = _b.className,\n        inputProps = _b.inputProps,\n        disabled = _b.disabled,\n        selectionAriaLabel = _b.selectionAriaLabel,\n        _c = _b.selectionRole,\n        selectionRole = _c === void 0 ? 'list' : _c,\n        theme = _b.theme,\n        styles = _b.styles;\n    var suggestionsVisible = !!this.state.suggestionsVisible;\n    var suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      disabled: disabled,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n      itemsWrapper: legacyStyles.pickerItems,\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    var comboLabel = this.props['aria-label'] || (inputProps === null || inputProps === void 0 ? void 0 : inputProps['aria-label']); // selectionAriaLabel is contained in a separate <span> rather than an aria-label on the items list\n    // because if the items list has an aria-label, the aria-describedby on the input will only read\n    // that label instead of all the selected items. Using aria-labelledby instead fixes this, since\n    // aria-describedby and aria-labelledby will not follow a second aria-labelledby\n\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: classNames.root,\n      onKeyDown: this.onKeyDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onClick: this.onWrapperClick\n    }, this.renderCustomAlert(classNames.screenReaderText), React.createElement(\"span\", {\n      id: this._ariaMap.selectedItems + \"-label\",\n      hidden: true\n    }, selectionAriaLabel || comboLabel), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: classNames.text,\n      \"aria-owns\": suggestionsAvailable\n    }, items.length > 0 && React.createElement(\"span\", {\n      id: this._ariaMap.selectedItems,\n      className: classNames.itemsWrapper,\n      role: selectionRole,\n      \"aria-labelledby\": this._ariaMap.selectedItems + \"-label\"\n    }, this.renderItems()), this.canAddItems() && React.createElement(Autofill, __assign({\n      spellCheck: false\n    }, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      id: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) ? inputProps.id : this._ariaMap.combobox,\n      onClick: this.onClick,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"aria-activedescendant\": suggestionsVisible ? this.getActiveDescendant() : undefined,\n      \"aria-controls\": suggestionsAvailable,\n      \"aria-describedby\": items.length > 0 ? this._ariaMap.selectedItems : undefined,\n      \"aria-expanded\": suggestionsVisible,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": comboLabel,\n      role: \"combobox\",\n      disabled: disabled,\n      onInputChange: this.props.onInputChange\n    })))), this.renderSuggestions());\n  };\n\n  BasePicker.prototype.canAddItems = function () {\n    var items = this.state.items;\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || items.length < itemLimit;\n  };\n\n  BasePicker.prototype.renderSuggestions = function () {\n    var StyledTypedSuggestions = this._styledSuggestions;\n    return this.state.suggestionsVisible && this.input ? React.createElement(Callout, __assign({\n      isBeakVisible: false,\n      gapSpace: 5,\n      target: this.input.current ? this.input.current.inputElement : undefined,\n      onDismiss: this.dismissSuggestions,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      directionalHintForRTL: DirectionalHint.bottomRightEdge\n    }, this.props.pickerCalloutProps), React.createElement(StyledTypedSuggestions // Assumed to set in derived component's defaultProps\n    , __assign({\n      // Assumed to set in derived component's defaultProps\n      onRenderSuggestion: this.props.onRenderSuggestionsItem,\n      onSuggestionClick: this.onSuggestionClick,\n      onSuggestionRemove: this.onSuggestionRemove,\n      suggestions: this.suggestionStore.getSuggestions(),\n      componentRef: this.suggestionElement,\n      onGetMoreResults: this.onGetMoreResults,\n      moreSuggestionsAvailable: this.state.moreSuggestionsAvailable,\n      isLoading: this.state.suggestionsLoading,\n      isSearching: this.state.isSearching,\n      isMostRecentlyUsedVisible: this.state.isMostRecentlyUsedVisible,\n      isResultsFooterVisible: this.state.isResultsFooterVisible,\n      refocusSuggestions: this.refocusSuggestions,\n      removeSuggestionAriaLabel: this.props.removeButtonAriaLabel,\n      suggestionsListId: this._ariaMap.suggestionList,\n      createGenericItem: this._completeGenericSuggestion\n    }, this.props.pickerSuggestionsProps))) : null;\n  };\n\n  BasePicker.prototype.renderItems = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        removeButtonAriaLabel = _a.removeButtonAriaLabel,\n        removeButtonIconProps = _a.removeButtonIconProps;\n    var onRenderItem = this.props.onRenderItem;\n    var _b = this.state,\n        items = _b.items,\n        selectedIndices = _b.selectedIndices;\n    return items.map(function (item, index) {\n      return onRenderItem({\n        item: item,\n        index: index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices.indexOf(index) !== -1,\n        onRemoveItem: function () {\n          return _this.removeItem(item);\n        },\n        disabled: disabled,\n        onItemChange: _this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        removeButtonIconProps: removeButtonIconProps\n      });\n    });\n  };\n\n  BasePicker.prototype.resetFocus = function (index) {\n    var items = this.state.items;\n\n    if (items.length && index >= 0) {\n      var newEl = this.root.current && this.root.current.querySelectorAll('[data-selection-index]')[Math.min(index, items.length - 1)];\n\n      if (newEl) {\n        newEl.focus();\n      }\n    } else if (!this.canAddItems()) {\n      this.resetFocus(items.length - 1);\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  };\n\n  BasePicker.prototype.onSuggestionSelect = function () {\n    if (this.suggestionStore.currentSuggestion) {\n      var currentValue = this.input.current ? this.input.current.value : '';\n\n      var itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n\n      this.setState({\n        suggestedDisplayValue: itemValue\n      });\n    }\n  };\n\n  BasePicker.prototype.onSelectionChange = function () {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices()\n    });\n  };\n\n  BasePicker.prototype.updateSuggestions = function (suggestions) {\n    this.suggestionStore.updateSuggestions(suggestions, 0);\n    this.forceUpdate();\n  };\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n\n\n  BasePicker.prototype.onEmptyInputFocus = function () {\n    var emptyResolveSuggestions = this.props.onEmptyResolveSuggestions ? this.props.onEmptyResolveSuggestions : // eslint-disable-next-line deprecation/deprecation\n    this.props.onEmptyInputFocus; // Only attempt to resolve suggestions if it exists\n\n    if (emptyResolveSuggestions) {\n      var suggestions = emptyResolveSuggestions(this.state.items);\n      this.updateSuggestionsList(suggestions);\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false\n      });\n    }\n  };\n\n  BasePicker.prototype.updateValue = function (updatedValue) {\n    this._onResolveSuggestions(updatedValue);\n  };\n\n  BasePicker.prototype.updateSuggestionsList = function (suggestions, updatedValue) {\n    var _this = this; // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n\n\n    if (Array.isArray(suggestions)) {\n      this._updateAndResolveValue(updatedValue, suggestions);\n    } else if (suggestions && suggestions.then) {\n      this.setState({\n        suggestionsLoading: true\n      }); // Clear suggestions\n\n      this.suggestionStore.updateSuggestions([]);\n\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions()\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current && this.input.current.inputElement === document.activeElement\n        });\n      } // Ensure that the promise will only use the callback if it was the most recent one.\n\n\n      this.currentPromise = suggestions;\n      suggestions.then(function (newSuggestions) {\n        if (suggestions === _this.currentPromise) {\n          _this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  };\n\n  BasePicker.prototype.resolveNewValue = function (updatedValue, suggestions) {\n    var _this = this;\n\n    this.updateSuggestions(suggestions);\n    var itemValue = undefined;\n\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    } // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n\n\n    this.setState({\n      suggestedDisplayValue: itemValue,\n      suggestionsVisible: this._getShowSuggestions()\n    }, function () {\n      return _this.setState({\n        suggestionsLoading: false\n      });\n    });\n  };\n\n  BasePicker.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  }; // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n\n\n  BasePicker.prototype.onBackspace = function (ev) {\n    if (this.state.items.length && !this.input.current || this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  };\n\n  BasePicker.prototype.getActiveDescendant = function () {\n    var _a;\n\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n\n    var currentIndex = this.suggestionStore.currentIndex;\n\n    if (currentIndex < 0) {\n      // if the suggestions element has actions and the currentIndex does not point to a suggestion,\n      // return the action id\n      if ((_a = this.suggestionElement.current) === null || _a === void 0 ? void 0 : _a.hasSuggestedAction()) {\n        return 'sug-selectedAction';\n      } // If there are no suggestions and no action suggested, then return the ID for the no results found.\n\n\n      if (this.suggestionStore.suggestions.length === 0) {\n        return 'sug-noResultsFound';\n      }\n\n      return undefined;\n    } else {\n      return \"sug-\" + currentIndex;\n    }\n  };\n  /** @deprecated use renderCustomAlert instead */\n\n\n  BasePicker.prototype.getSuggestionsAlert = function (suggestionAlertClassName) {\n    if (suggestionAlertClassName === void 0) {\n      suggestionAlertClassName = legacyStyles.screenReaderOnly;\n    }\n\n    var currentIndex = this.suggestionStore.currentIndex;\n\n    if (this.props.enableSelectedSuggestionAlert) {\n      var selectedSuggestion = currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      var selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined; // keeping the id/className here for legacy support\n\n      return React.createElement(\"div\", {\n        id: this._ariaMap.selectedSuggestionAlert,\n        className: suggestionAlertClassName\n      }, selectedSuggestionAlertText + \" \");\n    }\n  };\n\n  BasePicker.prototype.renderCustomAlert = function (alertClassName) {\n    if (alertClassName === void 0) {\n      alertClassName = legacyStyles.screenReaderOnly;\n    }\n\n    var _a = this.props.suggestionRemovedText,\n        suggestionRemovedText = _a === void 0 ? 'removed {0}' : _a;\n    var removedItemText = '';\n\n    if (this.state.selectionRemoved) {\n      var itemName = this._getTextFromItem(this.state.selectionRemoved, '');\n\n      removedItemText = format(suggestionRemovedText, itemName);\n    }\n\n    return React.createElement(\"div\", {\n      className: alertClassName,\n      id: this._ariaMap.selectedSuggestionAlert,\n      \"aria-live\": \"assertive\"\n    }, // eslint-disable-next-line deprecation/deprecation\n    this.getSuggestionsAlert(alertClassName), removedItemText);\n  };\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n\n\n  BasePicker.prototype._updateAndResolveValue = function (updatedValue, newSuggestions) {\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      this.suggestionStore.updateSuggestions(newSuggestions, -1);\n\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false\n        });\n      }\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n\n\n  BasePicker.prototype._updateSelectedItems = function (items) {\n    var _this = this;\n\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items);\n      });\n    }\n  };\n\n  BasePicker.prototype._onSelectedItemsUpdated = function (items) {\n    this.onChange(items);\n  };\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n\n\n  BasePicker.prototype._getShowSuggestions = function () {\n    var areSuggestionsVisible = this.input.current !== undefined && this.input.current !== null && this.input.current.inputElement === document.activeElement && this.input.current.value !== '';\n    return areSuggestionsVisible;\n  };\n\n  BasePicker.prototype._getTextFromItem = function (item, currentValue) {\n    if (this.props.getTextFromItem) {\n      return this.props.getTextFromItem(item, currentValue);\n    } else {\n      return '';\n    }\n  };\n\n  return BasePicker;\n}(React.Component);\n\nexport { BasePicker };\n\nvar BasePickerListBelow =\n/** @class */\nfunction (_super) {\n  __extends(BasePickerListBelow, _super);\n\n  function BasePickerListBelow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BasePickerListBelow.prototype.render = function () {\n    var _a = this.state,\n        suggestedDisplayValue = _a.suggestedDisplayValue,\n        isFocused = _a.isFocused;\n    var _b = this.props,\n        className = _b.className,\n        inputProps = _b.inputProps,\n        disabled = _b.disabled,\n        selectionAriaLabel = _b.selectionAriaLabel,\n        _c = _b.selectionRole,\n        selectionRole = _c === void 0 ? 'list' : _c,\n        theme = _b.theme,\n        styles = _b.styles;\n    var suggestionsVisible = !!this.state.suggestionsVisible;\n    var suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused, disabled && legacyStyles.inputDisabled),\n      itemsWrapper: legacyStyles.pickerItems,\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    var comboLabel = this.props['aria-label'] || (inputProps === null || inputProps === void 0 ? void 0 : inputProps['aria-label']);\n    return React.createElement(\"div\", {\n      ref: this.root,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus\n    }, React.createElement(\"div\", {\n      className: classNames.root,\n      onKeyDown: this.onKeyDown\n    }, this.renderCustomAlert(classNames.screenReaderText), React.createElement(\"div\", {\n      className: classNames.text,\n      \"aria-owns\": suggestionsAvailable\n    }, React.createElement(Autofill, __assign({}, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onClick: this.onClick,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"aria-activedescendant\": suggestionsVisible ? this.getActiveDescendant() : undefined,\n      \"aria-controls\": suggestionsAvailable,\n      \"aria-expanded\": suggestionsVisible,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": comboLabel,\n      role: \"combobox\",\n      id: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) ? inputProps.id : this._ariaMap.combobox,\n      disabled: disabled,\n      onInputChange: this.props.onInputChange\n    })))), this.renderSuggestions(), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.single\n    }, React.createElement(\"div\", {\n      id: this._ariaMap.selectedItems,\n      className: \"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n      ,\n      role: selectionRole,\n      \"aria-label\": selectionAriaLabel || comboLabel\n    }, this.renderItems())));\n  };\n\n  BasePickerListBelow.prototype.onBackspace = function (ev) {// override the existing backspace method to not do anything because the list items appear below.\n  };\n\n  return BasePickerListBelow;\n}(BasePicker);\n\nexport { BasePickerListBelow };","map":{"version":3,"mappings":"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","names":["React","Async","KeyCodes","css","elementContains","format","getId","classNamesFunction","styled","initializeComponentRef","Callout","Selection","SelectionZone","SelectionMode","DirectionalHint","Suggestions","getStyles","suggestionsStyles","SuggestionsController","ValidationState","Autofill","stylesImport","legacyStyles","getClassNames","getStyledSuggestions","suggestionsType","undefined","scope","__extends","basePickerProps","_super","_this","createRef","SuggestionOfProperType","ev","selectItemFunction","addItemOnDismiss","props","onDismiss","suggestionStore","currentSuggestion","item","defaultPrevented","canAddItems","hasSelectedSuggestion","state","suggestedDisplayValue","addItemByIndex","currentPromise","then","setState","suggestionsVisible","keyCode","resetFocus","suggestions","length","up","setSelectedSuggestion","down","value","updateValue","moreSuggestionsAvailable","isMostRecentlyUsedVisible","index","onRemoveSuggestion","removeSuggestion","selection","setAllSelected","isFocused","_userTriggeredSuggestions","inputProps","onFocus","onBlur","relatedTarget","document","activeElement","root","current","items","onClick","button","which","escape","preventDefault","stopPropagation","tab","enter","suggestionElement","hasSuggestedActionSelected","executeSelectedAction","shiftKey","completeSuggestion","_completeGenericSuggestion","backspace","disabled","onBackspace","del","input","target","inputElement","currentIndex","forceUpdate","tryHandleKeyDown","hasSuggestedAction","focusAboveSuggestions","deselectAllSuggestions","previousSuggestion","onSuggestionSelect","focusBelowSuggestions","nextSuggestion","changedItem","newItems","_updateSelectedItems","isSearching","onGetMoreResults","suggestionsArray","suggestionsPromiseLike","Array","isArray","updateSuggestions","newSuggestions","focus","isResultsFooterVisible","addItem","clear","completeSelection","getSuggestionAtIndex","processedItem","onItemSelected","processedItemObject","processedItemPromiseLike","resolvedProcessedItem","concat","selectionRemoved","indexOf","slice","itemsToRemove","filter","updatedValue","onResolveSuggestions","updateSuggestionsList","onValidateInput","invalid","createGenericItem","itemToConvert","createGenericSuggestion","onEmptyInputFocus","_onResolveSuggestions","_async","selectedItems","defaultSelectedItems","_id","_ariaMap","selectedSuggestionAlert","suggestionList","combobox","onSelectionChanged","onSelectionChange","setItems","selectedIndices","BasePicker","newProps","Object","debounce","resolveDelay","oldProps","oldState","currentSelectedIndex","getSelectedIndices","setIndexSelected","dispose","forceComplete","className","selectionAriaLabel","_c","selectionRole","theme","styles","suggestionsAvailable","classNames","inputClassName","text","pickerText","inputFocused","itemsWrapper","pickerItems","pickerInput","screenReaderText","screenReaderOnly","comboLabel","ref","onKeyDown","onWrapperClick","renderCustomAlert","id","hidden","selectionMode","multiple","role","renderItems","__assign","spellCheck","componentRef","onInputFocus","onInputBlur","onInputValueChange","onInputChange","getActiveDescendant","renderSuggestions","itemLimit","StyledTypedSuggestions","_styledSuggestions","isBeakVisible","gapSpace","dismissSuggestions","directionalHint","bottomLeftEdge","directionalHintForRTL","bottomRightEdge","pickerCalloutProps","onRenderSuggestion","onRenderSuggestionsItem","onSuggestionClick","onSuggestionRemove","getSuggestions","isLoading","suggestionsLoading","refocusSuggestions","removeSuggestionAriaLabel","removeButtonAriaLabel","suggestionsListId","pickerSuggestionsProps","removeButtonIconProps","onRenderItem","map","key","selected","onRemoveItem","removeItem","onItemChange","newEl","querySelectorAll","Math","min","currentValue","itemValue","_getTextFromItem","emptyResolveSuggestions","onEmptyResolveSuggestions","_updateAndResolveValue","_getShowSuggestions","onChange","isValueSelected","cursorLocation","getSelectedCount","removeItems","getSelection","_a","suggestionAlertClassName","enableSelectedSuggestionAlert","selectedSuggestion","selectedSuggestionAlertText","ariaLabel","alertClassName","suggestionRemovedText","removedItemText","itemName","getSuggestionsAlert","resolveNewValue","_onSelectedItemsUpdated","areSuggestionsVisible","getTextFromItem","Component","BasePickerListBelow","inputDisabled","single"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\pickers\\BasePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  KeyCodes,\n  css,\n  elementContains,\n  format,\n  getId,\n  classNamesFunction,\n  styled,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport { ValidationState } from './BasePicker.types';\nimport { Autofill } from '../Autofill/index';\nimport * as stylesImport from './BasePicker.scss';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  ISuggestions,\n  ISuggestionsProps,\n  ISuggestionsStyleProps,\n  ISuggestionsStyles,\n} from './Suggestions/Suggestions.types';\nimport type { IBasePicker, IBasePickerProps, IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IAutofill } from '../Autofill/index';\nimport type { IPickerItemProps } from './PickerItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nexport interface IBasePickerState<T> {\n  items?: any;\n  suggestedDisplayValue?: string;\n  moreSuggestionsAvailable?: boolean;\n  isFocused?: boolean;\n  isSearching?: boolean;\n  isMostRecentlyUsedVisible?: boolean;\n  suggestionsVisible?: boolean;\n  suggestionsLoading?: boolean;\n  isResultsFooterVisible?: boolean;\n  selectedIndices?: number[];\n  selectionRemoved?: T;\n}\n\n/**\n * Aria id's for internal picker components\n * {@docCategory Pickers}\n */\nexport type IPickerAriaIds = {\n  /**\n   * Aria id for selected suggestion alert component\n   */\n  selectedSuggestionAlert: string;\n  /**\n   * Aria id for selected items container component\n   */\n  selectedItems: string;\n  /**\n   * Aria id for suggestions list component\n   */\n  suggestionList: string;\n  /**\n   * Aria id for element with role=combobox\n   */\n  combobox: string;\n};\n\nconst getClassNames = classNamesFunction<IBasePickerStyleProps, IBasePickerStyles>();\n\n/**\n * Should be removed once new picker without inheritance is created\n */\nfunction getStyledSuggestions<T>(suggestionsType: new (props: ISuggestionsProps<T>) => Suggestions<T>) {\n  return styled<ISuggestionsProps<any>, ISuggestionsStyleProps, ISuggestionsStyles>(\n    suggestionsType,\n    suggestionsStyles,\n    undefined,\n    {\n      scope: 'Suggestions',\n    },\n  );\n}\n\n/**\n * {@docCategory Pickers}\n */\nexport class BasePicker<T, P extends IBasePickerProps<T>>\n  extends React.Component<P, IBasePickerState<T>>\n  implements IBasePicker<T> {\n  // Refs\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<IAutofill>();\n  protected suggestionElement = React.createRef<ISuggestions<T>>();\n  protected selection: Selection;\n  protected suggestionStore: SuggestionsController<T>;\n  /**\n   * @deprecated this is no longer necessary as typescript now supports generic elements\n   */\n  protected SuggestionOfProperType = Suggestions as new (props: ISuggestionsProps<T>) => Suggestions<T>;\n  protected currentPromise: PromiseLike<any> | undefined;\n  protected _ariaMap: IPickerAriaIds;\n  // eslint-disable-next-line deprecation/deprecation\n  private _styledSuggestions = getStyledSuggestions(this.SuggestionOfProperType);\n  private _id: string;\n  private _async: Async;\n\n  public static getDerivedStateFromProps(newProps: IBasePickerProps<any>) {\n    if (newProps.selectedItems) {\n      return { items: newProps.selectedItems };\n    }\n    return null;\n  }\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n\n    this._id = getId();\n    this._ariaMap = {\n      selectedItems: `selected-items-${this._id}`,\n      selectedSuggestionAlert: `selected-suggestion-alert-${this._id}`,\n      suggestionList: `suggestion-list-${this._id}`,\n      combobox: `combobox-${this._id}`,\n    };\n    this.suggestionStore = new SuggestionsController<T>();\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n    this.selection.setItems(items);\n    this.state = {\n      items: items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: [],\n      selectionRemoved: undefined,\n    };\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  }\n\n  public componentDidUpdate(oldProps: P, oldState: IBasePickerState<T>) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      const currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, false, true);\n          this.resetFocus(currentSelectedIndex);\n        }\n        // Reset focus to last item if the input is removed\n        else if (this.state.items.length > oldState.items.length && !this.canAddItems()) {\n          this.resetFocus(this.state.items.length - 1);\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n    this._async.dispose();\n  }\n\n  public focus() {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public focusInput() {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public dismissSuggestions = (ev?: any): void => {\n    const selectItemFunction = () => {\n      let addItemOnDismiss: boolean | void = true;\n      if (this.props.onDismiss) {\n        addItemOnDismiss = this.props.onDismiss(\n          ev,\n          this.suggestionStore.currentSuggestion ? this.suggestionStore.currentSuggestion.item : undefined,\n        );\n      }\n\n      if (!ev || (ev && !ev.defaultPrevented)) {\n        // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n        if (\n          addItemOnDismiss !== false &&\n          this.canAddItems() &&\n          this.suggestionStore.hasSelectedSuggestion() &&\n          this.state.suggestedDisplayValue\n        ) {\n          this.addItemByIndex(0);\n        }\n      }\n    };\n\n    if (this.currentPromise) {\n      this.currentPromise.then(() => selectItemFunction());\n    } else {\n      selectItemFunction();\n    }\n\n    this.setState({ suggestionsVisible: false });\n  };\n\n  public completeSuggestion(forceComplete?: boolean) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion!.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  }\n\n  public refocusSuggestions = (keyCode: KeyCodes): void => {\n    this.resetFocus();\n    if (this.suggestionStore.suggestions && this.suggestionStore.suggestions.length > 0) {\n      if (keyCode === KeyCodes.up) {\n        this.suggestionStore.setSelectedSuggestion(this.suggestionStore.suggestions.length - 1);\n      } else if (keyCode === KeyCodes.down) {\n        this.suggestionStore.setSelectedSuggestion(0);\n      }\n    }\n  };\n\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused, items } = this.state;\n    const { className, inputProps, disabled, selectionAriaLabel, selectionRole = 'list', theme, styles } = this.props;\n\n    const suggestionsVisible = !!this.state.suggestionsVisible;\n    const suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          disabled,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', className ? className : ''),\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n          itemsWrapper: legacyStyles.pickerItems,\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    const comboLabel = this.props['aria-label'] || inputProps?.['aria-label'];\n\n    // selectionAriaLabel is contained in a separate <span> rather than an aria-label on the items list\n    // because if the items list has an aria-label, the aria-describedby on the input will only read\n    // that label instead of all the selected items. Using aria-labelledby instead fixes this, since\n    // aria-describedby and aria-labelledby will not follow a second aria-labelledby\n    return (\n      <div\n        ref={this.root}\n        className={classNames.root}\n        onKeyDown={this.onKeyDown}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onClick={this.onWrapperClick}\n      >\n        {this.renderCustomAlert(classNames.screenReaderText)}\n        <span id={`${this._ariaMap.selectedItems}-label`} hidden>\n          {selectionAriaLabel || comboLabel}\n        </span>\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n          <div className={classNames.text} aria-owns={suggestionsAvailable}>\n            {items.length > 0 && (\n              <span\n                id={this._ariaMap.selectedItems}\n                className={classNames.itemsWrapper}\n                role={selectionRole}\n                aria-labelledby={`${this._ariaMap.selectedItems}-label`}\n              >\n                {this.renderItems()}\n              </span>\n            )}\n            {this.canAddItems() && (\n              <Autofill\n                spellCheck={false}\n                {...(inputProps as any)}\n                className={classNames.input}\n                componentRef={this.input}\n                id={inputProps?.id ? inputProps.id : this._ariaMap.combobox}\n                onClick={this.onClick}\n                onFocus={this.onInputFocus}\n                onBlur={this.onInputBlur}\n                onInputValueChange={this.onInputChange}\n                suggestedDisplayValue={suggestedDisplayValue}\n                aria-activedescendant={suggestionsVisible ? this.getActiveDescendant() : undefined}\n                aria-controls={suggestionsAvailable}\n                aria-describedby={items.length > 0 ? this._ariaMap.selectedItems : undefined}\n                aria-expanded={suggestionsVisible}\n                aria-haspopup=\"listbox\"\n                aria-label={comboLabel}\n                role=\"combobox\"\n                disabled={disabled}\n                onInputChange={this.props.onInputChange}\n              />\n            )}\n          </div>\n        </SelectionZone>\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n\n  protected canAddItems(): boolean {\n    const { items } = this.state;\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || items.length < itemLimit;\n  }\n\n  protected renderSuggestions(): JSX.Element | null {\n    const StyledTypedSuggestions: React.FunctionComponent<ISuggestionsProps<T>> = this._styledSuggestions;\n\n    return this.state.suggestionsVisible && this.input ? (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={5}\n        target={this.input.current ? this.input.current.inputElement : undefined}\n        onDismiss={this.dismissSuggestions}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintForRTL={DirectionalHint.bottomRightEdge}\n        {...this.props.pickerCalloutProps}\n      >\n        <StyledTypedSuggestions\n          // Assumed to set in derived component's defaultProps\n          onRenderSuggestion={this.props.onRenderSuggestionsItem!}\n          onSuggestionClick={this.onSuggestionClick}\n          onSuggestionRemove={this.onSuggestionRemove}\n          suggestions={this.suggestionStore.getSuggestions()}\n          componentRef={this.suggestionElement}\n          onGetMoreResults={this.onGetMoreResults}\n          moreSuggestionsAvailable={this.state.moreSuggestionsAvailable}\n          isLoading={this.state.suggestionsLoading}\n          isSearching={this.state.isSearching}\n          isMostRecentlyUsedVisible={this.state.isMostRecentlyUsedVisible}\n          isResultsFooterVisible={this.state.isResultsFooterVisible}\n          refocusSuggestions={this.refocusSuggestions}\n          removeSuggestionAriaLabel={this.props.removeButtonAriaLabel}\n          suggestionsListId={this._ariaMap.suggestionList}\n          createGenericItem={this._completeGenericSuggestion}\n          {...this.props.pickerSuggestionsProps}\n        />\n      </Callout>\n    ) : null;\n  }\n\n  protected renderItems(): JSX.Element[] {\n    const { disabled, removeButtonAriaLabel, removeButtonIconProps } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: IPickerItemProps<T>) => JSX.Element;\n\n    const { items, selectedIndices } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices!.indexOf(index) !== -1,\n        onRemoveItem: () => this.removeItem(item),\n        disabled: disabled,\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        removeButtonIconProps,\n      }),\n    );\n  }\n\n  protected resetFocus(index?: number) {\n    const { items } = this.state;\n\n    if (items.length && index! >= 0) {\n      const newEl: HTMLElement | null =\n        this.root.current &&\n        (this.root.current.querySelectorAll('[data-selection-index]')[\n          Math.min(index!, items.length - 1)\n        ] as HTMLElement | null);\n      if (newEl) {\n        newEl.focus();\n      }\n    } else if (!this.canAddItems()) {\n      this.resetFocus(items.length - 1);\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  }\n\n  protected onSuggestionSelect() {\n    if (this.suggestionStore.currentSuggestion) {\n      const currentValue: string = this.input.current ? this.input.current.value : '';\n      const itemValue: string = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n      this.setState({ suggestedDisplayValue: itemValue });\n    }\n  }\n\n  protected onSelectionChange() {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices(),\n    });\n  }\n\n  protected updateSuggestions(suggestions: any[]) {\n    this.suggestionStore.updateSuggestions(suggestions, 0);\n    this.forceUpdate();\n  }\n\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n  protected onEmptyInputFocus() {\n    const emptyResolveSuggestions = this.props.onEmptyResolveSuggestions\n      ? this.props.onEmptyResolveSuggestions\n      : // eslint-disable-next-line deprecation/deprecation\n        this.props.onEmptyInputFocus;\n\n    // Only attempt to resolve suggestions if it exists\n    if (emptyResolveSuggestions) {\n      const suggestions = emptyResolveSuggestions(this.state.items);\n\n      this.updateSuggestionsList(suggestions);\n\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false,\n      });\n    }\n  }\n\n  protected updateValue(updatedValue: string) {\n    this._onResolveSuggestions(updatedValue);\n  }\n\n  protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string) {\n    // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n    if (Array.isArray(suggestions)) {\n      this._updateAndResolveValue(updatedValue, suggestions);\n    } else if (suggestions && (suggestions as PromiseLike<T[]>).then) {\n      this.setState({\n        suggestionsLoading: true,\n      });\n\n      // Clear suggestions\n      this.suggestionStore.updateSuggestions([]);\n\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions(),\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current! && this.input.current!.inputElement === document.activeElement,\n        });\n      }\n\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      this.currentPromise = suggestions;\n      suggestions.then((newSuggestions: T[]) => {\n        if (suggestions === this.currentPromise) {\n          this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  }\n\n  protected resolveNewValue(updatedValue: string, suggestions: T[]) {\n    this.updateSuggestions(suggestions);\n    let itemValue: string | undefined = undefined;\n\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    }\n\n    // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n    this.setState(\n      {\n        suggestedDisplayValue: itemValue,\n        suggestionsVisible: this._getShowSuggestions(),\n      },\n      () => this.setState({ suggestionsLoading: false }),\n    );\n  }\n\n  protected onChange(items?: T[]) {\n    if (this.props.onChange) {\n      (this.props.onChange as any)(items);\n    }\n  }\n\n  protected onInputChange = (value: string): void => {\n    this.updateValue(value);\n    this.setState({\n      moreSuggestionsAvailable: true,\n      isMostRecentlyUsedVisible: false,\n    });\n  };\n\n  protected onSuggestionClick = (ev: React.MouseEvent<HTMLElement>, item: any, index: number): void => {\n    this.addItemByIndex(index);\n  };\n\n  protected onSuggestionRemove = (ev: React.MouseEvent<HTMLElement>, item: T, index: number): void => {\n    if (this.props.onRemoveSuggestion) {\n      this.props.onRemoveSuggestion(item);\n    }\n    this.suggestionStore.removeSuggestion(index);\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    this.selection.setAllSelected(false);\n    // Only trigger all of the focus if this component isn't already focused.\n    // For example when an item is selected or removed from the selected list it should be treated\n    // as though the input is still focused.\n    if (!this.state.isFocused) {\n      this._userTriggeredSuggestions();\n\n      if (this.props.inputProps && this.props.inputProps.onFocus) {\n        this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n      }\n    }\n  };\n\n  protected onInputBlur = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.props.inputProps && this.props.inputProps.onBlur) {\n      this.props.inputProps.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onBlur = (ev: React.FocusEvent<HTMLElement | Autofill>): void => {\n    if (this.state.isFocused) {\n      // Only blur the entire component if an unrelated element gets focus.\n      // Otherwise treat it as though it still has focus.\n      // Do nothing if the blur is coming from something\n      // inside the comboBox root or the comboBox menu since\n      // it we are not really bluring from the whole comboBox\n      let relatedTarget: EventTarget | null = ev.relatedTarget;\n\n      if (ev.relatedTarget === null) {\n        // In IE11, due to lack of support, event.relatedTarget is always\n        // null making every onBlur call to be \"outside\" of the ComboBox\n        // even when it's not. Using document.activeElement is another way\n        // for us to be able to get what the relatedTarget without relying\n        // on the event\n        relatedTarget = document.activeElement;\n      }\n      if (relatedTarget && !elementContains(this.root.current!, relatedTarget as HTMLElement)) {\n        this.setState({ isFocused: false });\n        if (this.props.onBlur) {\n          this.props.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n        }\n      }\n    }\n  };\n\n  /**\n   * Resets focus to last element in wrapper div if clicking back into Picker that has hit item limit\n   */\n  protected onWrapperClick = (ev: React.MouseEvent<HTMLInputElement>): void => {\n    if (!this.canAddItems()) {\n      this.resetFocus(this.state.items.length - 1);\n    }\n  };\n\n  /**\n   * Reveals suggestions any time the user clicks on the input element\n   * without shifting focus.\n   */\n  protected onClick = (ev: React.MouseEvent<HTMLInputElement>): void => {\n    if (this.props.inputProps !== undefined && this.props.inputProps.onClick !== undefined) {\n      this.props.inputProps.onClick(ev);\n    }\n\n    // Only primary (left) clicks show suggestions.\n    if (ev.button === 0) {\n      this._userTriggeredSuggestions();\n    }\n  };\n\n  protected onFocus = () => {\n    if (!this.state.isFocused) {\n      this.setState({ isFocused: true });\n    }\n  };\n\n  protected onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = ev.which;\n    switch (keyCode) {\n      case KeyCodes.escape:\n        if (this.state.suggestionsVisible) {\n          this.setState({ suggestionsVisible: false });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      case KeyCodes.tab:\n      case KeyCodes.enter:\n        if (this.suggestionElement.current && this.suggestionElement.current.hasSuggestedActionSelected()) {\n          this.suggestionElement.current.executeSelectedAction();\n        } else if (!ev.shiftKey && this.suggestionStore.hasSelectedSuggestion() && this.state.suggestionsVisible) {\n          this.completeSuggestion();\n          ev.preventDefault();\n          ev.stopPropagation();\n        } else {\n          this._completeGenericSuggestion();\n        }\n\n        break;\n\n      case KeyCodes.backspace:\n        if (!this.props.disabled) {\n          this.onBackspace(ev);\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.del:\n        if (!this.props.disabled) {\n          if (\n            this.input.current &&\n            ev.target === this.input.current.inputElement &&\n            this.state.suggestionsVisible &&\n            this.suggestionStore.currentIndex !== -1\n          ) {\n            if (this.props.onRemoveSuggestion) {\n              this.props.onRemoveSuggestion(this.suggestionStore.currentSuggestion!.item);\n            }\n            this.suggestionStore.removeSuggestion(this.suggestionStore.currentIndex);\n            this.forceUpdate();\n          } else {\n            this.onBackspace(ev);\n          }\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.up:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex === 0\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusAboveSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.previousSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n\n      case KeyCodes.down:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex + 1 === this.suggestionStore.suggestions.length\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusBelowSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.nextSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this._updateSelectedItems(newItems);\n    }\n  };\n\n  protected onGetMoreResults = (): void => {\n    this.setState(\n      {\n        isSearching: true,\n      },\n      () => {\n        if (this.props.onGetMoreResults && this.input.current) {\n          const suggestions: T[] | PromiseLike<T[]> = (this.props.onGetMoreResults as any)(\n            this.input.current.value,\n            this.state.items,\n          );\n          const suggestionsArray: T[] = suggestions as T[];\n          const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\n\n          if (Array.isArray(suggestionsArray)) {\n            this.updateSuggestions(suggestionsArray);\n            this.setState({ isSearching: false });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then((newSuggestions: T[]) => {\n              this.updateSuggestions(newSuggestions);\n              this.setState({ isSearching: false });\n            });\n          }\n        } else {\n          this.setState({ isSearching: false });\n        }\n\n        if (this.input.current) {\n          this.input.current.focus();\n        }\n\n        this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true,\n        });\n      },\n    );\n  };\n\n  protected completeSelection = (item: T) => {\n    this.addItem(item);\n    this.updateValue('');\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n    this.setState({ suggestionsVisible: false });\n  };\n\n  protected addItemByIndex = (index: number): void => {\n    this.completeSelection(this.suggestionStore.getSuggestionAtIndex(index).item);\n  };\n\n  protected addItem = (item: T): void => {\n    const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(item)\n      : item;\n\n    if (processedItem === null) {\n      return;\n    }\n\n    const processedItemObject: T = processedItem as T;\n    const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n    if (processedItemPromiseLike && processedItemPromiseLike.then) {\n      processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n        const newItems: T[] = this.state.items.concat([resolvedProcessedItem]);\n        this._updateSelectedItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat([processedItemObject]);\n      this._updateSelectedItems(newItems);\n    }\n    this.setState({ suggestedDisplayValue: '', selectionRemoved: undefined });\n  };\n\n  protected removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    if (index >= 0) {\n      const newItems: T[] = items.slice(0, index).concat(items.slice(index + 1));\n      this.setState({ selectionRemoved: item });\n      this._updateSelectedItems(newItems);\n    }\n  };\n\n  protected removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const newItems: T[] = items.filter((item: any) => itemsToRemove.indexOf(item) === -1);\n\n    this._updateSelectedItems(newItems);\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    if (\n      (this.state.items.length && !this.input.current) ||\n      (this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0)\n    ) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  }\n\n  /**\n   * @deprecated this is no longer necessary as focuszone has been removed\n   */\n  protected _shouldFocusZoneEnterInnerZone = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n    if (this.state.suggestionsVisible) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.up:\n        case KeyCodes.down:\n          return true;\n      }\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      return true;\n    }\n\n    return false;\n  };\n\n  protected getActiveDescendant() {\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n\n    const currentIndex = this.suggestionStore.currentIndex;\n\n    if (currentIndex < 0) {\n      // if the suggestions element has actions and the currentIndex does not point to a suggestion,\n      // return the action id\n      if (this.suggestionElement.current?.hasSuggestedAction()) {\n        return 'sug-selectedAction';\n      }\n\n      // If there are no suggestions and no action suggested, then return the ID for the no results found.\n      if (this.suggestionStore.suggestions.length === 0) {\n        return 'sug-noResultsFound';\n      }\n\n      return undefined;\n    } else {\n      return `sug-${currentIndex}`;\n    }\n  }\n\n  /** @deprecated use renderCustomAlert instead */\n  protected getSuggestionsAlert(suggestionAlertClassName: string = legacyStyles.screenReaderOnly) {\n    const currentIndex = this.suggestionStore.currentIndex;\n    if (this.props.enableSelectedSuggestionAlert) {\n      const selectedSuggestion =\n        currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      const selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\n      // keeping the id/className here for legacy support\n      return (\n        <div id={this._ariaMap.selectedSuggestionAlert} className={suggestionAlertClassName}>\n          {`${selectedSuggestionAlertText} `}\n        </div>\n      );\n    }\n  }\n\n  protected renderCustomAlert(alertClassName: string = legacyStyles.screenReaderOnly) {\n    const { suggestionRemovedText = 'removed {0}' } = this.props;\n    let removedItemText = '';\n\n    if (this.state.selectionRemoved) {\n      const itemName = this._getTextFromItem(this.state.selectionRemoved, '');\n      removedItemText = format(suggestionRemovedText, itemName);\n    }\n\n    return (\n      <div className={alertClassName} id={this._ariaMap.selectedSuggestionAlert} aria-live=\"assertive\">\n        {\n          // eslint-disable-next-line deprecation/deprecation\n          this.getSuggestionsAlert(alertClassName)\n        }\n        {removedItemText}\n      </div>\n    );\n  }\n\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n  private _updateAndResolveValue(updatedValue: string | undefined, newSuggestions: T[]) {\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      this.suggestionStore.updateSuggestions(newSuggestions, -1);\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n  private _updateSelectedItems(items: T[]): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({ items: items }, () => {\n        this._onSelectedItemsUpdated(items);\n      });\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[]): void {\n    this.onChange(items);\n  }\n\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n  private _getShowSuggestions(): boolean {\n    const areSuggestionsVisible =\n      this.input.current !== undefined &&\n      this.input.current !== null &&\n      this.input.current.inputElement === document.activeElement &&\n      this.input.current.value !== '';\n\n    return areSuggestionsVisible;\n  }\n\n  private _onResolveSuggestions = (updatedValue: string): void => {\n    const suggestions: T[] | PromiseLike<T[]> | null = this.props.onResolveSuggestions(updatedValue, this.state.items);\n\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions, updatedValue);\n    }\n  };\n\n  private _completeGenericSuggestion = (): void => {\n    if (\n      this.props.onValidateInput &&\n      this.input.current &&\n      (this.props.onValidateInput as any)(this.input.current.value) !== ValidationState.invalid &&\n      this.props.createGenericItem\n    ) {\n      const itemToConvert = this.props.createGenericItem(\n        this.input.current.value,\n        this.props.onValidateInput(this.input.current.value),\n      );\n      this.suggestionStore.createGenericSuggestion(itemToConvert);\n      this.completeSuggestion();\n    }\n  };\n\n  private _getTextFromItem(item: T, currentValue?: string): string {\n    if (this.props.getTextFromItem) {\n      return (this.props.getTextFromItem as any)(item, currentValue);\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * This should be called when the user does something other than use text entry to trigger suggestions.\n   *\n   */\n  private _userTriggeredSuggestions = () => {\n    if (!this.state.suggestionsVisible) {\n      const input = this.input.current ? this.input.current.value : '';\n      if (!input) {\n        this.onEmptyInputFocus();\n      } else {\n        if (this.suggestionStore.suggestions.length === 0) {\n          this._onResolveSuggestions(input);\n        } else {\n          this.setState({\n            isMostRecentlyUsedVisible: false,\n            suggestionsVisible: true,\n          });\n        }\n      }\n    }\n  };\n}\n\nexport class BasePickerListBelow<T, P extends IBasePickerProps<T>> extends BasePicker<T, P> {\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused } = this.state;\n    const { className, inputProps, disabled, selectionAriaLabel, selectionRole = 'list', theme, styles } = this.props;\n\n    const suggestionsVisible = !!this.state.suggestionsVisible;\n\n    const suggestionsAvailable: string | undefined = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', className ? className : ''),\n          text: css(\n            'ms-BasePicker-text',\n            legacyStyles.pickerText,\n            this.state.isFocused && legacyStyles.inputFocused,\n            disabled && legacyStyles.inputDisabled,\n          ),\n          itemsWrapper: legacyStyles.pickerItems,\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    const comboLabel = this.props['aria-label'] || inputProps?.['aria-label'];\n\n    return (\n      <div ref={this.root} onBlur={this.onBlur} onFocus={this.onFocus}>\n        <div className={classNames.root} onKeyDown={this.onKeyDown}>\n          {this.renderCustomAlert(classNames.screenReaderText)}\n          <div className={classNames.text} aria-owns={suggestionsAvailable}>\n            <Autofill\n              {...(inputProps as any)}\n              className={classNames.input}\n              componentRef={this.input}\n              onFocus={this.onInputFocus}\n              onBlur={this.onInputBlur}\n              onClick={this.onClick}\n              onInputValueChange={this.onInputChange}\n              suggestedDisplayValue={suggestedDisplayValue}\n              aria-activedescendant={suggestionsVisible ? this.getActiveDescendant() : undefined}\n              aria-controls={suggestionsAvailable}\n              aria-expanded={suggestionsVisible}\n              aria-haspopup=\"listbox\"\n              aria-label={comboLabel}\n              role=\"combobox\"\n              id={inputProps?.id ? inputProps.id : this._ariaMap.combobox}\n              disabled={disabled}\n              onInputChange={this.props.onInputChange}\n            />\n          </div>\n        </div>\n        {this.renderSuggestions()}\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.single}>\n          <div\n            id={this._ariaMap.selectedItems}\n            className=\"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n            role={selectionRole}\n            aria-label={selectionAriaLabel || comboLabel}\n          >\n            {this.renderItems()}\n          </div>\n        </SelectionZone>\n      </div>\n    );\n  }\n\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    // override the existing backspace method to not do anything because the list items appear below.\n  }\n}\n"]},"metadata":{},"sourceType":"module"}