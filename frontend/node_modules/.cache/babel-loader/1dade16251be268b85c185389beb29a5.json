{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, format, divProperties, getNativeProps, useFocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { RatingSize } from './Rating.types';\nimport { useId, useWarnings, useControllableValue, useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\n\nvar RatingStar = function (props) {\n  return React.createElement(\"div\", {\n    className: props.classNames.ratingStar\n  }, React.createElement(Icon, {\n    className: props.classNames.ratingStarBack,\n    iconName: props.fillPercentage === 0 || props.fillPercentage === 100 ? props.icon : props.unselectedIcon\n  }), !props.disabled && React.createElement(Icon, {\n    className: props.classNames.ratingStarFront,\n    iconName: props.icon,\n    style: {\n      width: props.fillPercentage + '%'\n    }\n  }));\n};\n\nvar useComponentRef = function (componentRef, rating) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      rating: rating\n    };\n  }, [rating]);\n};\n\nvar useDebugWarnings = function (props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Rating',\n      props: props,\n      controlledUsage: {\n        valueProp: 'rating',\n        defaultValueProp: 'defaultRating',\n        onChangeProp: 'onChange',\n        readOnlyProp: 'readOnly'\n      }\n    });\n  }\n};\n\nvar getClampedRating = function (rating, min, max) {\n  return Math.min(Math.max(rating !== null && rating !== void 0 ? rating : min, min), max);\n};\n\nvar getFillingPercentage = function (starNum, displayRating) {\n  var ceilValue = Math.ceil(displayRating);\n  var fillPercentage = 100;\n\n  if (starNum === displayRating) {\n    fillPercentage = 100;\n  } else if (starNum === ceilValue) {\n    fillPercentage = 100 * (displayRating % 1);\n  } else if (starNum > ceilValue) {\n    fillPercentage = 0;\n  }\n\n  return fillPercentage;\n};\n\nvar getStarId = function (id, starNum) {\n  return id + \"-star-\" + (starNum - 1);\n};\n\nexport var RatingBase = React.forwardRef(function (props, forwardedRef) {\n  var id = useId('Rating');\n  var labelId = useId('RatingLabel');\n  var ariaLabel = props.ariaLabel,\n      ariaLabelFormat = props.ariaLabelFormat,\n      disabled = props.disabled,\n      getAriaLabel = props.getAriaLabel,\n      styles = props.styles,\n      // eslint-disable-next-line deprecation/deprecation\n  _a = props.min,\n      // eslint-disable-next-line deprecation/deprecation\n  minFromProps = _a === void 0 ? props.allowZeroStars ? 0 : 1 : _a,\n      _b = props.max,\n      max = _b === void 0 ? 5 : _b,\n      readOnly = props.readOnly,\n      size = props.size,\n      theme = props.theme,\n      _c = props.icon,\n      icon = _c === void 0 ? 'FavoriteStarFill' : _c,\n      _d = props.unselectedIcon,\n      unselectedIcon = _d === void 0 ? 'FavoriteStar' : _d,\n      onRenderStar = props.onRenderStar; // Ensure min is >= 0 to avoid issues elsewhere\n\n  var min = Math.max(minFromProps, 0);\n\n  var _e = useControllableValue(props.rating, props.defaultRating, props.onChange),\n      rating = _e[0],\n      setRating = _e[1];\n  /** Rating clamped within valid range. Will be `min` if `rating` is undefined. */\n\n\n  var displayRating = getClampedRating(rating, min, max);\n  useDebugWarnings(props);\n  useComponentRef(props.componentRef, displayRating);\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  useFocusRects(rootRef);\n  var divProps = getNativeProps(props, divProperties);\n  var classNames = getClassNames(styles, {\n    disabled: disabled,\n    readOnly: readOnly,\n    theme: theme\n  });\n  var readOnlyAriaLabel = getAriaLabel === null || getAriaLabel === void 0 ? void 0 : getAriaLabel(displayRating, max);\n  var normalModeAriaLabel = ariaLabel ? ariaLabel : readOnlyAriaLabel;\n  var stars = [];\n\n  var renderStar = function (starProps, renderer) {\n    return renderer ? renderer(starProps) : React.createElement(RatingStar, __assign({}, starProps));\n  };\n\n  var _loop_1 = function (starNum) {\n    var fillPercentage = getFillingPercentage(starNum, displayRating);\n\n    var onSelectStar = function (ev) {\n      // Use the actual rating (not display value) here, to ensure that we update if the actual\n      // rating is undefined and the user clicks the first star.\n      if (rating === undefined || Math.ceil(rating) !== starNum) {\n        setRating(starNum, ev);\n      }\n    };\n\n    stars.push(React.createElement(\"button\", __assign({\n      className: css(classNames.ratingButton, size === RatingSize.Large ? classNames.ratingStarIsLarge : classNames.ratingStarIsSmall),\n      id: getStarId(id, starNum),\n      key: starNum\n    }, starNum === Math.ceil(displayRating) && {\n      'data-is-current': true\n    }, {\n      onFocus: onSelectStar,\n      onClick: onSelectStar,\n      disabled: !!(disabled || readOnly),\n      role: \"radio\",\n      \"aria-hidden\": readOnly ? 'true' : undefined,\n      type: \"button\",\n      \"aria-checked\": starNum === Math.ceil(displayRating)\n    }), React.createElement(\"span\", {\n      id: labelId + \"-\" + starNum,\n      className: classNames.labelText\n    }, format(ariaLabelFormat || '', starNum, max)), renderStar({\n      fillPercentage: fillPercentage,\n      disabled: disabled,\n      classNames: classNames,\n      icon: fillPercentage > 0 ? icon : unselectedIcon,\n      starNum: starNum,\n      unselectedIcon: unselectedIcon\n    }, onRenderStar)));\n  };\n\n  for (var starNum = 1; starNum <= max; starNum++) {\n    _loop_1(starNum);\n  }\n\n  var rootSizeClass = size === RatingSize.Large ? classNames.rootIsLarge : classNames.rootIsSmall;\n  return React.createElement(\"div\", __assign({\n    ref: mergedRootRefs,\n    className: css('ms-Rating-star', classNames.root, rootSizeClass),\n    \"aria-label\": !readOnly ? normalModeAriaLabel : undefined,\n    id: id,\n    role: !readOnly ? 'radiogroup' : undefined\n  }, divProps), React.createElement(FocusZone, __assign({\n    direction: FocusZoneDirection.bidirectional,\n    className: css(classNames.ratingFocusZone, rootSizeClass),\n    defaultActiveElement: '#' + getStarId(id, Math.ceil(displayRating))\n  }, readOnly && {\n    allowFocusRoot: true,\n    disabled: true,\n    role: 'textbox',\n    'aria-label': readOnlyAriaLabel,\n    'aria-readonly': true,\n    'data-is-focusable': true,\n    tabIndex: 0\n  }), stars));\n});\nRatingBase.displayName = 'RatingBase';","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","format","divProperties","getNativeProps","useFocusRects","Icon","FocusZone","FocusZoneDirection","RatingSize","useId","useWarnings","useControllableValue","useMergedRefs","getClassNames","RatingStar","props","className","classNames","ratingStar","ratingStarBack","iconName","fillPercentage","icon","unselectedIcon","disabled","ratingStarFront","style","width","useComponentRef","componentRef","rating","useImperativeHandle","useDebugWarnings","process","env","NODE_ENV","name","controlledUsage","valueProp","defaultValueProp","onChangeProp","readOnlyProp","getClampedRating","min","max","Math","getFillingPercentage","starNum","displayRating","ceilValue","ceil","getStarId","id","RatingBase","forwardRef","forwardedRef","labelId","ariaLabelFormat","getAriaLabel","styles","_a","minFromProps","allowZeroStars","_b","readOnly","size","theme","_c","_d","onRenderStar","defaultRating","onChange","setRating","rootRef","useRef","mergedRootRefs","divProps","readOnlyAriaLabel","normalModeAriaLabel","ariaLabel","stars","renderStar","starProps","renderer","__assign","onSelectStar","ev","undefined","push","ratingButton","Large","ratingStarIsLarge","ratingStarIsSmall","key","onFocus","onClick","role","type","labelText","rootSizeClass","rootIsLarge","rootIsSmall","ref","root","direction","bidirectional","ratingFocusZone","defaultActiveElement","allowFocusRoot","tabIndex","displayName"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Rating\\Rating.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, format, divProperties, getNativeProps, useFocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { RatingSize } from './Rating.types';\nimport { useId, useWarnings, useControllableValue, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IRatingProps, IRatingStyleProps, IRatingStyles, IRating, IRatingStarProps } from './Rating.types';\n\nconst getClassNames = classNamesFunction<IRatingStyleProps, IRatingStyles>();\n\nconst RatingStar = (props: IRatingStarProps) => {\n  return (\n    <div className={props.classNames.ratingStar}>\n      <Icon\n        className={props.classNames.ratingStarBack}\n        iconName={props.fillPercentage === 0 || props.fillPercentage === 100 ? props.icon : props.unselectedIcon}\n      />\n      {!props.disabled && (\n        <Icon\n          className={props.classNames.ratingStarFront}\n          iconName={props.icon}\n          style={{ width: props.fillPercentage + '%' }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst useComponentRef = (componentRef: React.Ref<IRating> | undefined, rating: number) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      rating,\n    }),\n    [rating],\n  );\n};\n\nconst useDebugWarnings = (props: IRatingProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Rating',\n      props,\n      controlledUsage: {\n        valueProp: 'rating',\n        defaultValueProp: 'defaultRating',\n        onChangeProp: 'onChange',\n        readOnlyProp: 'readOnly',\n      },\n    });\n  }\n};\n\nconst getClampedRating = (rating: number | undefined, min: number, max: number): number => {\n  return Math.min(Math.max(rating ?? min, min), max);\n};\n\nconst getFillingPercentage = (starNum: number, displayRating: number): number => {\n  const ceilValue = Math.ceil(displayRating);\n  let fillPercentage = 100;\n\n  if (starNum === displayRating) {\n    fillPercentage = 100;\n  } else if (starNum === ceilValue) {\n    fillPercentage = 100 * (displayRating % 1);\n  } else if (starNum > ceilValue) {\n    fillPercentage = 0;\n  }\n  return fillPercentage;\n};\n\nconst getStarId = (id: string, starNum: number) => {\n  return `${id}-star-${starNum - 1}`;\n};\n\nexport const RatingBase: React.FunctionComponent<IRatingProps> = React.forwardRef<HTMLDivElement, IRatingProps>(\n  (props, forwardedRef) => {\n    const id = useId('Rating');\n    const labelId = useId('RatingLabel');\n    const {\n      ariaLabel,\n      ariaLabelFormat,\n      disabled,\n      getAriaLabel,\n      styles,\n      // eslint-disable-next-line deprecation/deprecation\n      min: minFromProps = props.allowZeroStars ? 0 : 1,\n      max = 5,\n      readOnly,\n      size,\n      theme,\n      icon = 'FavoriteStarFill',\n      unselectedIcon = 'FavoriteStar',\n      onRenderStar,\n    } = props;\n\n    // Ensure min is >= 0 to avoid issues elsewhere\n    const min = Math.max(minFromProps, 0);\n\n    const [rating, setRating] = useControllableValue(props.rating, props.defaultRating, props.onChange);\n    /** Rating clamped within valid range. Will be `min` if `rating` is undefined. */\n    const displayRating = getClampedRating(rating, min, max);\n\n    useDebugWarnings(props);\n\n    useComponentRef(props.componentRef, displayRating);\n\n    const rootRef = React.useRef<HTMLDivElement | null>(null);\n    const mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n    useFocusRects(rootRef);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames = getClassNames(styles!, {\n      disabled,\n      readOnly,\n      theme: theme!,\n    });\n\n    const readOnlyAriaLabel = getAriaLabel?.(displayRating, max);\n    const normalModeAriaLabel = ariaLabel ? ariaLabel : readOnlyAriaLabel;\n\n    const stars: JSX.Element[] = [];\n\n    const renderStar = (starProps: IRatingStarProps, renderer?: IRatingProps['onRenderStar']) =>\n      renderer ? renderer(starProps) : <RatingStar {...starProps} />;\n\n    for (let starNum = 1; starNum <= max; starNum++) {\n      const fillPercentage = getFillingPercentage(starNum, displayRating);\n\n      const onSelectStar = (ev: React.SyntheticEvent<HTMLElement>): void => {\n        // Use the actual rating (not display value) here, to ensure that we update if the actual\n        // rating is undefined and the user clicks the first star.\n        if (rating === undefined || Math.ceil(rating) !== starNum) {\n          setRating(starNum, ev);\n        }\n      };\n\n      stars.push(\n        <button\n          className={css(\n            classNames.ratingButton,\n            size === RatingSize.Large ? classNames.ratingStarIsLarge : classNames.ratingStarIsSmall,\n          )}\n          id={getStarId(id, starNum)}\n          key={starNum}\n          {...(starNum === Math.ceil(displayRating) && { 'data-is-current': true })}\n          onFocus={onSelectStar}\n          onClick={onSelectStar} // For Safari & Firefox on OSX\n          disabled={!!(disabled || readOnly)}\n          role=\"radio\"\n          aria-hidden={readOnly ? 'true' : undefined}\n          type=\"button\"\n          aria-checked={starNum === Math.ceil(displayRating)}\n        >\n          <span id={`${labelId}-${starNum}`} className={classNames.labelText}>\n            {format(ariaLabelFormat || '', starNum, max)}\n          </span>\n          {renderStar(\n            {\n              fillPercentage,\n              disabled,\n              classNames,\n              icon: fillPercentage > 0 ? icon : unselectedIcon,\n              starNum,\n              unselectedIcon,\n            },\n            onRenderStar,\n          )}\n        </button>,\n      );\n    }\n\n    const rootSizeClass = size === RatingSize.Large ? classNames.rootIsLarge : classNames.rootIsSmall;\n\n    return (\n      <div\n        ref={mergedRootRefs}\n        className={css('ms-Rating-star', classNames.root, rootSizeClass)}\n        aria-label={!readOnly ? normalModeAriaLabel : undefined}\n        id={id}\n        role={!readOnly ? 'radiogroup' : undefined}\n        {...divProps}\n      >\n        <FocusZone\n          direction={FocusZoneDirection.bidirectional}\n          className={css(classNames.ratingFocusZone, rootSizeClass)}\n          defaultActiveElement={'#' + getStarId(id, Math.ceil(displayRating))}\n          // When in read-only mode, we allow focus (per ARIA standards) and set up ARIA attributes to indicate element\n          // is read-only. https://www.w3.org/TR/wai-aria-1.1/#aria-readonly\n          {...(readOnly && {\n            allowFocusRoot: true,\n            disabled: true,\n            role: 'textbox',\n            'aria-label': readOnlyAriaLabel,\n            'aria-readonly': true,\n            'data-is-focusable': true,\n            tabIndex: 0,\n          })}\n        >\n          {stars}\n        </FocusZone>\n      </div>\n    );\n  },\n);\nRatingBase.displayName = 'RatingBase';\n"]},"metadata":{},"sourceType":"module"}