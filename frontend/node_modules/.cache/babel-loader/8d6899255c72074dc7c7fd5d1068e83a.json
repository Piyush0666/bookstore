{"ast":null,"code":"import { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\n\nexport var isRestrictedDate = function (date, options) {\n  var restrictedDates = options.restrictedDates,\n      minDate = options.minDate,\n      maxDate = options.maxDate;\n\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n\n  var inRestrictedDates = restrictedDates && restrictedDates.some(function (rd) {\n    return compareDates(rd, date);\n  });\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};","map":{"version":3,"mappings":"AACA,SAASA,YAAT,QAA6B,sBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;;;;;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,UAACC,IAAD,EAAaC,OAAb,EAA6C;EACnE,mBAAe,GAAuBA,OAAO,gBAA7C;EAAA,IAAiBC,OAAO,GAAcD,OAAO,QAA7C;EAAA,IAA0BE,OAAO,GAAKF,OAAO,QAA7C;;EACR,IAAI,CAACG,eAAD,IAAoB,CAACF,OAArB,IAAgC,CAACC,OAArC,EAA8C;IAC5C,OAAO,KAAP;EACD;;EACD,IAAME,iBAAiB,GAAGD,eAAe,IAAIA,eAAe,CAACE,IAAhB,CAAqB,UAACC,EAAD,EAAS;IAAK,mBAAY,CAACA,EAAD,EAAKP,IAAL,CAAZ;EAAsB,CAAzD,CAA7C;EACA,OAAOK,iBAAiB,IAAIR,eAAe,CAACG,IAAD,EAAOC,OAAP,CAApC,IAAuDH,cAAc,CAACE,IAAD,EAAOC,OAAP,CAA5E;AACD,CAPM","names":["compareDates","isBeforeMinDate","isAfterMaxDate","isRestrictedDate","date","options","minDate","maxDate","restrictedDates","inRestrictedDates","some","rd"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\dateGrid\\isRestrictedDate.ts"],"sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\nexport const isRestrictedDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { restrictedDates, minDate, maxDate } = options;\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n  const inRestrictedDates = restrictedDates && restrictedDates.some((rd: Date) => compareDates(rd, date));\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};\n"]},"metadata":{},"sourceType":"module"}