{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, Customizer, useFocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function (_a) {\n  var theme = _a.theme,\n      dir = _a.dir;\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nexport var FabricBase = React.forwardRef(function (props, ref) {\n  var className = props.className,\n      theme = props.theme,\n      applyTheme = props.applyTheme,\n      applyThemeToBody = props.applyThemeToBody,\n      styles = props.styles;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    applyTheme: applyTheme,\n    className: className\n  });\n  var rootElement = React.useRef(null);\n  useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n  useFocusRects(rootElement);\n  return React.createElement(React.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));\n});\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(props, _a, rootElement, ref) {\n  var root = _a.root;\n  var _b = props.as,\n      Root = _b === void 0 ? 'div' : _b,\n      dir = props.dir,\n      theme = props.theme;\n  var divProps = getNativeProps(props, divProperties, ['dir']);\n\n  var _c = getDir(props),\n      rootDir = _c.rootDir,\n      needsTheme = _c.needsTheme;\n\n  var renderedContent = React.createElement(Root, __assign({\n    dir: rootDir\n  }, divProps, {\n    className: root,\n    ref: useMergedRefs(rootElement, ref)\n  })); // Create the contextual theme if component direction does not match parent direction.\n\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = // eslint-disable-next-line deprecation/deprecation\n    React.createElement(Customizer, {\n      settings: {\n        theme: getFabricTheme(theme, dir === 'rtl')\n      }\n    }, renderedContent);\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(applyThemeToBody, _a, rootElement) {\n  var bodyThemed = _a.bodyThemed;\n  React.useEffect(function () {\n    if (applyThemeToBody) {\n      var currentDoc_1 = getDocument(rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(bodyThemed);\n        return function () {\n          currentDoc_1.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n  return rootElement;\n}","map":{"version":3,"mappings":"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","names":["React","getNativeProps","divProperties","classNamesFunction","getDocument","memoizeFunction","getRTL","Customizer","useFocusRects","createTheme","useMergedRefs","getClassNames","getFabricTheme","theme","isRTL","rtl","getDir","_a","dir","contextDir","pageDir","componentDir","rootDir","needsTheme","FabricBase","forwardRef","props","ref","applyTheme","applyThemeToBody","styles","classNames","className","rootElement","useRef","useApplyThemeToBody","useRenderedContent","displayName","root","Root","_b","divProps","renderedContent","__assign","settings","bodyThemed","useEffect","currentDoc_1","current","body","classList","add","remove"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\Fabric\\Fabric.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  Customizer,\n  useFocusRects,\n} from '../../Utilities';\nimport { createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport type { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport type { IProcessedStyleSet } from '@fluentui/merge-styles';\nimport type { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = ({ theme, dir }: IFabricProps) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport const FabricBase: React.FunctionComponent<IFabricProps> = React.forwardRef<HTMLDivElement, IFabricProps>(\n  (props, ref) => {\n    const { className, theme, applyTheme, applyThemeToBody, styles } = props;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n\n    const rootElement = React.useRef<HTMLDivElement | null>(null);\n    useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n    useFocusRects(rootElement);\n\n    return <>{useRenderedContent(props, classNames, rootElement, ref)}</>;\n  },\n);\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(\n  props: IFabricProps,\n  { root }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement | undefined>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { as: Root = 'div', dir, theme } = props;\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['dir']);\n\n  const { rootDir, needsTheme } = getDir(props);\n\n  let renderedContent = <Root dir={rootDir} {...divProps} className={root} ref={useMergedRefs(rootElement, ref)} />;\n\n  // Create the contextual theme if component direction does not match parent direction.\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = (\n      // eslint-disable-next-line deprecation/deprecation\n      <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n    );\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(\n  applyThemeToBody: boolean | undefined,\n  { bodyThemed }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement | undefined>,\n) {\n  React.useEffect((): void | (() => void) => {\n    if (applyThemeToBody) {\n      const currentDoc = getDocument(rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(bodyThemed);\n        return () => {\n          currentDoc.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n\n  return rootElement;\n}\n"]},"metadata":{},"sourceType":"module"}