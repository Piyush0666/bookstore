{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\nvar StyledSuggestionsItem = styled(SuggestionsItem, suggestionsItemStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\n\nvar Suggestions =\n/** @class */\nfunction (_super) {\n  __extends(Suggestions, _super);\n\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    _this._scrollContainer = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n\n      if (keyCode === KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n        }\n      } else if (keyCode === KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n        }\n      }\n\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n\n        isEventHandled = true;\n      }\n\n      return isEventHandled;\n    };\n\n    _this._getAlertText = function () {\n      var _a = _this.props,\n          isLoading = _a.isLoading,\n          isSearching = _a.isSearching,\n          suggestions = _a.suggestions,\n          suggestionsAvailableAlertText = _a.suggestionsAvailableAlertText,\n          noResultsFoundText = _a.noResultsFoundText;\n\n      if (!isLoading && !isSearching) {\n        if (suggestions.length > 0) {\n          return suggestionsAvailableAlertText || '';\n        }\n\n        if (noResultsFoundText) {\n          return noResultsFoundText;\n        }\n      }\n\n      return '';\n    };\n\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults(); // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n\n\n        _this.setState({\n          selectedActionType: SuggestionActionType.none\n        });\n      }\n    };\n\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n    return _this;\n  }\n\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        forceResolveText = _c.forceResolveText,\n        mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n        searchForMoreIcon = _c.searchForMoreIcon,\n        searchForMoreText = _c.searchForMoreText,\n        className = _c.className,\n        moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n        noResultsFoundText = _c.noResultsFoundText,\n        suggestions = _c.suggestions,\n        isLoading = _c.isLoading,\n        isSearching = _c.isSearching,\n        loadingText = _c.loadingText,\n        onRenderNoResultFound = _c.onRenderNoResultFound,\n        searchingText = _c.searchingText,\n        isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n        resultsMaximumNumber = _c.resultsMaximumNumber,\n        resultsFooterFull = _c.resultsFooterFull,\n        resultsFooter = _c.resultsFooter,\n        _d = _c.isResultsFooterVisible,\n        isResultsFooterVisible = _d === void 0 ? true : _d,\n        suggestionsHeaderText = _c.suggestionsHeaderText,\n        suggestionsClassName = _c.suggestionsClassName,\n        theme = _c.theme,\n        styles = _c.styles,\n        suggestionsListId = _c.suggestionsListId,\n        suggestionsContainerAriaLabel = _c.suggestionsContainerAriaLabel; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n    }) : {\n      root: css('ms-Suggestions', className, legacyStyles.root),\n      title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.searchMore, _a)),\n      forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined; // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n\n    var noResults = function () {\n      return (// This ID can be used by the parent to set aria-activedescendant to this\n        React.createElement(\"div\", {\n          id: \"sug-noResultsFound\",\n          role: \"option\"\n        }, onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : React.createElement(\"div\", {\n          className: _this._classNames.noSuggestions\n        }, noResultsFoundText))\n      );\n    }; // MostRecently Used text should supercede the header text if it's there and available.\n\n\n    var headerText = suggestionsHeaderText;\n\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    var footerTitle = undefined;\n\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    var forceResolveId = this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    var searchForMoreId = this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      \"aria-label\": suggestionsContainerAriaLabel || headerText,\n      id: suggestionsListId,\n      role: \"listbox\"\n    }, React.createElement(Announced, {\n      message: this._getAlertText(),\n      \"aria-live\": \"polite\"\n    }), headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      id: forceResolveId,\n      onClick: this._forceResolve,\n      \"data-automationid\": 'sug-forceResolve'\n    }, forceResolveText), isLoading && React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      ariaLabel: loadingText,\n      label: loadingText\n    })), hasNoSuggestions ? noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: searchForMoreIcon || {\n        iconName: 'Search'\n      },\n      id: searchForMoreId,\n      onClick: this._getMoreResults,\n      \"data-automationid\": 'sug-searchForMore',\n      role: 'option'\n    }, searchForMoreText), isSearching ? React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      ariaLabel: searchingText,\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null);\n  };\n\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  };\n\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  };\n\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n\n        break;\n\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n\n        break;\n    }\n  };\n\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    }\n  };\n\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    }\n  };\n\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  };\n\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._scrollContainer.current && this._scrollContainer.current.scrollTo !== undefined) {\n      var _a = this._selectedElement.current,\n          offsetHeight = _a.offsetHeight,\n          offsetTop = _a.offsetTop;\n      var _b = this._scrollContainer.current,\n          parentOffsetHeight = _b.offsetHeight,\n          scrollTop = _b.scrollTop;\n      var isAbove = offsetTop < scrollTop;\n      var isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  };\n\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        removeButtonIconProps = _a.removeButtonIconProps;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      ref: this._scrollContainer,\n      role: \"presentation\"\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        role: \"presentation\"\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        id: 'sug-' + index,\n        removeButtonIconProps: removeButtonIconProps\n      }));\n    }));\n  };\n\n  return Suggestions;\n}(React.Component);\n\nexport { Suggestions };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","KeyCodes","classNamesFunction","css","styled","CommandButton","Spinner","Announced","SuggestionActionType","SuggestionsItem","getStyles","suggestionsItemStyles","stylesImport","legacyStyles","getClassNames","StyledSuggestionsItem","undefined","scope","__extends","suggestionsProps","_super","_this","createRef","keyCode","currentSuggestionIndex","isEventHandled","newSelectedActionType","currentSelectedAction","state","selectedActionType","suggestionLength","props","suggestions","length","down","forceResolve","_refocusOnSuggestions","none","_searchForMoreButton","current","searchMore","_forceResolveButton","up","setState","isLoading","isSearching","suggestionsAvailableAlertText","noResultsFoundText","onGetMoreResults","createGenericItem","showForceResolve","item","index","ev","onSuggestionClick","refocusSuggestions","onSuggestionRemove","stopPropagation","Suggestions","scrollSelected","activeSelectedElement","_selectedElement","forceResolveText","mostRecentlyUsedHeaderText","searchForMoreIcon","searchForMoreText","className","moreSuggestionsAvailable","loadingText","onRenderNoResultFound","searchingText","isMostRecentlyUsedVisible","resultsMaximumNumber","resultsFooterFull","resultsFooter","_d","isResultsFooterVisible","suggestionsHeaderText","suggestionsClassName","theme","styles","suggestionsListId","suggestionsContainerAriaLabel","_classNames","forceResolveButtonSelected","searchForMoreButtonSelected","root","title","suggestionsTitle","searchForMoreButton","actionButton","_a","buttonSelected","forceResolveButton","_b","suggestionsAvailable","suggestionsContainer","noSuggestions","suggestionsNone","spinnerStyles","subComponentStyles","spinner","spinnerClassNameOrStyles","suggestionsSpinner","noResults","id","role","headerText","footerTitle","hasNoSuggestions","forceResolveId","searchForMoreId","message","_getAlertText","_shouldShowForceResolve","componentRef","onClick","_forceResolve","__assign","ariaLabel","label","_renderSuggestions","iconProps","iconName","_getMoreResults","focus","_scrollContainer","scrollTo","offsetHeight","offsetTop","parentOffsetHeight","scrollTop","isAbove","isBelow","onRenderSuggestion","removeSuggestionAriaLabel","suggestionsItemClassName","showRemoveButtons","removeButtonIconProps","StyledTypedSuggestionsItem","selectedIndex","some","element","selected","slice","ref","map","suggestion","key","suggestionModel","RenderSuggestion","_onClickTypedSuggestionsItem","showRemoveButton","removeButtonAriaLabel","onRemoveItem","_onRemoveTypedSuggestionsItem","Component"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\pickers\\src\\components\\pickers\\Suggestions\\Suggestions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IStyleFunctionOrObject } from '../../../Utilities';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { IButton } from '../../../Button';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport type { ISuggestionsProps, ISuggestionsStyleProps, ISuggestionsStyles } from './Suggestions.types';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  {\n    scope: 'SuggestionItem',\n  },\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  protected _scrollContainer = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      selectedActionType: SuggestionActionType.none,\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreIcon,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles,\n      suggestionsListId,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore,\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.searchMore,\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.forceResolve,\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css(\n            'ms-Suggestions-container',\n            legacyStyles.suggestionsContainer,\n            suggestionsClassName,\n          ),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone),\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : {\n          className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner),\n        };\n\n    const noResults = () => (\n      // This ID can be used by the parent to set aria-activedescendant to this\n      <div id=\"sug-noResultsFound\" role=\"option\">\n        {onRenderNoResultFound ? (\n          onRenderNoResultFound(undefined, noResults)\n        ) : (\n          <div className={this._classNames.noSuggestions}>{noResultsFoundText}</div>\n        )}\n      </div>\n    );\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n\n    const forceResolveId =\n      this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    const searchForMoreId =\n      this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        aria-label={suggestionsContainerAriaLabel || headerText}\n        id={suggestionsListId}\n        role=\"listbox\"\n      >\n        <Announced message={this._getAlertText()} aria-live=\"polite\" />\n\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            id={forceResolveId}\n            onClick={this._forceResolve}\n            data-automationid={'sug-forceResolve'}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} ariaLabel={loadingText} label={loadingText} />}\n        {hasNoSuggestions ? noResults() : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={searchForMoreIcon || { iconName: 'Search' }}\n            id={searchForMoreId}\n            onClick={this._getMoreResults}\n            data-automationid={'sug-searchForMore'}\n            role={'option'}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} ariaLabel={searchingText} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  public scrollSelected(): void {\n    if (\n      this._selectedElement.current &&\n      this._scrollContainer.current &&\n      this._scrollContainer.current.scrollTo !== undefined\n    ) {\n      const { offsetHeight, offsetTop } = this._selectedElement.current;\n      const { offsetHeight: parentOffsetHeight, scrollTop } = this._scrollContainer.current;\n\n      const isAbove = offsetTop < scrollTop;\n      const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  }\n\n  private _getAlertText = () => {\n    const { isLoading, isSearching, suggestions, suggestionsAvailableAlertText, noResultsFoundText } = this.props;\n    if (!isLoading && !isSearching) {\n      if (suggestions.length > 0) {\n        return suggestionsAvailableAlertText || '';\n      }\n      if (noResultsFoundText) {\n        return noResultsFoundText;\n      }\n    }\n    return '';\n  };\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      removeButtonIconProps,\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.FunctionComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.suggestionsContainer} ref={this._scrollContainer} role=\"presentation\">\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            role=\"presentation\"\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              id={'sug-' + index}\n              removeButtonIconProps={removeButtonIconProps}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n\n      // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n      this.setState({ selectedActionType: SuggestionActionType.none });\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}