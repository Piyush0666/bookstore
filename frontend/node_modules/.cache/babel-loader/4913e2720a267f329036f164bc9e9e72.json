{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, classNamesFunction, DelayedRender, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  __extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = React.createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      var _a, _b; // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n\n      var element = event.target;\n      var value = element.value; // Ignore this event if any of the following are true:\n      // - the value is undefined (in case one of the IE bugs comes back)\n      // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n      // - it's the same as the previous value\n\n      var previousValue = _getValue(_this.props, _this.state) || '';\n\n      if (value === undefined || value === _this._lastChangeValue || value === previousValue) {\n        _this._lastChangeValue = undefined;\n        return;\n      }\n\n      _this._lastChangeValue = value;\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);\n\n      if (!_this._isControlled) {\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        _this.setState({\n          uncontrolledValue: value\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n    _this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    _this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    _this._warnControlledUsage();\n\n    var _a = props.defaultValue,\n        defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n        selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n        end = selection[1];\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    var prevValue = _getValue(prevProps, prevState);\n\n    var value = this.value;\n\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps); // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n\n\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      } // Adjust height if needed based on new value\n\n\n      this._adjustInputHeight(); // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n\n\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        invalid = _a.invalid,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        canRevealPassword = _a.canRevealPassword,\n        revealPasswordAriaLabel = _a.revealPasswordAriaLabel,\n        type = _a.type,\n        _b = _a.onRenderPrefix,\n        onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n        _c = _a.onRenderSuffix,\n        onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n        _d = _a.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        _e = _a.onRenderDescription,\n        onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n        isFocused = _f.isFocused,\n        isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n    var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return (// eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", {\n        ref: this.props.elementRef,\n        className: classNames.root\n      }, React.createElement(\"div\", {\n        className: classNames.wrapper\n      }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n        className: classNames.fieldGroup\n      }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n        className: classNames.prefix,\n        id: this._prefixId\n      }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n        className: classNames.icon\n      }, iconProps)), hasRevealButton && // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n      React.createElement(\"button\", {\n        \"aria-label\": revealPasswordAriaLabel,\n        className: classNames.revealButton,\n        onClick: this._onRevealButtonClick,\n        \"aria-pressed\": !!isRevealingPassword,\n        type: \"button\"\n      }, React.createElement(\"span\", {\n        className: classNames.revealSpan\n      }, React.createElement(Icon, {\n        className: classNames.revealIcon,\n        iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n      }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n        className: classNames.suffix,\n        id: this._suffixId\n      }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n        id: this._descriptionId\n      }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n        role: \"alert\"\n      }, React.createElement(DelayedRender, null, this._renderErrorMessage()))))\n    );\n  };\n  /**\n   * Sets focus on the text field\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n          errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n\n  TextFieldBase.prototype._renderErrorMessage = function () {\n    var errorMessage = this._errorMessage;\n    return errorMessage ? typeof errorMessage === 'string' ? React.createElement(\"p\", {\n      className: this._classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage)) : React.createElement(\"div\", {\n      className: this._classNames.errorMessage,\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage) : null;\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var _a = this.props.invalid,\n        invalid = _a === void 0 ? !!this._errorMessage : _a;\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": invalid,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        _b = _a.invalid,\n        invalid = _b === void 0 ? !!this._errorMessage : _b,\n        onRenderPrefix = _a.onRenderPrefix,\n        onRenderSuffix = _a.onRenderSuffix,\n        prefix = _a.prefix,\n        suffix = _a.suffix,\n        _c = _a.type,\n        type = _c === void 0 ? 'text' : _c,\n        label = _a.label; // build aria-labelledby list from label, prefix, and suffix\n\n    var labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    var inputProps = __assign(__assign({\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id\n    }, getNativeProps(this.props, inputProperties, ['defaultValue', 'type'])), {\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    });\n\n    var defaultRender = function (updatedInputProps) {\n      return React.createElement(\"input\", __assign({}, updatedInputProps));\n    };\n\n    var onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this; // In case _validate is called again while validation promise is executing\n\n\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true\n  };\n  return TextFieldBase;\n}(React.Component);\n\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\n\nfunction _getValue(props, state) {\n  var _a = props.value,\n      value = _a === void 0 ? state.uncontrolledValue : _a;\n\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\n\n\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n} // Only calculate this once across all TextFields, since will stay the same\n\n\nvar __browserNeedsRevealButton;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n\n    if (win === null || win === void 0 ? void 0 : win.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /^Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"mappings":"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","names":["React","Label","Icon","Async","classNamesFunction","DelayedRender","getId","getNativeProps","getWindow","initializeComponentRef","inputProperties","isControlled","isIE11","textAreaProperties","warn","warnControlledUsage","warnMutuallyExclusive","getClassNames","DEFAULT_STATE_VALUE","COMPONENT_NAME","REVEAL_ICON_NAME","HIDE_ICON_NAME","__extends","props","_super","_this","createRef","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","onBlur","validateOnFocusOut","required","labelStyles","_classNames","subComponentStyles","label","undefined","htmlFor","_id","styles","disabled","id","_labelId","description","className","event","isRevealingPassword","prevState","element","target","previousValue","_getValue","state","_lastChangeValue","onChange","_b","_isControlled","uncontrolledValue","_async","process","env","NODE_ENV","errorMessage","_fallbackId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","_a","defaultValue","String","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","TextFieldBase","_adjustInputHeight","validateOnLoad","dispose","prevProps","selection","selectionStart","selectionEnd","snapshot","end","multiline","focus","start","setSelectionRange","prevValue","_shouldValidateAllChanges","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","_c","onRenderSuffix","_onRenderSuffix","_d","onRenderLabel","_onRenderLabel","_e","onRenderDescription","_onRenderDescription","_errorMessage","isInvalid","hasRevealButton","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","root","wrapper","fieldGroup","_renderTextArea","_renderInput","__assign","icon","revealButton","onClick","_onRevealButtonClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","_renderErrorMessage","_textElement","current","blur","select","componentId","componentName","oldProps","valueProp","defaultValueProp","onChangeProp","readOnlyProp","_hasWarnedNullValue","style","paddingBottom","textAreaProps","ariaLabelledBy","onInput","_onInputChange","field","ariaLabel","readOnly","_onFocus","_onBlur","labelIds","push","inputProps","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","_notifyAfterValidate","currentValidation_1","then","onNotifyValidationResult","textField","height","scrollHeight","Component","__browserNeedsRevealButton","win","navigator","isEdge","test","userAgent"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\TextField\\TextField.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"]},"metadata":{},"sourceType":"module"}