{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, getPlaceholderStyles, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a, _b, _c;\n\n  var className = props.className,\n      theme = props.theme,\n      isFocused = props.isFocused,\n      inputClassName = props.inputClassName,\n      disabled = props.disabled;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n      inputBorderHovered = semanticColors.inputBorderHovered,\n      inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // placeholder style constants\n\n  var placeholderStyles = [fonts.medium, {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  }];\n  var disabledPlaceholderStyles = {\n    color: semanticColors.disabledText,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _b)\n  }; // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_c = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _c[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _c)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, getPlaceholderStyles(placeholderStyles), disabled && getPlaceholderStyles(disabledPlaceholderStyles), inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"mappings":"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","names":["getGlobalClassNames","getInputFocusStyle","getPlaceholderStyles","hiddenContentStyle","HighContrastSelector","GlobalClassNames","root","text","itemsWrapper","input","getStyles","props","theme","isFocused","inputClassName","disabled","Error","effects","fonts","semanticColors","inputBorderHovered","inputFocusBorderAlt","classNames","placeholderStyles","medium","color","inputPlaceholderText","opacity","selectors","_a","disabledPlaceholderStyles","disabledText","_b","disabledOverlayColor","className","display","position","flexWrap","alignItems","boxSizing","minWidth","minHeight","border","inputBorder","borderRadius","roundedCorner2","borderColor","content","top","right","bottom","left","background","_c","maxWidth","height","flexGrow","outline","padding","alignSelf","backgroundColor","inputText","screenReaderText"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\pickers\\BasePicker.styles.ts"],"sourcesContent":["import {\n  getGlobalClassNames,\n  getInputFocusStyle,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  HighContrastSelector,\n} from '../../Styling';\nimport type { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      disabled && getPlaceholderStyles(disabledPlaceholderStyles),\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}