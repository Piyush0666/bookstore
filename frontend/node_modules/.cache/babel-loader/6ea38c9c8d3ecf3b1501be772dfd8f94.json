{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getClassNames = classNamesFunction();\n/** Validate if the cell's color is white or not to apply whiteCell style */\n\nvar isWhiteCell = function (inputColor) {\n  var currentColor = getColorFromString(inputColor);\n  return (currentColor === null || currentColor === void 0 ? void 0 : currentColor.hex) === 'ffffff';\n};\n\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nexport var ColorPickerGridCellBase = function (props) {\n  var item = props.item,\n      // eslint-disable-next-line deprecation/deprecation\n  _a = props.idPrefix,\n      // eslint-disable-next-line deprecation/deprecation\n  idPrefix = _a === void 0 ? props.id : _a,\n      isRadio = props.isRadio,\n      _b = props.selected,\n      selected = _b === void 0 ? false : _b,\n      _c = props.disabled,\n      disabled = _c === void 0 ? false : _c,\n      styles = props.styles,\n      _d = props.circle,\n      circle = _d === void 0 ? true : _d,\n      color = props.color,\n      onClick = props.onClick,\n      onHover = props.onHover,\n      onFocus = props.onFocus,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onWheel = props.onWheel,\n      onKeyDown = props.onKeyDown,\n      height = props.height,\n      width = props.width,\n      borderWidth = props.borderWidth;\n  var classNames = getClassNames(styles, {\n    theme: props.theme,\n    disabled: disabled,\n    selected: selected,\n    circle: circle,\n    isWhite: isWhiteCell(color),\n    height: height,\n    width: width,\n    borderWidth: borderWidth\n  }); // Render the core of a color cell\n\n  var onRenderColorOption = function (colorOption) {\n    var _a;\n\n    var svgClassName = classNames.svg; // Build an SVG for the cell with the given shape and color properties\n    // Include role=\"img\" and aria-label here for better virtual cursor accessibility,\n    // and for a VoiceOver bug where it skips grid cells that lack inner content\n\n    return React.createElement(\"svg\", {\n      className: svgClassName,\n      role: \"img\",\n      \"aria-label\": colorOption.label,\n      viewBox: \"0 0 20 20\",\n      fill: (_a = getColorFromString(colorOption.color)) === null || _a === void 0 ? void 0 : _a.str\n    }, circle ? React.createElement(\"circle\", {\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"50%\"\n    }) : React.createElement(\"rect\", {\n      width: \"100%\",\n      height: \"100%\"\n    }));\n  };\n\n  var cellSemantics = isRadio ? {\n    role: 'radio',\n    'aria-checked': selected,\n    selected: undefined\n  } : {\n    role: 'gridcell',\n    selected: selected\n  };\n  return React.createElement(ButtonGridCell, __assign({\n    item: item,\n    id: idPrefix + \"-\" + item.id + \"-\" + item.index,\n    key: item.id,\n    disabled: disabled\n  }, cellSemantics, {\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderItem: onRenderColorOption,\n    onClick: onClick,\n    onHover: onHover,\n    onFocus: onFocus,\n    label: item.label,\n    className: classNames.colorCell,\n    getClassNames: getColorPickerGridCellButtonClassNames,\n    index: item.index,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onWheel: onWheel,\n    onKeyDown: onKeyDown\n  }));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,iBAApD;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,SAAS,IAAIC,qBAAtB,QAAmD,4CAAnD;AAUA,IAAMC,aAAa,GAAGN,kBAAkB,EAAxC;AAEA;;AACA,IAAMO,WAAW,GAAG,UAACC,UAAD,EAAmB;EACrC,IAAMC,YAAY,GAAGP,kBAAkB,CAACM,UAAD,CAAvC;EACA,OAAO,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEE,GAAd,MAAsB,QAA7B;AACD,CAHD;;AAKA,IAAMC,sCAAsC,GAAGV,eAAe,CAC5D,UACEW,KADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,iBALF,EAMEC,QANF,EAOEC,OAPF,EAQEC,QARF,EASEC,OATF,EAS8B;EAE5B,IAAMC,MAAM,GAAGhB,qBAAqB,CAACO,KAAD,CAApC;EACA,OAAOb,cAAc,CAAC;IACpBuB,IAAI,EAAE,CACJ,WADI,EAEJD,MAAM,CAACC,IAFH,EAGJR,gBAHI,EAIJD,SAJI,EAKJK,OAAO,IAAI,CAAC,YAAD,EAAeG,MAAM,CAACE,WAAtB,CALP,EAMJN,QAAQ,IAAI,CAAC,aAAD,EAAgBI,MAAM,CAACG,YAAvB,CANR,EAOJ,CAACP,QAAD,IACE,CAACC,OADH,IACc;MACVO,SAAS,EAAE;QACT,UAAUJ,MAAM,CAACK,WADR;QAET,UAAUL,MAAM,CAACM,WAFR;QAGT,WAAWN,MAAM,CAACO;MAHT;IADD,CARV,EAeJX,QAAQ,IAAIC,OAAZ,IAAuB,CAACG,MAAM,CAACQ,mBAAR,CAfnB,EAgBJ,CAACZ,QAAD,IACEC,OADF,IACa;MACTO,SAAS,EAAE;QACT,UAAUJ,MAAM,CAACS,kBADR;QAET,WAAWT,MAAM,CAACU;MAFT;IADF,CAjBT,CADc;IAyBpBC,aAAa,EAAE,CAAC,yBAAD,EAA4BX,MAAM,CAACW,aAAnC;EAzBK,CAAD,CAArB;AA2BD,CAxC2D,CAA9D;AA2CA,OAAO,IAAMC,uBAAuB,GAAuD,iBAAK;EAE5F,QAAI,GAoBFC,KAAK,KApBP;EAAA,IACA;EACAC,KAkBED,KAAK,SApBP;EAAA,IACA;EACAE,QAAQ,mBAAGF,KAAK,CAACG,EAAT,GAAWF,EAFnB;EAAA,IAGAG,OAAO,GAiBLJ,KAAK,QApBP;EAAA,IAIAK,KAgBEL,KAAK,SApBP;EAAA,IAIAM,QAAQ,mBAAG,KAAH,GAAQD,EAJhB;EAAA,IAKAE,KAeEP,KAAK,SApBP;EAAA,IAKAjB,QAAQ,mBAAG,KAAH,GAAQwB,EALhB;EAAA,IAMApB,MAAM,GAcJa,KAAK,OApBP;EAAA,IAOAQ,KAaER,KAAK,OApBP;EAAA,IAOAS,MAAM,mBAAG,IAAH,GAAOD,EAPb;EAAA,IAQAE,KAAK,GAYHV,KAAK,MApBP;EAAA,IASAW,OAAO,GAWLX,KAAK,QApBP;EAAA,IAUAY,OAAO,GAULZ,KAAK,QApBP;EAAA,IAWAa,OAAO,GASLb,KAAK,QApBP;EAAA,IAYAc,YAAY,GAQVd,KAAK,aApBP;EAAA,IAaAe,WAAW,GAOTf,KAAK,YApBP;EAAA,IAcAgB,YAAY,GAMVhB,KAAK,aApBP;EAAA,IAeAiB,OAAO,GAKLjB,KAAK,QApBP;EAAA,IAgBAkB,SAAS,GAIPlB,KAAK,UApBP;EAAA,IAiBAmB,MAAM,GAGJnB,KAAK,OApBP;EAAA,IAkBAoB,KAAK,GAEHpB,KAAK,MApBP;EAAA,IAmBAqB,WAAW,GACTrB,KAAK,YApBP;EAsBF,IAAMsB,UAAU,GAAmDlD,aAAa,CAACe,MAAD,EAAU;IACxFT,KAAK,EAAEsB,KAAK,CAACtB,KAD2E;IAExFK,QAAQ,UAFgF;IAGxFuB,QAAQ,UAHgF;IAIxFG,MAAM,QAJkF;IAKxFc,OAAO,EAAElD,WAAW,CAACqC,KAAD,CALoE;IAMxFS,MAAM,QANkF;IAOxFC,KAAK,OAPmF;IAQxFC,WAAW;EAR6E,CAAV,CAAhF,CAxB8F,CAmC9F;;EACA,IAAMG,mBAAmB,GAAG,UAACC,WAAD,EAA6B;;;IACvD,IAAMC,YAAY,GAAGJ,UAAU,CAACK,GAAhC,CADuD,CAGvD;IACA;IACA;;IACA,OACE/D;MACEe,SAAS,EAAE+C,YADb;MAEEE,IAAI,EAAC,KAFP;MAEY,cACEH,WAAW,CAACI,KAH1B;MAIEC,OAAO,EAAC,WAJV;MAKEC,IAAI,EAAE,wBAAkB,CAACN,WAAW,CAACf,KAAb,CAAlB,MAA+C,IAA/C,IAA+CT,aAA/C,GAA+C,MAA/C,GAA+CA,GAAE+B;IALzD,GAOGvB,MAAM,GAAG7C;MAAQqE,EAAE,EAAC,KAAX;MAAiBC,EAAE,EAAC,KAApB;MAA0BC,CAAC,EAAC;IAA5B,EAAH,GAA0CvE;MAAMwD,KAAK,EAAC,MAAZ;MAAmBD,MAAM,EAAC;IAA1B,EAPnD,CADF;EAWD,CAjBD;;EAmBA,IAAMiB,aAAa,GAAGhC,OAAO,GACzB;IACEwB,IAAI,EAAE,OADR;IAEE,gBAAgBtB,QAFlB;IAGEA,QAAQ,EAAE+B;EAHZ,CADyB,GAMzB;IACET,IAAI,EAAE,UADR;IAEEtB,QAAQ,EAAEA;EAFZ,CANJ;EAWA,OACE1C,oBAACK,cAAD,EAAeqE;IACbC,IAAI,EAAEA,IADO;IAEbpC,EAAE,EAAKD,QAAQ,MAAR,GAAYqC,IAAI,CAACpC,EAAjB,GAAmB,GAAnB,GAAuBoC,IAAI,CAACC,KAFtB;IAGbC,GAAG,EAAEF,IAAI,CAACpC,EAHG;IAIbpB,QAAQ,EAAEA;EAJG,GAKTqD,aALS,EAKI;IACjB;IACAM,YAAY,EAAElB,mBAFG;IAGjBb,OAAO,EAAEA,OAHQ;IAIjBC,OAAO,EAAEA,OAJQ;IAKjBC,OAAO,EAAEA,OALQ;IAMjBgB,KAAK,EAAEU,IAAI,CAACV,KANK;IAOjBlD,SAAS,EAAE2C,UAAU,CAACqB,SAPL;IAQjBvE,aAAa,EAAEK,sCARE;IASjB+D,KAAK,EAAED,IAAI,CAACC,KATK;IAUjB1B,YAAY,EAAEA,YAVG;IAWjBC,WAAW,EAAEA,WAXI;IAYjBC,YAAY,EAAEA,YAZG;IAajBC,OAAO,EAAEA,OAbQ;IAcjBC,SAAS,EAAEA;EAdM,CALJ,CAAf,CADF;AAuBD,CAzFM","names":["React","mergeStyleSets","classNamesFunction","memoizeFunction","getColorFromString","ButtonGridCell","getStyles","getActionButtonStyles","getClassNames","isWhiteCell","inputColor","currentColor","hex","getColorPickerGridCellButtonClassNames","theme","className","variantClassName","iconClassName","menuIconClassName","disabled","checked","expanded","isSplit","styles","root","rootChecked","rootDisabled","selectors","rootHovered","rootFocused","rootPressed","rootCheckedDisabled","rootCheckedHovered","rootCheckedPressed","flexContainer","ColorPickerGridCellBase","props","_a","idPrefix","id","isRadio","_b","selected","_c","_d","circle","color","onClick","onHover","onFocus","onMouseEnter","onMouseMove","onMouseLeave","onWheel","onKeyDown","height","width","borderWidth","classNames","isWhite","onRenderColorOption","colorOption","svgClassName","svg","role","label","viewBox","fill","str","cx","cy","r","cellSemantics","undefined","__assign","item","index","key","onRenderItem","colorCell"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\SwatchColorPicker\\ColorPickerGridCell.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport type { ITheme, IProcessedStyleSet } from '../../Styling';\nimport type { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport type {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\n/** Validate if the cell's color is white or not to apply whiteCell style */\nconst isWhiteCell = (inputColor: string): boolean => {\n  const currentColor = getColorFromString(inputColor!);\n  return currentColor?.hex === 'ffffff';\n};\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nexport const ColorPickerGridCellBase: React.FunctionComponent<IColorPickerGridCellProps> = props => {\n  const {\n    item,\n    // eslint-disable-next-line deprecation/deprecation\n    idPrefix = props.id,\n    isRadio,\n    selected = false,\n    disabled = false,\n    styles,\n    circle = true,\n    color,\n    onClick,\n    onHover,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onWheel,\n    onKeyDown,\n    height,\n    width,\n    borderWidth,\n  } = props;\n\n  const classNames: IProcessedStyleSet<IColorPickerGridCellStyles> = getClassNames(styles!, {\n    theme: props.theme!,\n    disabled,\n    selected,\n    circle,\n    isWhite: isWhiteCell(color!),\n    height,\n    width,\n    borderWidth,\n  });\n\n  // Render the core of a color cell\n  const onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    const svgClassName = classNames.svg;\n\n    // Build an SVG for the cell with the given shape and color properties\n    // Include role=\"img\" and aria-label here for better virtual cursor accessibility,\n    // and for a VoiceOver bug where it skips grid cells that lack inner content\n    return (\n      <svg\n        className={svgClassName}\n        role=\"img\"\n        aria-label={colorOption.label}\n        viewBox=\"0 0 20 20\"\n        fill={getColorFromString(colorOption.color as string)?.str}\n      >\n        {circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  const cellSemantics = isRadio\n    ? {\n        role: 'radio',\n        'aria-checked': selected,\n        selected: undefined,\n      }\n    : {\n        role: 'gridcell',\n        selected: selected,\n      };\n\n  return (\n    <ButtonGridCell\n      item={item}\n      id={`${idPrefix}-${item.id}-${item.index}`}\n      key={item.id}\n      disabled={disabled}\n      {...cellSemantics}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderColorOption}\n      onClick={onClick}\n      onHover={onHover}\n      onFocus={onFocus}\n      label={item.label}\n      className={classNames.colorCell}\n      getClassNames={getColorPickerGridCellButtonClassNames}\n      index={item.index}\n      onMouseEnter={onMouseEnter}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onWheel={onWheel}\n      onKeyDown={onKeyDown}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}