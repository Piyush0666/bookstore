{"ast":null,"code":"import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nexport var CalendarMonthHeaderRow = function (props) {\n  var showWeekNumbers = props.showWeekNumbers,\n      strings = props.strings,\n      firstDayOfWeek = props.firstDayOfWeek,\n      allFocusable = props.allFocusable,\n      weeksToShow = props.weeksToShow,\n      weeks = props.weeks,\n      classNames = props.classNames;\n  var dayLabels = strings.shortDays.slice();\n  var firstOfMonthIndex = findIndex(weeks[1], function (day) {\n    return day.originalDate.getDate() === 1;\n  });\n\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    var firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return React.createElement(\"tr\", null, showWeekNumbers && React.createElement(\"th\", {\n    className: classNames.dayCell\n  }), dayLabels.map(function (val, index) {\n    var i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n    var label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n    return React.createElement(\"th\", {\n      className: css(classNames.dayCell, classNames.weekDayLabelCell),\n      scope: \"col\",\n      key: dayLabels[i] + ' ' + index,\n      title: label,\n      \"aria-label\": label,\n      \"data-is-focusable\": allFocusable ? true : undefined\n    }, dayLabels[i]);\n  }));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,qBAA/B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AAUA,OAAO,IAAMC,sBAAsB,GAA6D,iBAAK;EAC3F,mBAAe,GAA4EC,KAAK,gBAAhG;EAAA,IAAiBC,OAAO,GAAmED,KAAK,QAAhG;EAAA,IAA0BE,cAAc,GAAmDF,KAAK,eAAhG;EAAA,IAA0CG,YAAY,GAAqCH,KAAK,aAAhG;EAAA,IAAwDI,WAAW,GAAwBJ,KAAK,YAAhG;EAAA,IAAqEK,KAAK,GAAiBL,KAAK,MAAhG;EAAA,IAA4EM,UAAU,GAAKN,KAAK,WAAhG;EACR,IAAMO,SAAS,GAAGN,OAAO,CAACO,SAAR,CAAkBC,KAAlB,EAAlB;EACA,IAAMC,iBAAiB,GAAGb,SAAS,CAACQ,KAAM,CAAC,CAAD,CAAP,EAAY,UAACM,GAAD,EAAc;IAAK,UAAG,CAACC,YAAJ,CAAiBC,OAAjB,OAA+B,CAA/B;EAAgC,CAA/D,CAAnC;;EACA,IAAIT,WAAW,KAAK,CAAhB,IAAqBM,iBAAiB,IAAI,CAA9C,EAAiD;IAC/C;IACA,IAAMI,uBAAuB,GAAG,CAACJ,iBAAiB,GAAGR,cAArB,IAAuCJ,YAAvE;IACAS,SAAS,CAACO,uBAAD,CAAT,GAAqCb,OAAO,CAACc,WAAR,CAAoBV,KAAM,CAAC,CAAD,CAAN,CAAUK,iBAAV,EAA6BE,YAA7B,CAA0CI,QAA1C,EAApB,CAArC;EACD;;EAED,OACErB,gCACGsB,eAAe,IAAItB;IAAIuB,SAAS,EAAEZ,UAAU,CAACa;EAA1B,EADtB,EAEGZ,SAAS,CAACa,GAAV,CAAc,UAACC,GAAD,EAAcC,KAAd,EAA2B;IACxC,IAAMC,CAAC,GAAG,CAACD,KAAK,GAAGpB,cAAT,IAA2BJ,YAArC;IACA,IAAM0B,KAAK,GAAGF,KAAK,KAAKZ,iBAAV,GAA8BT,OAAO,CAACwB,IAAR,CAAaF,CAAb,IAAkB,GAAlB,GAAwBhB,SAAS,CAACgB,CAAD,CAA/D,GAAqEtB,OAAO,CAACwB,IAAR,CAAaF,CAAb,CAAnF;IACA,OACE5B;MACEuB,SAAS,EAAEtB,GAAG,CAACU,UAAU,CAACa,OAAZ,EAAqBb,UAAU,CAACoB,gBAAhC,CADhB;MAEEC,KAAK,EAAC,KAFR;MAGEC,GAAG,EAAErB,SAAS,CAACgB,CAAD,CAAT,GAAe,GAAf,GAAqBD,KAH5B;MAIEO,KAAK,EAAEL,KAJT;MAIc,cACAA,KALd;MAKmB,qBACErB,YAAY,GAAG,IAAH,GAAU2B;IAN3C,GAQGvB,SAAS,CAACgB,CAAD,CARZ,CADF;EAYD,CAfA,CAFH,CADF;AAqBD,CA/BM","names":["React","css","findIndex","DAYS_IN_WEEK","CalendarMonthHeaderRow","props","strings","firstDayOfWeek","allFocusable","weeksToShow","weeks","classNames","dayLabels","shortDays","slice","firstOfMonthIndex","day","originalDate","getDate","firstOfMonthIndexOffset","shortMonths","getMonth","showWeekNumbers","className","dayCell","map","val","index","i","label","days","weekDayLabelCell","scope","key","title","undefined"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\CalendarDayGrid\\CalendarMonthHeaderRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo } from './CalendarDayGrid.base';\n\nexport interface ICalendarDayMonthHeaderRowProps extends ICalendarDayGridProps {\n  weeks: IDayInfo[][];\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n}\n\nexport const CalendarMonthHeaderRow: React.FunctionComponent<ICalendarDayMonthHeaderRowProps> = props => {\n  const { showWeekNumbers, strings, firstDayOfWeek, allFocusable, weeksToShow, weeks, classNames } = props;\n  const dayLabels = strings.shortDays.slice();\n  const firstOfMonthIndex = findIndex(weeks![1], (day: IDayInfo) => day.originalDate.getDate() === 1);\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    const firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks![1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return (\n    <tr>\n      {showWeekNumbers && <th className={classNames.dayCell} />}\n      {dayLabels.map((val: string, index: number) => {\n        const i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n        const label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n        return (\n          <th\n            className={css(classNames.dayCell, classNames.weekDayLabelCell)}\n            scope=\"col\"\n            key={dayLabels[i] + ' ' + index}\n            title={label}\n            aria-label={label}\n            data-is-focusable={allFocusable ? true : undefined}\n          >\n            {dayLabels[i]}\n          </th>\n        );\n      })}\n    </tr>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}