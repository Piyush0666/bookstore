{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isRestrictedDate } from './isRestrictedDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\n\nexport var findAvailableDate = function (options) {\n  var targetDate = options.targetDate,\n      initialDate = options.initialDate,\n      direction = options.direction,\n      restrictedDateOptions = __rest(options, [\"targetDate\", \"initialDate\", \"direction\"]);\n\n  var availableDate = targetDate; // if the target date is available, return it immediately\n\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};","map":{"version":3,"mappings":";AAEA,SAASA,gBAAT,QAAiC,oBAAjC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,sBAAzC;AAEA;;;;;AAIA,OAAO,IAAMC,iBAAiB,GAAG,UAACC,OAAD,EAA+B;EACtD,cAAU,GAAuDA,OAAO,WAAxE;EAAA,IAAYC,WAAW,GAA0CD,OAAO,YAAxE;EAAA,IAAyBE,SAAS,GAA+BF,OAAO,UAAxE;EAAA,IAAuCG,qBAAqB,UAAKH,OAAL,EAA9D,0CAA8D,CAA5D;;EACR,IAAII,aAAa,GAAGC,UAApB,CAF8D,CAG9D;;EACA,IAAI,CAACX,gBAAgB,CAACW,UAAD,EAAaF,qBAAb,CAArB,EAA0D;IACxD,OAAOE,UAAP;EACD;;EAED,OACER,eAAe,CAACI,WAAD,EAAcG,aAAd,CAAf,KAAgD,CAAhD,IACAV,gBAAgB,CAACU,aAAD,EAAgBD,qBAAhB,CADhB,IAEA,CAACR,cAAc,CAACS,aAAD,EAAgBD,qBAAhB,CAFf,IAGA,CAACP,eAAe,CAACQ,aAAD,EAAgBD,qBAAhB,CAJlB,EAKE;IACAC,aAAa,GAAGN,OAAO,CAACM,aAAD,EAAgBF,SAAhB,CAAvB;EACD;;EAED,IAAIL,eAAe,CAACI,WAAD,EAAcG,aAAd,CAAf,KAAgD,CAAhD,IAAqD,CAACV,gBAAgB,CAACU,aAAD,EAAgBD,qBAAhB,CAA1E,EAAkH;IAChH,OAAOC,aAAP;EACD;;EAED,OAAOE,SAAP;AACD,CAtBM","names":["isRestrictedDate","isAfterMaxDate","isBeforeMinDate","compareDatePart","addDays","findAvailableDate","options","initialDate","direction","restrictedDateOptions","availableDate","targetDate","undefined"],"sources":["C:\\Users\\Admin\\Desktop\\bookstore\\frontend\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\dateGrid\\findAvailableDate.ts"],"sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}